// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace enigma {
namespace proto {
namespace resource {
class ProjectDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Project>
     _instance;
} _Project_default_instance_;
class BackgroundDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Background>
     _instance;
} _Background_default_instance_;

namespace protobuf_game_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Project, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Project, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Project, backgrounds_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, preload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, transparent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, smooth_edges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, use_as_tileset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, tile_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, tile_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, horizontal_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, vertical_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, horizontal_spacing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Background, vertical_spacing_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(Project)},
  { 7, 24, sizeof(Background)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Project_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Background_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "game.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fdescriptor_2eproto::InitDefaults();
  _Project_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Project_default_instance_);_Background_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Background_default_instance_);::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::google::protobuf::FieldOptions::internal_default_instance(),
    50000, 9, false, false);
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ngame.proto\022\025enigma.proto.resource\032 goo"
      "gle/protobuf/descriptor.proto\"A\n\007Project"
      "\0226\n\013backgrounds\030\001 \003(\0132!.enigma.proto.res"
      "ource.Background\"\363\002\n\nBackground\022\014\n\004name\030"
      "\001 \001(\t\022\n\n\002id\030\002 \001(\005\022\017\n\007preload\030\004 \001(\010\022\023\n\013tr"
      "ansparent\030\005 \001(\010\022\024\n\014smooth_edges\030\006 \001(\010\022%\n"
      "\016use_as_tileset\030\007 \001(\010B\r\202\265\030\tistileset\022!\n\n"
      "tile_width\030\013 \001(\005B\r\202\265\030\ttilewidth\022#\n\013tile_"
      "height\030\014 \001(\005B\016\202\265\030\ntileheight\022\'\n\021horizont"
      "al_offset\030\r \001(\005B\014\202\265\030\010tilexoff\022%\n\017vertica"
      "l_offset\030\016 \001(\005B\014\202\265\030\010tileyoff\022(\n\022horizont"
      "al_spacing\030\017 \001(\005B\014\202\265\030\010tilehsep\022&\n\020vertic"
      "al_spacing\030\020 \001(\005B\014\202\265\030\010tilevsep:,\n\003gmx\022\035."
      "google.protobuf.FieldOptions\030\320\206\003 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 556);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_game_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Project::kBackgroundsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Project::Project()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enigma.proto.resource.Project)
}
Project::Project(const Project& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      backgrounds_(from.backgrounds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enigma.proto.resource.Project)
}

void Project::SharedCtor() {
  _cached_size_ = 0;
}

Project::~Project() {
  // @@protoc_insertion_point(destructor:enigma.proto.resource.Project)
  SharedDtor();
}

void Project::SharedDtor() {
}

void Project::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Project::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Project& Project::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

Project* Project::New(::google::protobuf::Arena* arena) const {
  Project* n = new Project;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Project::Clear() {
// @@protoc_insertion_point(message_clear_start:enigma.proto.resource.Project)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  backgrounds_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Project::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:enigma.proto.resource.Project)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .enigma.proto.resource.Background backgrounds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backgrounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enigma.proto.resource.Project)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enigma.proto.resource.Project)
  return false;
#undef DO_
}

void Project::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enigma.proto.resource.Project)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enigma.proto.resource.Background backgrounds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->backgrounds_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->backgrounds(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:enigma.proto.resource.Project)
}

::google::protobuf::uint8* Project::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:enigma.proto.resource.Project)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .enigma.proto.resource.Background backgrounds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->backgrounds_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->backgrounds(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enigma.proto.resource.Project)
  return target;
}

size_t Project::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enigma.proto.resource.Project)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .enigma.proto.resource.Background backgrounds = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->backgrounds_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backgrounds(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Project::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:enigma.proto.resource.Project)
  GOOGLE_DCHECK_NE(&from, this);
  const Project* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Project>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:enigma.proto.resource.Project)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:enigma.proto.resource.Project)
    MergeFrom(*source);
  }
}

void Project::MergeFrom(const Project& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enigma.proto.resource.Project)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  backgrounds_.MergeFrom(from.backgrounds_);
}

void Project::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:enigma.proto.resource.Project)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Project::CopyFrom(const Project& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enigma.proto.resource.Project)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Project::IsInitialized() const {
  return true;
}

void Project::Swap(Project* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Project::InternalSwap(Project* other) {
  using std::swap;
  backgrounds_.InternalSwap(&other->backgrounds_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Project::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Project

// repeated .enigma.proto.resource.Background backgrounds = 1;
int Project::backgrounds_size() const {
  return backgrounds_.size();
}
void Project::clear_backgrounds() {
  backgrounds_.Clear();
}
const ::enigma::proto::resource::Background& Project::backgrounds(int index) const {
  // @@protoc_insertion_point(field_get:enigma.proto.resource.Project.backgrounds)
  return backgrounds_.Get(index);
}
::enigma::proto::resource::Background* Project::mutable_backgrounds(int index) {
  // @@protoc_insertion_point(field_mutable:enigma.proto.resource.Project.backgrounds)
  return backgrounds_.Mutable(index);
}
::enigma::proto::resource::Background* Project::add_backgrounds() {
  // @@protoc_insertion_point(field_add:enigma.proto.resource.Project.backgrounds)
  return backgrounds_.Add();
}
::google::protobuf::RepeatedPtrField< ::enigma::proto::resource::Background >*
Project::mutable_backgrounds() {
  // @@protoc_insertion_point(field_mutable_list:enigma.proto.resource.Project.backgrounds)
  return &backgrounds_;
}
const ::google::protobuf::RepeatedPtrField< ::enigma::proto::resource::Background >&
Project::backgrounds() const {
  // @@protoc_insertion_point(field_list:enigma.proto.resource.Project.backgrounds)
  return backgrounds_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Background::kNameFieldNumber;
const int Background::kIdFieldNumber;
const int Background::kPreloadFieldNumber;
const int Background::kTransparentFieldNumber;
const int Background::kSmoothEdgesFieldNumber;
const int Background::kUseAsTilesetFieldNumber;
const int Background::kTileWidthFieldNumber;
const int Background::kTileHeightFieldNumber;
const int Background::kHorizontalOffsetFieldNumber;
const int Background::kVerticalOffsetFieldNumber;
const int Background::kHorizontalSpacingFieldNumber;
const int Background::kVerticalSpacingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Background::Background()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:enigma.proto.resource.Background)
}
Background::Background(const Background& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vertical_spacing_) -
    reinterpret_cast<char*>(&id_)) + sizeof(vertical_spacing_));
  // @@protoc_insertion_point(copy_constructor:enigma.proto.resource.Background)
}

void Background::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertical_spacing_) -
      reinterpret_cast<char*>(&id_)) + sizeof(vertical_spacing_));
}

Background::~Background() {
  // @@protoc_insertion_point(destructor:enigma.proto.resource.Background)
  SharedDtor();
}

void Background::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Background::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Background::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Background& Background::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

Background* Background::New(::google::protobuf::Arena* arena) const {
  Background* n = new Background;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Background::Clear() {
// @@protoc_insertion_point(message_clear_start:enigma.proto.resource.Background)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tile_height_) -
        reinterpret_cast<char*>(&id_)) + sizeof(tile_height_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&horizontal_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vertical_spacing_) -
        reinterpret_cast<char*>(&horizontal_offset_)) + sizeof(vertical_spacing_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Background::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:enigma.proto.resource.Background)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "enigma.proto.resource.Background.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool preload = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_preload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool transparent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_transparent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transparent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool smooth_edges = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_smooth_edges();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &smooth_edges_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_as_tileset = 7 [(.enigma.proto.resource.gmx) = "istileset"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_use_as_tileset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_as_tileset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tile_width = 11 [(.enigma.proto.resource.gmx) = "tilewidth"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_tile_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tile_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tile_height = 12 [(.enigma.proto.resource.gmx) = "tileheight"];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_tile_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tile_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 horizontal_offset = 13 [(.enigma.proto.resource.gmx) = "tilexoff"];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_horizontal_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horizontal_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 vertical_offset = 14 [(.enigma.proto.resource.gmx) = "tileyoff"];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_vertical_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertical_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 horizontal_spacing = 15 [(.enigma.proto.resource.gmx) = "tilehsep"];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_horizontal_spacing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horizontal_spacing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 vertical_spacing = 16 [(.enigma.proto.resource.gmx) = "tilevsep"];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_vertical_spacing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertical_spacing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enigma.proto.resource.Background)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enigma.proto.resource.Background)
  return false;
#undef DO_
}

void Background::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enigma.proto.resource.Background)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enigma.proto.resource.Background.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional bool preload = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->preload(), output);
  }

  // optional bool transparent = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->transparent(), output);
  }

  // optional bool smooth_edges = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->smooth_edges(), output);
  }

  // optional bool use_as_tileset = 7 [(.enigma.proto.resource.gmx) = "istileset"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->use_as_tileset(), output);
  }

  // optional int32 tile_width = 11 [(.enigma.proto.resource.gmx) = "tilewidth"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tile_width(), output);
  }

  // optional int32 tile_height = 12 [(.enigma.proto.resource.gmx) = "tileheight"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tile_height(), output);
  }

  // optional int32 horizontal_offset = 13 [(.enigma.proto.resource.gmx) = "tilexoff"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->horizontal_offset(), output);
  }

  // optional int32 vertical_offset = 14 [(.enigma.proto.resource.gmx) = "tileyoff"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->vertical_offset(), output);
  }

  // optional int32 horizontal_spacing = 15 [(.enigma.proto.resource.gmx) = "tilehsep"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->horizontal_spacing(), output);
  }

  // optional int32 vertical_spacing = 16 [(.enigma.proto.resource.gmx) = "tilevsep"];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->vertical_spacing(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:enigma.proto.resource.Background)
}

::google::protobuf::uint8* Background::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:enigma.proto.resource.Background)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "enigma.proto.resource.Background.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional bool preload = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->preload(), target);
  }

  // optional bool transparent = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->transparent(), target);
  }

  // optional bool smooth_edges = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->smooth_edges(), target);
  }

  // optional bool use_as_tileset = 7 [(.enigma.proto.resource.gmx) = "istileset"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->use_as_tileset(), target);
  }

  // optional int32 tile_width = 11 [(.enigma.proto.resource.gmx) = "tilewidth"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tile_width(), target);
  }

  // optional int32 tile_height = 12 [(.enigma.proto.resource.gmx) = "tileheight"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tile_height(), target);
  }

  // optional int32 horizontal_offset = 13 [(.enigma.proto.resource.gmx) = "tilexoff"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->horizontal_offset(), target);
  }

  // optional int32 vertical_offset = 14 [(.enigma.proto.resource.gmx) = "tileyoff"];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->vertical_offset(), target);
  }

  // optional int32 horizontal_spacing = 15 [(.enigma.proto.resource.gmx) = "tilehsep"];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->horizontal_spacing(), target);
  }

  // optional int32 vertical_spacing = 16 [(.enigma.proto.resource.gmx) = "tilevsep"];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->vertical_spacing(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enigma.proto.resource.Background)
  return target;
}

size_t Background::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enigma.proto.resource.Background)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool preload = 4;
    if (has_preload()) {
      total_size += 1 + 1;
    }

    // optional bool transparent = 5;
    if (has_transparent()) {
      total_size += 1 + 1;
    }

    // optional bool smooth_edges = 6;
    if (has_smooth_edges()) {
      total_size += 1 + 1;
    }

    // optional bool use_as_tileset = 7 [(.enigma.proto.resource.gmx) = "istileset"];
    if (has_use_as_tileset()) {
      total_size += 1 + 1;
    }

    // optional int32 tile_width = 11 [(.enigma.proto.resource.gmx) = "tilewidth"];
    if (has_tile_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tile_width());
    }

    // optional int32 tile_height = 12 [(.enigma.proto.resource.gmx) = "tileheight"];
    if (has_tile_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tile_height());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional int32 horizontal_offset = 13 [(.enigma.proto.resource.gmx) = "tilexoff"];
    if (has_horizontal_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horizontal_offset());
    }

    // optional int32 vertical_offset = 14 [(.enigma.proto.resource.gmx) = "tileyoff"];
    if (has_vertical_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertical_offset());
    }

    // optional int32 horizontal_spacing = 15 [(.enigma.proto.resource.gmx) = "tilehsep"];
    if (has_horizontal_spacing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horizontal_spacing());
    }

    // optional int32 vertical_spacing = 16 [(.enigma.proto.resource.gmx) = "tilevsep"];
    if (has_vertical_spacing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertical_spacing());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Background::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:enigma.proto.resource.Background)
  GOOGLE_DCHECK_NE(&from, this);
  const Background* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Background>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:enigma.proto.resource.Background)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:enigma.proto.resource.Background)
    MergeFrom(*source);
  }
}

void Background::MergeFrom(const Background& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enigma.proto.resource.Background)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      preload_ = from.preload_;
    }
    if (cached_has_bits & 0x00000008u) {
      transparent_ = from.transparent_;
    }
    if (cached_has_bits & 0x00000010u) {
      smooth_edges_ = from.smooth_edges_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_as_tileset_ = from.use_as_tileset_;
    }
    if (cached_has_bits & 0x00000040u) {
      tile_width_ = from.tile_width_;
    }
    if (cached_has_bits & 0x00000080u) {
      tile_height_ = from.tile_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      horizontal_offset_ = from.horizontal_offset_;
    }
    if (cached_has_bits & 0x00000200u) {
      vertical_offset_ = from.vertical_offset_;
    }
    if (cached_has_bits & 0x00000400u) {
      horizontal_spacing_ = from.horizontal_spacing_;
    }
    if (cached_has_bits & 0x00000800u) {
      vertical_spacing_ = from.vertical_spacing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Background::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:enigma.proto.resource.Background)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Background::CopyFrom(const Background& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enigma.proto.resource.Background)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Background::IsInitialized() const {
  return true;
}

void Background::Swap(Background* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Background::InternalSwap(Background* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(id_, other->id_);
  swap(preload_, other->preload_);
  swap(transparent_, other->transparent_);
  swap(smooth_edges_, other->smooth_edges_);
  swap(use_as_tileset_, other->use_as_tileset_);
  swap(tile_width_, other->tile_width_);
  swap(tile_height_, other->tile_height_);
  swap(horizontal_offset_, other->horizontal_offset_);
  swap(vertical_offset_, other->vertical_offset_);
  swap(horizontal_spacing_, other->horizontal_spacing_);
  swap(vertical_spacing_, other->vertical_spacing_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Background::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Background

// optional string name = 1;
bool Background::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Background::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Background::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Background::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Background::name() const {
  // @@protoc_insertion_point(field_get:enigma.proto.resource.Background.name)
  return name_.GetNoArena();
}
void Background::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enigma.proto.resource.Background.name)
}
#if LANG_CXX11
void Background::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enigma.proto.resource.Background.name)
}
#endif
void Background::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enigma.proto.resource.Background.name)
}
void Background::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enigma.proto.resource.Background.name)
}
::std::string* Background::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:enigma.proto.resource.Background.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Background::release_name() {
  // @@protoc_insertion_point(field_release:enigma.proto.resource.Background.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Background::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:enigma.proto.resource.Background.name)
}

// optional int32 id = 2;
bool Background::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Background::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Background::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Background::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 Background::id() const {
  // @@protoc_insertion_point(field_get:enigma.proto.resource.Background.id)
  return id_;
}
void Background::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:enigma.proto.resource.Background.id)
}

// optional bool preload = 4;
bool Background::has_preload() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Background::set_has_preload() {
  _has_bits_[0] |= 0x00000004u;
}
void Background::clear_has_preload() {
  _has_bits_[0] &= ~0x00000004u;
}
void Background::clear_preload() {
  preload_ = false;
  clear_has_preload();
}
bool Background::preload() const {
  // @@protoc_insertion_point(field_get:enigma.proto.resource.Background.preload)
  return preload_;
}
void Background::set_preload(bool value) {
  set_has_preload();
  preload_ = value;
  // @@protoc_insertion_point(field_set:enigma.proto.resource.Background.preload)
}

// optional bool transparent = 5;
bool Background::has_transparent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Background::set_has_transparent() {
  _has_bits_[0] |= 0x00000008u;
}
void Background::clear_has_transparent() {
  _has_bits_[0] &= ~0x00000008u;
}
void Background::clear_transparent() {
  transparent_ = false;
  clear_has_transparent();
}
bool Background::transparent() const {
  // @@protoc_insertion_point(field_get:enigma.proto.resource.Background.transparent)
  return transparent_;
}
void Background::set_transparent(bool value) {
  set_has_transparent();
  transparent_ = value;
  // @@protoc_insertion_point(field_set:enigma.proto.resource.Background.transparent)
}

// optional bool smooth_edges = 6;
bool Background::has_smooth_edges() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Background::set_has_smooth_edges() {
  _has_bits_[0] |= 0x00000010u;
}
void Background::clear_has_smooth_edges() {
  _has_bits_[0] &= ~0x00000010u;
}
void Background::clear_smooth_edges() {
  smooth_edges_ = false;
  clear_has_smooth_edges();
}
bool Background::smooth_edges() const {
  // @@protoc_insertion_point(field_get:enigma.proto.resource.Background.smooth_edges)
  return smooth_edges_;
}
void Background::set_smooth_edges(bool value) {
  set_has_smooth_edges();
  smooth_edges_ = value;
  // @@protoc_insertion_point(field_set:enigma.proto.resource.Background.smooth_edges)
}

// optional bool use_as_tileset = 7 [(.enigma.proto.resource.gmx) = "istileset"];
bool Background::has_use_as_tileset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Background::set_has_use_as_tileset() {
  _has_bits_[0] |= 0x00000020u;
}
void Background::clear_has_use_as_tileset() {
  _has_bits_[0] &= ~0x00000020u;
}
void Background::clear_use_as_tileset() {
  use_as_tileset_ = false;
  clear_has_use_as_tileset();
}
bool Background::use_as_tileset() const {
  // @@protoc_insertion_point(field_get:enigma.proto.resource.Background.use_as_tileset)
  return use_as_tileset_;
}
void Background::set_use_as_tileset(bool value) {
  set_has_use_as_tileset();
  use_as_tileset_ = value;
  // @@protoc_insertion_point(field_set:enigma.proto.resource.Background.use_as_tileset)
}

// optional int32 tile_width = 11 [(.enigma.proto.resource.gmx) = "tilewidth"];
bool Background::has_tile_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Background::set_has_tile_width() {
  _has_bits_[0] |= 0x00000040u;
}
void Background::clear_has_tile_width() {
  _has_bits_[0] &= ~0x00000040u;
}
void Background::clear_tile_width() {
  tile_width_ = 0;
  clear_has_tile_width();
}
::google::protobuf::int32 Background::tile_width() const {
  // @@protoc_insertion_point(field_get:enigma.proto.resource.Background.tile_width)
  return tile_width_;
}
void Background::set_tile_width(::google::protobuf::int32 value) {
  set_has_tile_width();
  tile_width_ = value;
  // @@protoc_insertion_point(field_set:enigma.proto.resource.Background.tile_width)
}

// optional int32 tile_height = 12 [(.enigma.proto.resource.gmx) = "tileheight"];
bool Background::has_tile_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Background::set_has_tile_height() {
  _has_bits_[0] |= 0x00000080u;
}
void Background::clear_has_tile_height() {
  _has_bits_[0] &= ~0x00000080u;
}
void Background::clear_tile_height() {
  tile_height_ = 0;
  clear_has_tile_height();
}
::google::protobuf::int32 Background::tile_height() const {
  // @@protoc_insertion_point(field_get:enigma.proto.resource.Background.tile_height)
  return tile_height_;
}
void Background::set_tile_height(::google::protobuf::int32 value) {
  set_has_tile_height();
  tile_height_ = value;
  // @@protoc_insertion_point(field_set:enigma.proto.resource.Background.tile_height)
}

// optional int32 horizontal_offset = 13 [(.enigma.proto.resource.gmx) = "tilexoff"];
bool Background::has_horizontal_offset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Background::set_has_horizontal_offset() {
  _has_bits_[0] |= 0x00000100u;
}
void Background::clear_has_horizontal_offset() {
  _has_bits_[0] &= ~0x00000100u;
}
void Background::clear_horizontal_offset() {
  horizontal_offset_ = 0;
  clear_has_horizontal_offset();
}
::google::protobuf::int32 Background::horizontal_offset() const {
  // @@protoc_insertion_point(field_get:enigma.proto.resource.Background.horizontal_offset)
  return horizontal_offset_;
}
void Background::set_horizontal_offset(::google::protobuf::int32 value) {
  set_has_horizontal_offset();
  horizontal_offset_ = value;
  // @@protoc_insertion_point(field_set:enigma.proto.resource.Background.horizontal_offset)
}

// optional int32 vertical_offset = 14 [(.enigma.proto.resource.gmx) = "tileyoff"];
bool Background::has_vertical_offset() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Background::set_has_vertical_offset() {
  _has_bits_[0] |= 0x00000200u;
}
void Background::clear_has_vertical_offset() {
  _has_bits_[0] &= ~0x00000200u;
}
void Background::clear_vertical_offset() {
  vertical_offset_ = 0;
  clear_has_vertical_offset();
}
::google::protobuf::int32 Background::vertical_offset() const {
  // @@protoc_insertion_point(field_get:enigma.proto.resource.Background.vertical_offset)
  return vertical_offset_;
}
void Background::set_vertical_offset(::google::protobuf::int32 value) {
  set_has_vertical_offset();
  vertical_offset_ = value;
  // @@protoc_insertion_point(field_set:enigma.proto.resource.Background.vertical_offset)
}

// optional int32 horizontal_spacing = 15 [(.enigma.proto.resource.gmx) = "tilehsep"];
bool Background::has_horizontal_spacing() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Background::set_has_horizontal_spacing() {
  _has_bits_[0] |= 0x00000400u;
}
void Background::clear_has_horizontal_spacing() {
  _has_bits_[0] &= ~0x00000400u;
}
void Background::clear_horizontal_spacing() {
  horizontal_spacing_ = 0;
  clear_has_horizontal_spacing();
}
::google::protobuf::int32 Background::horizontal_spacing() const {
  // @@protoc_insertion_point(field_get:enigma.proto.resource.Background.horizontal_spacing)
  return horizontal_spacing_;
}
void Background::set_horizontal_spacing(::google::protobuf::int32 value) {
  set_has_horizontal_spacing();
  horizontal_spacing_ = value;
  // @@protoc_insertion_point(field_set:enigma.proto.resource.Background.horizontal_spacing)
}

// optional int32 vertical_spacing = 16 [(.enigma.proto.resource.gmx) = "tilevsep"];
bool Background::has_vertical_spacing() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Background::set_has_vertical_spacing() {
  _has_bits_[0] |= 0x00000800u;
}
void Background::clear_has_vertical_spacing() {
  _has_bits_[0] &= ~0x00000800u;
}
void Background::clear_vertical_spacing() {
  vertical_spacing_ = 0;
  clear_has_vertical_spacing();
}
::google::protobuf::int32 Background::vertical_spacing() const {
  // @@protoc_insertion_point(field_get:enigma.proto.resource.Background.vertical_spacing)
  return vertical_spacing_;
}
void Background::set_vertical_spacing(::google::protobuf::int32 value) {
  set_has_vertical_spacing();
  vertical_spacing_ = value;
  // @@protoc_insertion_point(field_set:enigma.proto.resource.Background.vertical_spacing)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
const ::std::string gmx_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  gmx(kGmxFieldNumber, gmx_default);

// @@protoc_insertion_point(namespace_scope)

}  // namespace resource
}  // namespace proto
}  // namespace enigma

// @@protoc_insertion_point(global_scope)
