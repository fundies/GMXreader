// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resources/Room.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "resources/Room.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace buffers {
namespace resources {
class Room_MakerSettingsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Room_MakerSettings>
     _instance;
} _Room_MakerSettings_default_instance_;
class Room_RoomBackgroundDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Room_RoomBackground>
     _instance;
} _Room_RoomBackground_default_instance_;
class Room_ViewDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Room_View>
     _instance;
} _Room_View_default_instance_;
class Room_InstanceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Room_Instance>
     _instance;
} _Room_Instance_default_instance_;
class Room_TileDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Room_Tile>
     _instance;
} _Room_Tile_default_instance_;
class RoomDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Room>
     _instance;
} _Room_default_instance_;

namespace protobuf_resources_2fRoom_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_MakerSettings, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_MakerSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_MakerSettings, set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_MakerSettings, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_MakerSettings, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_MakerSettings, show_grid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_MakerSettings, show_objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_MakerSettings, show_tiles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_MakerSettings, show_backgrounds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_MakerSettings, show_foregrounds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_MakerSettings, show_views_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_MakerSettings, delete_underlying_objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_MakerSettings, delete_underlying_tiles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_MakerSettings, page_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_MakerSettings, xoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_MakerSettings, yoffset_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_RoomBackground, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_RoomBackground, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_RoomBackground, visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_RoomBackground, foreground_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_RoomBackground, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_RoomBackground, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_RoomBackground, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_RoomBackground, htiled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_RoomBackground, vtiled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_RoomBackground, hspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_RoomBackground, vspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_RoomBackground, stretch_),
  2,
  3,
  0,
  1,
  6,
  4,
  5,
  8,
  9,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_View, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_View, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_View, visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_View, object_following_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_View, xview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_View, yview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_View, wview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_View, hview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_View, xport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_View, yport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_View, wport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_View, hport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_View, hborder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_View, vborder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_View, hspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_View, vspeed_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  13,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Instance, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Instance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Instance, object_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Instance, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Instance, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Instance, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Instance, locked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Instance, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Instance, xscale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Instance, yscale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Instance, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Instance, rotation_),
  0,
  3,
  4,
  1,
  6,
  2,
  5,
  8,
  7,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Tile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Tile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Tile, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Tile, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Tile, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Tile, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Tile, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Tile, xoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Tile, yoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Tile, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Tile, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Tile, depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Tile, locked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Tile, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Tile, xscale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room_Tile, yscale_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  1,
  9,
  10,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, caption_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, vsnap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, hsnap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, isometric_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, persistent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, show_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, enable_views_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, clear_view_background_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, clear_display_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, maker_settings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, backgrounds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, views_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, instances_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, tiles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, use_physics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, phy_world_top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, phy_world_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, phy_world_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, phy_world_bottom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, phy_world_xgravity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, phy_world_ygravity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, phy_world_pixel_meters_),
  0,
  3,
  4,
  5,
  6,
  8,
  21,
  9,
  7,
  10,
  1,
  11,
  12,
  13,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  14,
  15,
  16,
  17,
  20,
  18,
  19,
  22,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(Room_MakerSettings)},
  { 33, 48, sizeof(Room_RoomBackground)},
  { 58, 77, sizeof(Room_View)},
  { 91, 106, sizeof(Room_Instance)},
  { 116, 135, sizeof(Room_Tile)},
  { 149, 181, sizeof(Room)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Room_MakerSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Room_RoomBackground_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Room_View_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Room_Instance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Room_Tile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Room_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "resources/Room.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::buffers::protobuf_options_2eproto::InitDefaults();
  _Room_MakerSettings_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Room_MakerSettings_default_instance_);_Room_RoomBackground_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Room_RoomBackground_default_instance_);_Room_View_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Room_View_default_instance_);_Room_Instance_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Room_Instance_default_instance_);_Room_Tile_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Room_Tile_default_instance_);_Room_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Room_default_instance_);_Room_default_instance_._instance.get_mutable()->maker_settings_ = const_cast< ::buffers::resources::Room_MakerSettings*>(
      ::buffers::resources::Room_MakerSettings::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024resources/Room.proto\022\021buffers.resource"
      "s\032\roptions.proto\"\254\023\n\004Room\022\017\n\007caption\030\001 \001"
      "(\t\022\r\n\005width\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\022\r\n\005vsn"
      "ap\030\004 \001(\r\022\r\n\005hsnap\030\005 \001(\r\022\021\n\tisometric\030\006 \001"
      "(\010\022\r\n\005speed\030\033 \001(\r\022\022\n\npersistent\030\007 \001(\010\022\031\n"
      "\005color\030\010 \001(\005B\n\202\265\030\006colour\022\"\n\nshow_color\030\t"
      " \001(\010B\016\202\265\030\nshowcolour\022\014\n\004code\030\n \001(\t\022%\n\014en"
      "able_views\030\013 \001(\010B\017\202\265\030\013enableViews\0226\n\025cle"
      "ar_view_background\030\014 \001(\010B\027\202\265\030\023clearViewB"
      "ackground\0224\n\024clear_display_buffer\030\r \001(\010B"
      "\026\202\265\030\022clearDisplayBuffer\022P\n\016maker_setting"
      "s\030\016 \001(\0132%.buffers.resources.Room.MakerSe"
      "ttingsB\021\202\265\030\rmakerSettings\022;\n\013backgrounds"
      "\030\017 \003(\0132&.buffers.resources.Room.RoomBack"
      "ground\022+\n\005views\030\020 \003(\0132\034.buffers.resource"
      "s.Room.View\0223\n\tinstances\030\021 \003(\0132 .buffers"
      ".resources.Room.Instance\022+\n\005tiles\030\022 \003(\0132"
      "\034.buffers.resources.Room.Tile\022%\n\013use_phy"
      "sics\030\023 \001(\010B\020\202\265\030\014PhysicsWorld\022*\n\rphy_worl"
      "d_top\030\024 \001(\005B\023\202\265\030\017PhysicsWorldTop\022,\n\016phy_"
      "world_left\030\025 \001(\005B\024\202\265\030\020PhysicsWorldLeft\022."
      "\n\017phy_world_right\030\026 \001(\005B\025\202\265\030\021PhysicsWorl"
      "dRight\0220\n\020phy_world_bottom\030\027 \001(\005B\026\202\265\030\022Ph"
      "ysicsWorldBottom\0224\n\022phy_world_xgravity\030\030"
      " \001(\001B\030\202\265\030\024PhysicsWorldGravityX\0224\n\022phy_wo"
      "rld_ygravity\030\031 \001(\001B\030\202\265\030\024PhysicsWorldGrav"
      "ityY\022;\n\026phy_world_pixel_meters\030\032 \001(\001B\033\202\265"
      "\030\027PhysicsWorldPixToMeters\032\350\003\n\rMakerSetti"
      "ngs\022\026\n\003set\030\001 \001(\010B\t\202\265\030\005isSet\022\024\n\005width\030\002 \001"
      "(\010B\005\202\265\030\001w\022\025\n\006height\030\003 \001(\010B\005\202\265\030\001h\022\037\n\tshow"
      "_grid\030\004 \001(\010B\014\202\265\030\010showGrid\022%\n\014show_object"
      "s\030\005 \001(\010B\017\202\265\030\013showObjects\022!\n\nshow_tiles\030\006"
      " \001(\010B\r\202\265\030\tshowTiles\022-\n\020show_backgrounds\030"
      "\007 \001(\010B\023\202\265\030\017showBackgrounds\022-\n\020show_foreg"
      "rounds\030\010 \001(\010B\023\202\265\030\017showForegrounds\022!\n\nsho"
      "w_views\030\t \001(\010B\r\202\265\030\tshowViews\022:\n\031delete_u"
      "nderlying_objects\030\n \001(\010B\027\202\265\030\023deleteUnder"
      "lyingObj\022:\n\027delete_underlying_tiles\030\013 \001("
      "\010B\031\202\265\030\025deleteUnderlyingTiles\022\014\n\004page\030\014 \001"
      "(\r\022\017\n\007xoffset\030\r \001(\005\022\017\n\007yoffset\030\016 \001(\005\032\252\001\n"
      "\016RoomBackground\022\017\n\007visible\030\001 \001(\010\022\022\n\nfore"
      "ground\030\002 \001(\010\022\014\n\004name\030\003 \001(\t\022\t\n\001x\030\004 \001(\005\022\t\n"
      "\001y\030\005 \001(\005\022\016\n\006htiled\030\006 \001(\010\022\016\n\006vtiled\030\007 \001(\010"
      "\022\016\n\006hspeed\030\010 \001(\001\022\016\n\006vspeed\030\t \001(\001\022\017\n\007stre"
      "tch\030\n \001(\010\032\370\001\n\004View\022\017\n\007visible\030\001 \001(\010\022%\n\020o"
      "bject_following\030\002 \001(\tB\013\202\265\030\007objName\022\r\n\005xv"
      "iew\030\003 \001(\005\022\r\n\005yview\030\004 \001(\005\022\r\n\005wview\030\005 \001(\r\022"
      "\r\n\005hview\030\006 \001(\r\022\r\n\005xport\030\007 \001(\005\022\r\n\005yport\030\010"
      " \001(\005\022\r\n\005wport\030\t \001(\r\022\r\n\005hport\030\n \001(\r\022\017\n\007hb"
      "order\030\013 \001(\005\022\017\n\007vborder\030\014 \001(\005\022\016\n\006hspeed\030\r"
      " \001(\001\022\016\n\006vspeed\030\016 \001(\001\032\333\001\n\010Instance\022 \n\013obj"
      "ect_type\030\001 \001(\tB\013\202\265\030\007objName\022\t\n\001x\030\002 \001(\005\022\t"
      "\n\001y\030\003 \001(\005\022\024\n\002id\030\004 \001(\tB\010\202\265\030\004name\022\016\n\006locke"
      "d\030\005 \001(\010\022\014\n\004code\030\006 \001(\t\022\032\n\006xscale\030\007 \001(\001B\n\202"
      "\265\030\006scaleX\022\032\n\006yscale\030\010 \001(\001B\n\202\265\030\006scaleY\022\031\n"
      "\005color\030\t \001(\005B\n\202\265\030\006colour\022\020\n\010rotation\030\n \001"
      "(\001\032\242\002\n\004Tile\022\031\n\005image\030\001 \001(\tB\n\202\265\030\006bgName\022\t"
      "\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\024\n\005width\030\004 \001(\rB\005\202\265\030"
      "\001w\022\025\n\006height\030\005 \001(\rB\005\202\265\030\001h\022\027\n\007xoffset\030\006 \001"
      "(\005B\006\202\265\030\002xo\022\027\n\007yoffset\030\007 \001(\005B\006\202\265\030\002yo\022\n\n\002i"
      "d\030\010 \001(\005\022\014\n\004name\030\t \001(\t\022\r\n\005depth\030\n \001(\005\022\016\n\006"
      "locked\030\013 \001(\010\022\031\n\005color\030\014 \001(\005B\n\202\265\030\006colour\022"
      "\032\n\006xscale\030\r \001(\001B\n\202\265\030\006scaleX\022\032\n\006yscale\030\016 "
      "\001(\001B\n\202\265\030\006scaleY"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2535);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "resources/Room.proto", &protobuf_RegisterTypes);
  ::buffers::protobuf_options_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_resources_2fRoom_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Room_MakerSettings::kSetFieldNumber;
const int Room_MakerSettings::kWidthFieldNumber;
const int Room_MakerSettings::kHeightFieldNumber;
const int Room_MakerSettings::kShowGridFieldNumber;
const int Room_MakerSettings::kShowObjectsFieldNumber;
const int Room_MakerSettings::kShowTilesFieldNumber;
const int Room_MakerSettings::kShowBackgroundsFieldNumber;
const int Room_MakerSettings::kShowForegroundsFieldNumber;
const int Room_MakerSettings::kShowViewsFieldNumber;
const int Room_MakerSettings::kDeleteUnderlyingObjectsFieldNumber;
const int Room_MakerSettings::kDeleteUnderlyingTilesFieldNumber;
const int Room_MakerSettings::kPageFieldNumber;
const int Room_MakerSettings::kXoffsetFieldNumber;
const int Room_MakerSettings::kYoffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Room_MakerSettings::Room_MakerSettings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_resources_2fRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Room.MakerSettings)
}
Room_MakerSettings::Room_MakerSettings(const Room_MakerSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&set_, &from.set_,
    static_cast<size_t>(reinterpret_cast<char*>(&yoffset_) -
    reinterpret_cast<char*>(&set_)) + sizeof(yoffset_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Room.MakerSettings)
}

void Room_MakerSettings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&set_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yoffset_) -
      reinterpret_cast<char*>(&set_)) + sizeof(yoffset_));
}

Room_MakerSettings::~Room_MakerSettings() {
  // @@protoc_insertion_point(destructor:buffers.resources.Room.MakerSettings)
  SharedDtor();
}

void Room_MakerSettings::SharedDtor() {
}

void Room_MakerSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_MakerSettings::descriptor() {
  protobuf_resources_2fRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Room_MakerSettings& Room_MakerSettings::default_instance() {
  protobuf_resources_2fRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

Room_MakerSettings* Room_MakerSettings::New(::google::protobuf::Arena* arena) const {
  Room_MakerSettings* n = new Room_MakerSettings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Room_MakerSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Room.MakerSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&set_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_foregrounds_) -
        reinterpret_cast<char*>(&set_)) + sizeof(show_foregrounds_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&show_views_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yoffset_) -
        reinterpret_cast<char*>(&show_views_)) + sizeof(yoffset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Room_MakerSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Room.MakerSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool set = 1 [(.buffers.gmx) = "isSet"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_set();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool width = 2 [(.buffers.gmx) = "w"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool height = 3 [(.buffers.gmx) = "h"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_grid = 4 [(.buffers.gmx) = "showGrid"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_show_grid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_grid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_objects = 5 [(.buffers.gmx) = "showObjects"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_show_objects();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_objects_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_tiles = 6 [(.buffers.gmx) = "showTiles"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_show_tiles();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_tiles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_backgrounds = 7 [(.buffers.gmx) = "showBackgrounds"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_show_backgrounds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_backgrounds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_foregrounds = 8 [(.buffers.gmx) = "showForegrounds"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_show_foregrounds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_foregrounds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_views = 9 [(.buffers.gmx) = "showViews"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_show_views();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool delete_underlying_objects = 10 [(.buffers.gmx) = "deleteUnderlyingObj"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_delete_underlying_objects();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delete_underlying_objects_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool delete_underlying_tiles = 11 [(.buffers.gmx) = "deleteUnderlyingTiles"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_delete_underlying_tiles();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delete_underlying_tiles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 page = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_page();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 xoffset = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_xoffset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 yoffset = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_yoffset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Room.MakerSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Room.MakerSettings)
  return false;
#undef DO_
}

void Room_MakerSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Room.MakerSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool set = 1 [(.buffers.gmx) = "isSet"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->set(), output);
  }

  // optional bool width = 2 [(.buffers.gmx) = "w"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->width(), output);
  }

  // optional bool height = 3 [(.buffers.gmx) = "h"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->height(), output);
  }

  // optional bool show_grid = 4 [(.buffers.gmx) = "showGrid"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->show_grid(), output);
  }

  // optional bool show_objects = 5 [(.buffers.gmx) = "showObjects"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->show_objects(), output);
  }

  // optional bool show_tiles = 6 [(.buffers.gmx) = "showTiles"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->show_tiles(), output);
  }

  // optional bool show_backgrounds = 7 [(.buffers.gmx) = "showBackgrounds"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->show_backgrounds(), output);
  }

  // optional bool show_foregrounds = 8 [(.buffers.gmx) = "showForegrounds"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->show_foregrounds(), output);
  }

  // optional bool show_views = 9 [(.buffers.gmx) = "showViews"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->show_views(), output);
  }

  // optional bool delete_underlying_objects = 10 [(.buffers.gmx) = "deleteUnderlyingObj"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->delete_underlying_objects(), output);
  }

  // optional bool delete_underlying_tiles = 11 [(.buffers.gmx) = "deleteUnderlyingTiles"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->delete_underlying_tiles(), output);
  }

  // optional uint32 page = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->page(), output);
  }

  // optional int32 xoffset = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->xoffset(), output);
  }

  // optional int32 yoffset = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->yoffset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Room.MakerSettings)
}

::google::protobuf::uint8* Room_MakerSettings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Room.MakerSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool set = 1 [(.buffers.gmx) = "isSet"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->set(), target);
  }

  // optional bool width = 2 [(.buffers.gmx) = "w"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->width(), target);
  }

  // optional bool height = 3 [(.buffers.gmx) = "h"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->height(), target);
  }

  // optional bool show_grid = 4 [(.buffers.gmx) = "showGrid"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->show_grid(), target);
  }

  // optional bool show_objects = 5 [(.buffers.gmx) = "showObjects"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->show_objects(), target);
  }

  // optional bool show_tiles = 6 [(.buffers.gmx) = "showTiles"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->show_tiles(), target);
  }

  // optional bool show_backgrounds = 7 [(.buffers.gmx) = "showBackgrounds"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->show_backgrounds(), target);
  }

  // optional bool show_foregrounds = 8 [(.buffers.gmx) = "showForegrounds"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->show_foregrounds(), target);
  }

  // optional bool show_views = 9 [(.buffers.gmx) = "showViews"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->show_views(), target);
  }

  // optional bool delete_underlying_objects = 10 [(.buffers.gmx) = "deleteUnderlyingObj"];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->delete_underlying_objects(), target);
  }

  // optional bool delete_underlying_tiles = 11 [(.buffers.gmx) = "deleteUnderlyingTiles"];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->delete_underlying_tiles(), target);
  }

  // optional uint32 page = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->page(), target);
  }

  // optional int32 xoffset = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->xoffset(), target);
  }

  // optional int32 yoffset = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->yoffset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Room.MakerSettings)
  return target;
}

size_t Room_MakerSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Room.MakerSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool set = 1 [(.buffers.gmx) = "isSet"];
    if (has_set()) {
      total_size += 1 + 1;
    }

    // optional bool width = 2 [(.buffers.gmx) = "w"];
    if (has_width()) {
      total_size += 1 + 1;
    }

    // optional bool height = 3 [(.buffers.gmx) = "h"];
    if (has_height()) {
      total_size += 1 + 1;
    }

    // optional bool show_grid = 4 [(.buffers.gmx) = "showGrid"];
    if (has_show_grid()) {
      total_size += 1 + 1;
    }

    // optional bool show_objects = 5 [(.buffers.gmx) = "showObjects"];
    if (has_show_objects()) {
      total_size += 1 + 1;
    }

    // optional bool show_tiles = 6 [(.buffers.gmx) = "showTiles"];
    if (has_show_tiles()) {
      total_size += 1 + 1;
    }

    // optional bool show_backgrounds = 7 [(.buffers.gmx) = "showBackgrounds"];
    if (has_show_backgrounds()) {
      total_size += 1 + 1;
    }

    // optional bool show_foregrounds = 8 [(.buffers.gmx) = "showForegrounds"];
    if (has_show_foregrounds()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional bool show_views = 9 [(.buffers.gmx) = "showViews"];
    if (has_show_views()) {
      total_size += 1 + 1;
    }

    // optional bool delete_underlying_objects = 10 [(.buffers.gmx) = "deleteUnderlyingObj"];
    if (has_delete_underlying_objects()) {
      total_size += 1 + 1;
    }

    // optional bool delete_underlying_tiles = 11 [(.buffers.gmx) = "deleteUnderlyingTiles"];
    if (has_delete_underlying_tiles()) {
      total_size += 1 + 1;
    }

    // optional uint32 page = 12;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

    // optional int32 xoffset = 13;
    if (has_xoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xoffset());
    }

    // optional int32 yoffset = 14;
    if (has_yoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yoffset());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_MakerSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Room.MakerSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const Room_MakerSettings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Room_MakerSettings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Room.MakerSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Room.MakerSettings)
    MergeFrom(*source);
  }
}

void Room_MakerSettings::MergeFrom(const Room_MakerSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Room.MakerSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_ = from.set_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      show_grid_ = from.show_grid_;
    }
    if (cached_has_bits & 0x00000010u) {
      show_objects_ = from.show_objects_;
    }
    if (cached_has_bits & 0x00000020u) {
      show_tiles_ = from.show_tiles_;
    }
    if (cached_has_bits & 0x00000040u) {
      show_backgrounds_ = from.show_backgrounds_;
    }
    if (cached_has_bits & 0x00000080u) {
      show_foregrounds_ = from.show_foregrounds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      show_views_ = from.show_views_;
    }
    if (cached_has_bits & 0x00000200u) {
      delete_underlying_objects_ = from.delete_underlying_objects_;
    }
    if (cached_has_bits & 0x00000400u) {
      delete_underlying_tiles_ = from.delete_underlying_tiles_;
    }
    if (cached_has_bits & 0x00000800u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00001000u) {
      xoffset_ = from.xoffset_;
    }
    if (cached_has_bits & 0x00002000u) {
      yoffset_ = from.yoffset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Room_MakerSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Room.MakerSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_MakerSettings::CopyFrom(const Room_MakerSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Room.MakerSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_MakerSettings::IsInitialized() const {
  return true;
}

void Room_MakerSettings::Swap(Room_MakerSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Room_MakerSettings::InternalSwap(Room_MakerSettings* other) {
  using std::swap;
  swap(set_, other->set_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(show_grid_, other->show_grid_);
  swap(show_objects_, other->show_objects_);
  swap(show_tiles_, other->show_tiles_);
  swap(show_backgrounds_, other->show_backgrounds_);
  swap(show_foregrounds_, other->show_foregrounds_);
  swap(show_views_, other->show_views_);
  swap(delete_underlying_objects_, other->delete_underlying_objects_);
  swap(delete_underlying_tiles_, other->delete_underlying_tiles_);
  swap(page_, other->page_);
  swap(xoffset_, other->xoffset_);
  swap(yoffset_, other->yoffset_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Room_MakerSettings::GetMetadata() const {
  protobuf_resources_2fRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Room_MakerSettings

// optional bool set = 1 [(.buffers.gmx) = "isSet"];
bool Room_MakerSettings::has_set() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Room_MakerSettings::set_has_set() {
  _has_bits_[0] |= 0x00000001u;
}
void Room_MakerSettings::clear_has_set() {
  _has_bits_[0] &= ~0x00000001u;
}
void Room_MakerSettings::clear_set() {
  set_ = false;
  clear_has_set();
}
bool Room_MakerSettings::set() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.set)
  return set_;
}
void Room_MakerSettings::set_set(bool value) {
  set_has_set();
  set_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.set)
}

// optional bool width = 2 [(.buffers.gmx) = "w"];
bool Room_MakerSettings::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Room_MakerSettings::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
void Room_MakerSettings::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void Room_MakerSettings::clear_width() {
  width_ = false;
  clear_has_width();
}
bool Room_MakerSettings::width() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.width)
  return width_;
}
void Room_MakerSettings::set_width(bool value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.width)
}

// optional bool height = 3 [(.buffers.gmx) = "h"];
bool Room_MakerSettings::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Room_MakerSettings::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void Room_MakerSettings::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void Room_MakerSettings::clear_height() {
  height_ = false;
  clear_has_height();
}
bool Room_MakerSettings::height() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.height)
  return height_;
}
void Room_MakerSettings::set_height(bool value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.height)
}

// optional bool show_grid = 4 [(.buffers.gmx) = "showGrid"];
bool Room_MakerSettings::has_show_grid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Room_MakerSettings::set_has_show_grid() {
  _has_bits_[0] |= 0x00000008u;
}
void Room_MakerSettings::clear_has_show_grid() {
  _has_bits_[0] &= ~0x00000008u;
}
void Room_MakerSettings::clear_show_grid() {
  show_grid_ = false;
  clear_has_show_grid();
}
bool Room_MakerSettings::show_grid() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.show_grid)
  return show_grid_;
}
void Room_MakerSettings::set_show_grid(bool value) {
  set_has_show_grid();
  show_grid_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.show_grid)
}

// optional bool show_objects = 5 [(.buffers.gmx) = "showObjects"];
bool Room_MakerSettings::has_show_objects() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Room_MakerSettings::set_has_show_objects() {
  _has_bits_[0] |= 0x00000010u;
}
void Room_MakerSettings::clear_has_show_objects() {
  _has_bits_[0] &= ~0x00000010u;
}
void Room_MakerSettings::clear_show_objects() {
  show_objects_ = false;
  clear_has_show_objects();
}
bool Room_MakerSettings::show_objects() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.show_objects)
  return show_objects_;
}
void Room_MakerSettings::set_show_objects(bool value) {
  set_has_show_objects();
  show_objects_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.show_objects)
}

// optional bool show_tiles = 6 [(.buffers.gmx) = "showTiles"];
bool Room_MakerSettings::has_show_tiles() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Room_MakerSettings::set_has_show_tiles() {
  _has_bits_[0] |= 0x00000020u;
}
void Room_MakerSettings::clear_has_show_tiles() {
  _has_bits_[0] &= ~0x00000020u;
}
void Room_MakerSettings::clear_show_tiles() {
  show_tiles_ = false;
  clear_has_show_tiles();
}
bool Room_MakerSettings::show_tiles() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.show_tiles)
  return show_tiles_;
}
void Room_MakerSettings::set_show_tiles(bool value) {
  set_has_show_tiles();
  show_tiles_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.show_tiles)
}

// optional bool show_backgrounds = 7 [(.buffers.gmx) = "showBackgrounds"];
bool Room_MakerSettings::has_show_backgrounds() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Room_MakerSettings::set_has_show_backgrounds() {
  _has_bits_[0] |= 0x00000040u;
}
void Room_MakerSettings::clear_has_show_backgrounds() {
  _has_bits_[0] &= ~0x00000040u;
}
void Room_MakerSettings::clear_show_backgrounds() {
  show_backgrounds_ = false;
  clear_has_show_backgrounds();
}
bool Room_MakerSettings::show_backgrounds() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.show_backgrounds)
  return show_backgrounds_;
}
void Room_MakerSettings::set_show_backgrounds(bool value) {
  set_has_show_backgrounds();
  show_backgrounds_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.show_backgrounds)
}

// optional bool show_foregrounds = 8 [(.buffers.gmx) = "showForegrounds"];
bool Room_MakerSettings::has_show_foregrounds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Room_MakerSettings::set_has_show_foregrounds() {
  _has_bits_[0] |= 0x00000080u;
}
void Room_MakerSettings::clear_has_show_foregrounds() {
  _has_bits_[0] &= ~0x00000080u;
}
void Room_MakerSettings::clear_show_foregrounds() {
  show_foregrounds_ = false;
  clear_has_show_foregrounds();
}
bool Room_MakerSettings::show_foregrounds() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.show_foregrounds)
  return show_foregrounds_;
}
void Room_MakerSettings::set_show_foregrounds(bool value) {
  set_has_show_foregrounds();
  show_foregrounds_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.show_foregrounds)
}

// optional bool show_views = 9 [(.buffers.gmx) = "showViews"];
bool Room_MakerSettings::has_show_views() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Room_MakerSettings::set_has_show_views() {
  _has_bits_[0] |= 0x00000100u;
}
void Room_MakerSettings::clear_has_show_views() {
  _has_bits_[0] &= ~0x00000100u;
}
void Room_MakerSettings::clear_show_views() {
  show_views_ = false;
  clear_has_show_views();
}
bool Room_MakerSettings::show_views() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.show_views)
  return show_views_;
}
void Room_MakerSettings::set_show_views(bool value) {
  set_has_show_views();
  show_views_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.show_views)
}

// optional bool delete_underlying_objects = 10 [(.buffers.gmx) = "deleteUnderlyingObj"];
bool Room_MakerSettings::has_delete_underlying_objects() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Room_MakerSettings::set_has_delete_underlying_objects() {
  _has_bits_[0] |= 0x00000200u;
}
void Room_MakerSettings::clear_has_delete_underlying_objects() {
  _has_bits_[0] &= ~0x00000200u;
}
void Room_MakerSettings::clear_delete_underlying_objects() {
  delete_underlying_objects_ = false;
  clear_has_delete_underlying_objects();
}
bool Room_MakerSettings::delete_underlying_objects() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.delete_underlying_objects)
  return delete_underlying_objects_;
}
void Room_MakerSettings::set_delete_underlying_objects(bool value) {
  set_has_delete_underlying_objects();
  delete_underlying_objects_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.delete_underlying_objects)
}

// optional bool delete_underlying_tiles = 11 [(.buffers.gmx) = "deleteUnderlyingTiles"];
bool Room_MakerSettings::has_delete_underlying_tiles() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Room_MakerSettings::set_has_delete_underlying_tiles() {
  _has_bits_[0] |= 0x00000400u;
}
void Room_MakerSettings::clear_has_delete_underlying_tiles() {
  _has_bits_[0] &= ~0x00000400u;
}
void Room_MakerSettings::clear_delete_underlying_tiles() {
  delete_underlying_tiles_ = false;
  clear_has_delete_underlying_tiles();
}
bool Room_MakerSettings::delete_underlying_tiles() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.delete_underlying_tiles)
  return delete_underlying_tiles_;
}
void Room_MakerSettings::set_delete_underlying_tiles(bool value) {
  set_has_delete_underlying_tiles();
  delete_underlying_tiles_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.delete_underlying_tiles)
}

// optional uint32 page = 12;
bool Room_MakerSettings::has_page() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Room_MakerSettings::set_has_page() {
  _has_bits_[0] |= 0x00000800u;
}
void Room_MakerSettings::clear_has_page() {
  _has_bits_[0] &= ~0x00000800u;
}
void Room_MakerSettings::clear_page() {
  page_ = 0u;
  clear_has_page();
}
::google::protobuf::uint32 Room_MakerSettings::page() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.page)
  return page_;
}
void Room_MakerSettings::set_page(::google::protobuf::uint32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.page)
}

// optional int32 xoffset = 13;
bool Room_MakerSettings::has_xoffset() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Room_MakerSettings::set_has_xoffset() {
  _has_bits_[0] |= 0x00001000u;
}
void Room_MakerSettings::clear_has_xoffset() {
  _has_bits_[0] &= ~0x00001000u;
}
void Room_MakerSettings::clear_xoffset() {
  xoffset_ = 0;
  clear_has_xoffset();
}
::google::protobuf::int32 Room_MakerSettings::xoffset() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.xoffset)
  return xoffset_;
}
void Room_MakerSettings::set_xoffset(::google::protobuf::int32 value) {
  set_has_xoffset();
  xoffset_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.xoffset)
}

// optional int32 yoffset = 14;
bool Room_MakerSettings::has_yoffset() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Room_MakerSettings::set_has_yoffset() {
  _has_bits_[0] |= 0x00002000u;
}
void Room_MakerSettings::clear_has_yoffset() {
  _has_bits_[0] &= ~0x00002000u;
}
void Room_MakerSettings::clear_yoffset() {
  yoffset_ = 0;
  clear_has_yoffset();
}
::google::protobuf::int32 Room_MakerSettings::yoffset() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.yoffset)
  return yoffset_;
}
void Room_MakerSettings::set_yoffset(::google::protobuf::int32 value) {
  set_has_yoffset();
  yoffset_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.yoffset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Room_RoomBackground::kVisibleFieldNumber;
const int Room_RoomBackground::kForegroundFieldNumber;
const int Room_RoomBackground::kNameFieldNumber;
const int Room_RoomBackground::kXFieldNumber;
const int Room_RoomBackground::kYFieldNumber;
const int Room_RoomBackground::kHtiledFieldNumber;
const int Room_RoomBackground::kVtiledFieldNumber;
const int Room_RoomBackground::kHspeedFieldNumber;
const int Room_RoomBackground::kVspeedFieldNumber;
const int Room_RoomBackground::kStretchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Room_RoomBackground::Room_RoomBackground()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_resources_2fRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Room.RoomBackground)
}
Room_RoomBackground::Room_RoomBackground(const Room_RoomBackground& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&vspeed_) -
    reinterpret_cast<char*>(&x_)) + sizeof(vspeed_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Room.RoomBackground)
}

void Room_RoomBackground::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vspeed_) -
      reinterpret_cast<char*>(&x_)) + sizeof(vspeed_));
}

Room_RoomBackground::~Room_RoomBackground() {
  // @@protoc_insertion_point(destructor:buffers.resources.Room.RoomBackground)
  SharedDtor();
}

void Room_RoomBackground::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Room_RoomBackground::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_RoomBackground::descriptor() {
  protobuf_resources_2fRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Room_RoomBackground& Room_RoomBackground::default_instance() {
  protobuf_resources_2fRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

Room_RoomBackground* Room_RoomBackground::New(::google::protobuf::Arena* arena) const {
  Room_RoomBackground* n = new Room_RoomBackground;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Room_RoomBackground::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Room.RoomBackground)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stretch_) -
        reinterpret_cast<char*>(&x_)) + sizeof(stretch_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&hspeed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vspeed_) -
        reinterpret_cast<char*>(&hspeed_)) + sizeof(vspeed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Room_RoomBackground::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Room.RoomBackground)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool visible = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_visible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool foreground = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_foreground();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foreground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Room.RoomBackground.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool htiled = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_htiled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &htiled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool vtiled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_vtiled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vtiled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double hspeed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_hspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vspeed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_vspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stretch = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_stretch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stretch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Room.RoomBackground)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Room.RoomBackground)
  return false;
#undef DO_
}

void Room_RoomBackground::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Room.RoomBackground)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool visible = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->visible(), output);
  }

  // optional bool foreground = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->foreground(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.RoomBackground.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int32 x = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->x(), output);
  }

  // optional int32 y = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->y(), output);
  }

  // optional bool htiled = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->htiled(), output);
  }

  // optional bool vtiled = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->vtiled(), output);
  }

  // optional double hspeed = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->hspeed(), output);
  }

  // optional double vspeed = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->vspeed(), output);
  }

  // optional bool stretch = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->stretch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Room.RoomBackground)
}

::google::protobuf::uint8* Room_RoomBackground::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Room.RoomBackground)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool visible = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->visible(), target);
  }

  // optional bool foreground = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->foreground(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.RoomBackground.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 x = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->x(), target);
  }

  // optional int32 y = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->y(), target);
  }

  // optional bool htiled = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->htiled(), target);
  }

  // optional bool vtiled = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->vtiled(), target);
  }

  // optional double hspeed = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->hspeed(), target);
  }

  // optional double vspeed = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->vspeed(), target);
  }

  // optional bool stretch = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->stretch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Room.RoomBackground)
  return target;
}

size_t Room_RoomBackground::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Room.RoomBackground)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 x = 4;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional bool visible = 1;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional bool foreground = 2;
    if (has_foreground()) {
      total_size += 1 + 1;
    }

    // optional bool htiled = 6;
    if (has_htiled()) {
      total_size += 1 + 1;
    }

    // optional bool vtiled = 7;
    if (has_vtiled()) {
      total_size += 1 + 1;
    }

    // optional int32 y = 5;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional bool stretch = 10;
    if (has_stretch()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional double hspeed = 8;
    if (has_hspeed()) {
      total_size += 1 + 8;
    }

    // optional double vspeed = 9;
    if (has_vspeed()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_RoomBackground::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Room.RoomBackground)
  GOOGLE_DCHECK_NE(&from, this);
  const Room_RoomBackground* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Room_RoomBackground>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Room.RoomBackground)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Room.RoomBackground)
    MergeFrom(*source);
  }
}

void Room_RoomBackground::MergeFrom(const Room_RoomBackground& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Room.RoomBackground)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      visible_ = from.visible_;
    }
    if (cached_has_bits & 0x00000008u) {
      foreground_ = from.foreground_;
    }
    if (cached_has_bits & 0x00000010u) {
      htiled_ = from.htiled_;
    }
    if (cached_has_bits & 0x00000020u) {
      vtiled_ = from.vtiled_;
    }
    if (cached_has_bits & 0x00000040u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000080u) {
      stretch_ = from.stretch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      hspeed_ = from.hspeed_;
    }
    if (cached_has_bits & 0x00000200u) {
      vspeed_ = from.vspeed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Room_RoomBackground::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Room.RoomBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_RoomBackground::CopyFrom(const Room_RoomBackground& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Room.RoomBackground)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_RoomBackground::IsInitialized() const {
  return true;
}

void Room_RoomBackground::Swap(Room_RoomBackground* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Room_RoomBackground::InternalSwap(Room_RoomBackground* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(x_, other->x_);
  swap(visible_, other->visible_);
  swap(foreground_, other->foreground_);
  swap(htiled_, other->htiled_);
  swap(vtiled_, other->vtiled_);
  swap(y_, other->y_);
  swap(stretch_, other->stretch_);
  swap(hspeed_, other->hspeed_);
  swap(vspeed_, other->vspeed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Room_RoomBackground::GetMetadata() const {
  protobuf_resources_2fRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Room_RoomBackground

// optional bool visible = 1;
bool Room_RoomBackground::has_visible() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Room_RoomBackground::set_has_visible() {
  _has_bits_[0] |= 0x00000004u;
}
void Room_RoomBackground::clear_has_visible() {
  _has_bits_[0] &= ~0x00000004u;
}
void Room_RoomBackground::clear_visible() {
  visible_ = false;
  clear_has_visible();
}
bool Room_RoomBackground::visible() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.visible)
  return visible_;
}
void Room_RoomBackground::set_visible(bool value) {
  set_has_visible();
  visible_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.visible)
}

// optional bool foreground = 2;
bool Room_RoomBackground::has_foreground() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Room_RoomBackground::set_has_foreground() {
  _has_bits_[0] |= 0x00000008u;
}
void Room_RoomBackground::clear_has_foreground() {
  _has_bits_[0] &= ~0x00000008u;
}
void Room_RoomBackground::clear_foreground() {
  foreground_ = false;
  clear_has_foreground();
}
bool Room_RoomBackground::foreground() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.foreground)
  return foreground_;
}
void Room_RoomBackground::set_foreground(bool value) {
  set_has_foreground();
  foreground_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.foreground)
}

// optional string name = 3;
bool Room_RoomBackground::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Room_RoomBackground::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Room_RoomBackground::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Room_RoomBackground::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Room_RoomBackground::name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.name)
  return name_.GetNoArena();
}
void Room_RoomBackground::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.name)
}
#if LANG_CXX11
void Room_RoomBackground::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.RoomBackground.name)
}
#endif
void Room_RoomBackground::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.RoomBackground.name)
}
void Room_RoomBackground::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.RoomBackground.name)
}
::std::string* Room_RoomBackground::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.RoomBackground.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Room_RoomBackground::release_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.RoomBackground.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Room_RoomBackground::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.RoomBackground.name)
}

// optional int32 x = 4;
bool Room_RoomBackground::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Room_RoomBackground::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void Room_RoomBackground::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void Room_RoomBackground::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 Room_RoomBackground::x() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.x)
  return x_;
}
void Room_RoomBackground::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.x)
}

// optional int32 y = 5;
bool Room_RoomBackground::has_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Room_RoomBackground::set_has_y() {
  _has_bits_[0] |= 0x00000040u;
}
void Room_RoomBackground::clear_has_y() {
  _has_bits_[0] &= ~0x00000040u;
}
void Room_RoomBackground::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 Room_RoomBackground::y() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.y)
  return y_;
}
void Room_RoomBackground::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.y)
}

// optional bool htiled = 6;
bool Room_RoomBackground::has_htiled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Room_RoomBackground::set_has_htiled() {
  _has_bits_[0] |= 0x00000010u;
}
void Room_RoomBackground::clear_has_htiled() {
  _has_bits_[0] &= ~0x00000010u;
}
void Room_RoomBackground::clear_htiled() {
  htiled_ = false;
  clear_has_htiled();
}
bool Room_RoomBackground::htiled() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.htiled)
  return htiled_;
}
void Room_RoomBackground::set_htiled(bool value) {
  set_has_htiled();
  htiled_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.htiled)
}

// optional bool vtiled = 7;
bool Room_RoomBackground::has_vtiled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Room_RoomBackground::set_has_vtiled() {
  _has_bits_[0] |= 0x00000020u;
}
void Room_RoomBackground::clear_has_vtiled() {
  _has_bits_[0] &= ~0x00000020u;
}
void Room_RoomBackground::clear_vtiled() {
  vtiled_ = false;
  clear_has_vtiled();
}
bool Room_RoomBackground::vtiled() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.vtiled)
  return vtiled_;
}
void Room_RoomBackground::set_vtiled(bool value) {
  set_has_vtiled();
  vtiled_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.vtiled)
}

// optional double hspeed = 8;
bool Room_RoomBackground::has_hspeed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Room_RoomBackground::set_has_hspeed() {
  _has_bits_[0] |= 0x00000100u;
}
void Room_RoomBackground::clear_has_hspeed() {
  _has_bits_[0] &= ~0x00000100u;
}
void Room_RoomBackground::clear_hspeed() {
  hspeed_ = 0;
  clear_has_hspeed();
}
double Room_RoomBackground::hspeed() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.hspeed)
  return hspeed_;
}
void Room_RoomBackground::set_hspeed(double value) {
  set_has_hspeed();
  hspeed_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.hspeed)
}

// optional double vspeed = 9;
bool Room_RoomBackground::has_vspeed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Room_RoomBackground::set_has_vspeed() {
  _has_bits_[0] |= 0x00000200u;
}
void Room_RoomBackground::clear_has_vspeed() {
  _has_bits_[0] &= ~0x00000200u;
}
void Room_RoomBackground::clear_vspeed() {
  vspeed_ = 0;
  clear_has_vspeed();
}
double Room_RoomBackground::vspeed() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.vspeed)
  return vspeed_;
}
void Room_RoomBackground::set_vspeed(double value) {
  set_has_vspeed();
  vspeed_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.vspeed)
}

// optional bool stretch = 10;
bool Room_RoomBackground::has_stretch() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Room_RoomBackground::set_has_stretch() {
  _has_bits_[0] |= 0x00000080u;
}
void Room_RoomBackground::clear_has_stretch() {
  _has_bits_[0] &= ~0x00000080u;
}
void Room_RoomBackground::clear_stretch() {
  stretch_ = false;
  clear_has_stretch();
}
bool Room_RoomBackground::stretch() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.stretch)
  return stretch_;
}
void Room_RoomBackground::set_stretch(bool value) {
  set_has_stretch();
  stretch_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.stretch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Room_View::kVisibleFieldNumber;
const int Room_View::kObjectFollowingFieldNumber;
const int Room_View::kXviewFieldNumber;
const int Room_View::kYviewFieldNumber;
const int Room_View::kWviewFieldNumber;
const int Room_View::kHviewFieldNumber;
const int Room_View::kXportFieldNumber;
const int Room_View::kYportFieldNumber;
const int Room_View::kWportFieldNumber;
const int Room_View::kHportFieldNumber;
const int Room_View::kHborderFieldNumber;
const int Room_View::kVborderFieldNumber;
const int Room_View::kHspeedFieldNumber;
const int Room_View::kVspeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Room_View::Room_View()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_resources_2fRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Room.View)
}
Room_View::Room_View(const Room_View& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_following_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_object_following()) {
    object_following_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_following_);
  }
  ::memcpy(&visible_, &from.visible_,
    static_cast<size_t>(reinterpret_cast<char*>(&vborder_) -
    reinterpret_cast<char*>(&visible_)) + sizeof(vborder_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Room.View)
}

void Room_View::SharedCtor() {
  _cached_size_ = 0;
  object_following_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&visible_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vborder_) -
      reinterpret_cast<char*>(&visible_)) + sizeof(vborder_));
}

Room_View::~Room_View() {
  // @@protoc_insertion_point(destructor:buffers.resources.Room.View)
  SharedDtor();
}

void Room_View::SharedDtor() {
  object_following_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Room_View::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_View::descriptor() {
  protobuf_resources_2fRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Room_View& Room_View::default_instance() {
  protobuf_resources_2fRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

Room_View* Room_View::New(::google::protobuf::Arena* arena) const {
  Room_View* n = new Room_View;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Room_View::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Room.View)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_object_following()) {
    GOOGLE_DCHECK(!object_following_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*object_following_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&visible_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yport_) -
        reinterpret_cast<char*>(&visible_)) + sizeof(yport_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&wport_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vborder_) -
        reinterpret_cast<char*>(&wport_)) + sizeof(vborder_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Room_View::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Room.View)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool visible = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_visible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string object_following = 2 [(.buffers.gmx) = "objName"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_following()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->object_following().data(), static_cast<int>(this->object_following().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Room.View.object_following");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 xview = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_xview();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 yview = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_yview();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wview = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_wview();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hview = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_hview();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 xport = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_xport();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 yport = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_yport();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wport = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_wport();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hport = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_hport();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hborder = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_hborder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hborder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 vborder = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_vborder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vborder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double hspeed = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_hspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vspeed = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_vspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Room.View)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Room.View)
  return false;
#undef DO_
}

void Room_View::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Room.View)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool visible = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->visible(), output);
  }

  // optional string object_following = 2 [(.buffers.gmx) = "objName"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object_following().data(), static_cast<int>(this->object_following().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.View.object_following");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->object_following(), output);
  }

  // optional int32 xview = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->xview(), output);
  }

  // optional int32 yview = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->yview(), output);
  }

  // optional uint32 wview = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->wview(), output);
  }

  // optional uint32 hview = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hview(), output);
  }

  // optional int32 xport = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->xport(), output);
  }

  // optional int32 yport = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->yport(), output);
  }

  // optional uint32 wport = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->wport(), output);
  }

  // optional uint32 hport = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->hport(), output);
  }

  // optional int32 hborder = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->hborder(), output);
  }

  // optional int32 vborder = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->vborder(), output);
  }

  // optional double hspeed = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->hspeed(), output);
  }

  // optional double vspeed = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->vspeed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Room.View)
}

::google::protobuf::uint8* Room_View::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Room.View)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool visible = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->visible(), target);
  }

  // optional string object_following = 2 [(.buffers.gmx) = "objName"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object_following().data(), static_cast<int>(this->object_following().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.View.object_following");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_following(), target);
  }

  // optional int32 xview = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->xview(), target);
  }

  // optional int32 yview = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->yview(), target);
  }

  // optional uint32 wview = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->wview(), target);
  }

  // optional uint32 hview = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hview(), target);
  }

  // optional int32 xport = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->xport(), target);
  }

  // optional int32 yport = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->yport(), target);
  }

  // optional uint32 wport = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->wport(), target);
  }

  // optional uint32 hport = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->hport(), target);
  }

  // optional int32 hborder = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->hborder(), target);
  }

  // optional int32 vborder = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->vborder(), target);
  }

  // optional double hspeed = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->hspeed(), target);
  }

  // optional double vspeed = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->vspeed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Room.View)
  return target;
}

size_t Room_View::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Room.View)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string object_following = 2 [(.buffers.gmx) = "objName"];
    if (has_object_following()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_following());
    }

    // optional bool visible = 1;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional int32 xview = 3;
    if (has_xview()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xview());
    }

    // optional int32 yview = 4;
    if (has_yview()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yview());
    }

    // optional uint32 wview = 5;
    if (has_wview()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wview());
    }

    // optional uint32 hview = 6;
    if (has_hview()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hview());
    }

    // optional int32 xport = 7;
    if (has_xport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xport());
    }

    // optional int32 yport = 8;
    if (has_yport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yport());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional uint32 wport = 9;
    if (has_wport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wport());
    }

    // optional uint32 hport = 10;
    if (has_hport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hport());
    }

    // optional int32 hborder = 11;
    if (has_hborder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hborder());
    }

    // optional double hspeed = 13;
    if (has_hspeed()) {
      total_size += 1 + 8;
    }

    // optional double vspeed = 14;
    if (has_vspeed()) {
      total_size += 1 + 8;
    }

    // optional int32 vborder = 12;
    if (has_vborder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vborder());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_View::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Room.View)
  GOOGLE_DCHECK_NE(&from, this);
  const Room_View* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Room_View>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Room.View)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Room.View)
    MergeFrom(*source);
  }
}

void Room_View::MergeFrom(const Room_View& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Room.View)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_object_following();
      object_following_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_following_);
    }
    if (cached_has_bits & 0x00000002u) {
      visible_ = from.visible_;
    }
    if (cached_has_bits & 0x00000004u) {
      xview_ = from.xview_;
    }
    if (cached_has_bits & 0x00000008u) {
      yview_ = from.yview_;
    }
    if (cached_has_bits & 0x00000010u) {
      wview_ = from.wview_;
    }
    if (cached_has_bits & 0x00000020u) {
      hview_ = from.hview_;
    }
    if (cached_has_bits & 0x00000040u) {
      xport_ = from.xport_;
    }
    if (cached_has_bits & 0x00000080u) {
      yport_ = from.yport_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      wport_ = from.wport_;
    }
    if (cached_has_bits & 0x00000200u) {
      hport_ = from.hport_;
    }
    if (cached_has_bits & 0x00000400u) {
      hborder_ = from.hborder_;
    }
    if (cached_has_bits & 0x00000800u) {
      hspeed_ = from.hspeed_;
    }
    if (cached_has_bits & 0x00001000u) {
      vspeed_ = from.vspeed_;
    }
    if (cached_has_bits & 0x00002000u) {
      vborder_ = from.vborder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Room_View::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Room.View)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_View::CopyFrom(const Room_View& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Room.View)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_View::IsInitialized() const {
  return true;
}

void Room_View::Swap(Room_View* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Room_View::InternalSwap(Room_View* other) {
  using std::swap;
  object_following_.Swap(&other->object_following_);
  swap(visible_, other->visible_);
  swap(xview_, other->xview_);
  swap(yview_, other->yview_);
  swap(wview_, other->wview_);
  swap(hview_, other->hview_);
  swap(xport_, other->xport_);
  swap(yport_, other->yport_);
  swap(wport_, other->wport_);
  swap(hport_, other->hport_);
  swap(hborder_, other->hborder_);
  swap(hspeed_, other->hspeed_);
  swap(vspeed_, other->vspeed_);
  swap(vborder_, other->vborder_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Room_View::GetMetadata() const {
  protobuf_resources_2fRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Room_View

// optional bool visible = 1;
bool Room_View::has_visible() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Room_View::set_has_visible() {
  _has_bits_[0] |= 0x00000002u;
}
void Room_View::clear_has_visible() {
  _has_bits_[0] &= ~0x00000002u;
}
void Room_View::clear_visible() {
  visible_ = false;
  clear_has_visible();
}
bool Room_View::visible() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.visible)
  return visible_;
}
void Room_View::set_visible(bool value) {
  set_has_visible();
  visible_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.visible)
}

// optional string object_following = 2 [(.buffers.gmx) = "objName"];
bool Room_View::has_object_following() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Room_View::set_has_object_following() {
  _has_bits_[0] |= 0x00000001u;
}
void Room_View::clear_has_object_following() {
  _has_bits_[0] &= ~0x00000001u;
}
void Room_View::clear_object_following() {
  object_following_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object_following();
}
const ::std::string& Room_View::object_following() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.object_following)
  return object_following_.GetNoArena();
}
void Room_View::set_object_following(const ::std::string& value) {
  set_has_object_following();
  object_following_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.object_following)
}
#if LANG_CXX11
void Room_View::set_object_following(::std::string&& value) {
  set_has_object_following();
  object_following_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.View.object_following)
}
#endif
void Room_View::set_object_following(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_object_following();
  object_following_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.View.object_following)
}
void Room_View::set_object_following(const char* value, size_t size) {
  set_has_object_following();
  object_following_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.View.object_following)
}
::std::string* Room_View::mutable_object_following() {
  set_has_object_following();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.View.object_following)
  return object_following_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Room_View::release_object_following() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.View.object_following)
  clear_has_object_following();
  return object_following_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Room_View::set_allocated_object_following(::std::string* object_following) {
  if (object_following != NULL) {
    set_has_object_following();
  } else {
    clear_has_object_following();
  }
  object_following_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_following);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.View.object_following)
}

// optional int32 xview = 3;
bool Room_View::has_xview() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Room_View::set_has_xview() {
  _has_bits_[0] |= 0x00000004u;
}
void Room_View::clear_has_xview() {
  _has_bits_[0] &= ~0x00000004u;
}
void Room_View::clear_xview() {
  xview_ = 0;
  clear_has_xview();
}
::google::protobuf::int32 Room_View::xview() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.xview)
  return xview_;
}
void Room_View::set_xview(::google::protobuf::int32 value) {
  set_has_xview();
  xview_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.xview)
}

// optional int32 yview = 4;
bool Room_View::has_yview() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Room_View::set_has_yview() {
  _has_bits_[0] |= 0x00000008u;
}
void Room_View::clear_has_yview() {
  _has_bits_[0] &= ~0x00000008u;
}
void Room_View::clear_yview() {
  yview_ = 0;
  clear_has_yview();
}
::google::protobuf::int32 Room_View::yview() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.yview)
  return yview_;
}
void Room_View::set_yview(::google::protobuf::int32 value) {
  set_has_yview();
  yview_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.yview)
}

// optional uint32 wview = 5;
bool Room_View::has_wview() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Room_View::set_has_wview() {
  _has_bits_[0] |= 0x00000010u;
}
void Room_View::clear_has_wview() {
  _has_bits_[0] &= ~0x00000010u;
}
void Room_View::clear_wview() {
  wview_ = 0u;
  clear_has_wview();
}
::google::protobuf::uint32 Room_View::wview() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.wview)
  return wview_;
}
void Room_View::set_wview(::google::protobuf::uint32 value) {
  set_has_wview();
  wview_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.wview)
}

// optional uint32 hview = 6;
bool Room_View::has_hview() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Room_View::set_has_hview() {
  _has_bits_[0] |= 0x00000020u;
}
void Room_View::clear_has_hview() {
  _has_bits_[0] &= ~0x00000020u;
}
void Room_View::clear_hview() {
  hview_ = 0u;
  clear_has_hview();
}
::google::protobuf::uint32 Room_View::hview() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.hview)
  return hview_;
}
void Room_View::set_hview(::google::protobuf::uint32 value) {
  set_has_hview();
  hview_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.hview)
}

// optional int32 xport = 7;
bool Room_View::has_xport() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Room_View::set_has_xport() {
  _has_bits_[0] |= 0x00000040u;
}
void Room_View::clear_has_xport() {
  _has_bits_[0] &= ~0x00000040u;
}
void Room_View::clear_xport() {
  xport_ = 0;
  clear_has_xport();
}
::google::protobuf::int32 Room_View::xport() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.xport)
  return xport_;
}
void Room_View::set_xport(::google::protobuf::int32 value) {
  set_has_xport();
  xport_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.xport)
}

// optional int32 yport = 8;
bool Room_View::has_yport() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Room_View::set_has_yport() {
  _has_bits_[0] |= 0x00000080u;
}
void Room_View::clear_has_yport() {
  _has_bits_[0] &= ~0x00000080u;
}
void Room_View::clear_yport() {
  yport_ = 0;
  clear_has_yport();
}
::google::protobuf::int32 Room_View::yport() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.yport)
  return yport_;
}
void Room_View::set_yport(::google::protobuf::int32 value) {
  set_has_yport();
  yport_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.yport)
}

// optional uint32 wport = 9;
bool Room_View::has_wport() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Room_View::set_has_wport() {
  _has_bits_[0] |= 0x00000100u;
}
void Room_View::clear_has_wport() {
  _has_bits_[0] &= ~0x00000100u;
}
void Room_View::clear_wport() {
  wport_ = 0u;
  clear_has_wport();
}
::google::protobuf::uint32 Room_View::wport() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.wport)
  return wport_;
}
void Room_View::set_wport(::google::protobuf::uint32 value) {
  set_has_wport();
  wport_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.wport)
}

// optional uint32 hport = 10;
bool Room_View::has_hport() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Room_View::set_has_hport() {
  _has_bits_[0] |= 0x00000200u;
}
void Room_View::clear_has_hport() {
  _has_bits_[0] &= ~0x00000200u;
}
void Room_View::clear_hport() {
  hport_ = 0u;
  clear_has_hport();
}
::google::protobuf::uint32 Room_View::hport() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.hport)
  return hport_;
}
void Room_View::set_hport(::google::protobuf::uint32 value) {
  set_has_hport();
  hport_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.hport)
}

// optional int32 hborder = 11;
bool Room_View::has_hborder() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Room_View::set_has_hborder() {
  _has_bits_[0] |= 0x00000400u;
}
void Room_View::clear_has_hborder() {
  _has_bits_[0] &= ~0x00000400u;
}
void Room_View::clear_hborder() {
  hborder_ = 0;
  clear_has_hborder();
}
::google::protobuf::int32 Room_View::hborder() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.hborder)
  return hborder_;
}
void Room_View::set_hborder(::google::protobuf::int32 value) {
  set_has_hborder();
  hborder_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.hborder)
}

// optional int32 vborder = 12;
bool Room_View::has_vborder() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Room_View::set_has_vborder() {
  _has_bits_[0] |= 0x00002000u;
}
void Room_View::clear_has_vborder() {
  _has_bits_[0] &= ~0x00002000u;
}
void Room_View::clear_vborder() {
  vborder_ = 0;
  clear_has_vborder();
}
::google::protobuf::int32 Room_View::vborder() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.vborder)
  return vborder_;
}
void Room_View::set_vborder(::google::protobuf::int32 value) {
  set_has_vborder();
  vborder_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.vborder)
}

// optional double hspeed = 13;
bool Room_View::has_hspeed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Room_View::set_has_hspeed() {
  _has_bits_[0] |= 0x00000800u;
}
void Room_View::clear_has_hspeed() {
  _has_bits_[0] &= ~0x00000800u;
}
void Room_View::clear_hspeed() {
  hspeed_ = 0;
  clear_has_hspeed();
}
double Room_View::hspeed() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.hspeed)
  return hspeed_;
}
void Room_View::set_hspeed(double value) {
  set_has_hspeed();
  hspeed_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.hspeed)
}

// optional double vspeed = 14;
bool Room_View::has_vspeed() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Room_View::set_has_vspeed() {
  _has_bits_[0] |= 0x00001000u;
}
void Room_View::clear_has_vspeed() {
  _has_bits_[0] &= ~0x00001000u;
}
void Room_View::clear_vspeed() {
  vspeed_ = 0;
  clear_has_vspeed();
}
double Room_View::vspeed() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.vspeed)
  return vspeed_;
}
void Room_View::set_vspeed(double value) {
  set_has_vspeed();
  vspeed_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.vspeed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Room_Instance::kObjectTypeFieldNumber;
const int Room_Instance::kXFieldNumber;
const int Room_Instance::kYFieldNumber;
const int Room_Instance::kIdFieldNumber;
const int Room_Instance::kLockedFieldNumber;
const int Room_Instance::kCodeFieldNumber;
const int Room_Instance::kXscaleFieldNumber;
const int Room_Instance::kYscaleFieldNumber;
const int Room_Instance::kColorFieldNumber;
const int Room_Instance::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Room_Instance::Room_Instance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_resources_2fRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Room.Instance)
}
Room_Instance::Room_Instance(const Room_Instance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  object_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_object_type()) {
    object_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_type_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&x_)) + sizeof(rotation_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Room.Instance)
}

void Room_Instance::SharedCtor() {
  _cached_size_ = 0;
  object_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&x_)) + sizeof(rotation_));
}

Room_Instance::~Room_Instance() {
  // @@protoc_insertion_point(destructor:buffers.resources.Room.Instance)
  SharedDtor();
}

void Room_Instance::SharedDtor() {
  object_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Room_Instance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_Instance::descriptor() {
  protobuf_resources_2fRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Room_Instance& Room_Instance::default_instance() {
  protobuf_resources_2fRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

Room_Instance* Room_Instance::New(::google::protobuf::Arena* arena) const {
  Room_Instance* n = new Room_Instance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Room_Instance::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Room.Instance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!object_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*object_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_) -
        reinterpret_cast<char*>(&x_)) + sizeof(color_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&yscale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotation_) -
        reinterpret_cast<char*>(&yscale_)) + sizeof(rotation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Room_Instance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Room.Instance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string object_type = 1 [(.buffers.gmx) = "objName"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->object_type().data(), static_cast<int>(this->object_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Room.Instance.object_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 4 [(.buffers.gmx) = "name"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Room.Instance.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool locked = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_locked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Room.Instance.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double xscale = 7 [(.buffers.gmx) = "scaleX"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_xscale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double yscale = 8 [(.buffers.gmx) = "scaleY"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_yscale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 color = 9 [(.buffers.gmx) = "colour"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rotation = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_rotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Room.Instance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Room.Instance)
  return false;
#undef DO_
}

void Room_Instance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Room.Instance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string object_type = 1 [(.buffers.gmx) = "objName"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object_type().data(), static_cast<int>(this->object_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.Instance.object_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->object_type(), output);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional string id = 4 [(.buffers.gmx) = "name"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.Instance.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->id(), output);
  }

  // optional bool locked = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->locked(), output);
  }

  // optional string code = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.Instance.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->code(), output);
  }

  // optional double xscale = 7 [(.buffers.gmx) = "scaleX"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->xscale(), output);
  }

  // optional double yscale = 8 [(.buffers.gmx) = "scaleY"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->yscale(), output);
  }

  // optional int32 color = 9 [(.buffers.gmx) = "colour"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->color(), output);
  }

  // optional double rotation = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->rotation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Room.Instance)
}

::google::protobuf::uint8* Room_Instance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Room.Instance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string object_type = 1 [(.buffers.gmx) = "objName"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->object_type().data(), static_cast<int>(this->object_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.Instance.object_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object_type(), target);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // optional string id = 4 [(.buffers.gmx) = "name"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.Instance.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->id(), target);
  }

  // optional bool locked = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->locked(), target);
  }

  // optional string code = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.Instance.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->code(), target);
  }

  // optional double xscale = 7 [(.buffers.gmx) = "scaleX"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->xscale(), target);
  }

  // optional double yscale = 8 [(.buffers.gmx) = "scaleY"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->yscale(), target);
  }

  // optional int32 color = 9 [(.buffers.gmx) = "colour"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->color(), target);
  }

  // optional double rotation = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->rotation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Room.Instance)
  return target;
}

size_t Room_Instance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Room.Instance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string object_type = 1 [(.buffers.gmx) = "objName"];
    if (has_object_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_type());
    }

    // optional string id = 4 [(.buffers.gmx) = "name"];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string code = 6;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional double xscale = 7 [(.buffers.gmx) = "scaleX"];
    if (has_xscale()) {
      total_size += 1 + 8;
    }

    // optional bool locked = 5;
    if (has_locked()) {
      total_size += 1 + 1;
    }

    // optional int32 color = 9 [(.buffers.gmx) = "colour"];
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional double yscale = 8 [(.buffers.gmx) = "scaleY"];
    if (has_yscale()) {
      total_size += 1 + 8;
    }

    // optional double rotation = 10;
    if (has_rotation()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_Instance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Room.Instance)
  GOOGLE_DCHECK_NE(&from, this);
  const Room_Instance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Room_Instance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Room.Instance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Room.Instance)
    MergeFrom(*source);
  }
}

void Room_Instance::MergeFrom(const Room_Instance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Room.Instance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_object_type();
      object_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000008u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000020u) {
      xscale_ = from.xscale_;
    }
    if (cached_has_bits & 0x00000040u) {
      locked_ = from.locked_;
    }
    if (cached_has_bits & 0x00000080u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      yscale_ = from.yscale_;
    }
    if (cached_has_bits & 0x00000200u) {
      rotation_ = from.rotation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Room_Instance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Room.Instance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_Instance::CopyFrom(const Room_Instance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Room.Instance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_Instance::IsInitialized() const {
  return true;
}

void Room_Instance::Swap(Room_Instance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Room_Instance::InternalSwap(Room_Instance* other) {
  using std::swap;
  object_type_.Swap(&other->object_type_);
  id_.Swap(&other->id_);
  code_.Swap(&other->code_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(xscale_, other->xscale_);
  swap(locked_, other->locked_);
  swap(color_, other->color_);
  swap(yscale_, other->yscale_);
  swap(rotation_, other->rotation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Room_Instance::GetMetadata() const {
  protobuf_resources_2fRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Room_Instance

// optional string object_type = 1 [(.buffers.gmx) = "objName"];
bool Room_Instance::has_object_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Room_Instance::set_has_object_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Room_Instance::clear_has_object_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Room_Instance::clear_object_type() {
  object_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object_type();
}
const ::std::string& Room_Instance::object_type() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.object_type)
  return object_type_.GetNoArena();
}
void Room_Instance::set_object_type(const ::std::string& value) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.object_type)
}
#if LANG_CXX11
void Room_Instance::set_object_type(::std::string&& value) {
  set_has_object_type();
  object_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.Instance.object_type)
}
#endif
void Room_Instance::set_object_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.Instance.object_type)
}
void Room_Instance::set_object_type(const char* value, size_t size) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.Instance.object_type)
}
::std::string* Room_Instance::mutable_object_type() {
  set_has_object_type();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.Instance.object_type)
  return object_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Room_Instance::release_object_type() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.Instance.object_type)
  clear_has_object_type();
  return object_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Room_Instance::set_allocated_object_type(::std::string* object_type) {
  if (object_type != NULL) {
    set_has_object_type();
  } else {
    clear_has_object_type();
  }
  object_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_type);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.Instance.object_type)
}

// optional int32 x = 2;
bool Room_Instance::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Room_Instance::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
void Room_Instance::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
void Room_Instance::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 Room_Instance::x() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.x)
  return x_;
}
void Room_Instance::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.x)
}

// optional int32 y = 3;
bool Room_Instance::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Room_Instance::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
void Room_Instance::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
void Room_Instance::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 Room_Instance::y() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.y)
  return y_;
}
void Room_Instance::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.y)
}

// optional string id = 4 [(.buffers.gmx) = "name"];
bool Room_Instance::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Room_Instance::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Room_Instance::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Room_Instance::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& Room_Instance::id() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.id)
  return id_.GetNoArena();
}
void Room_Instance::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.id)
}
#if LANG_CXX11
void Room_Instance::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.Instance.id)
}
#endif
void Room_Instance::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.Instance.id)
}
void Room_Instance::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.Instance.id)
}
::std::string* Room_Instance::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.Instance.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Room_Instance::release_id() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.Instance.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Room_Instance::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.Instance.id)
}

// optional bool locked = 5;
bool Room_Instance::has_locked() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Room_Instance::set_has_locked() {
  _has_bits_[0] |= 0x00000040u;
}
void Room_Instance::clear_has_locked() {
  _has_bits_[0] &= ~0x00000040u;
}
void Room_Instance::clear_locked() {
  locked_ = false;
  clear_has_locked();
}
bool Room_Instance::locked() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.locked)
  return locked_;
}
void Room_Instance::set_locked(bool value) {
  set_has_locked();
  locked_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.locked)
}

// optional string code = 6;
bool Room_Instance::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Room_Instance::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
void Room_Instance::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void Room_Instance::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
const ::std::string& Room_Instance::code() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.code)
  return code_.GetNoArena();
}
void Room_Instance::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.code)
}
#if LANG_CXX11
void Room_Instance::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.Instance.code)
}
#endif
void Room_Instance::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.Instance.code)
}
void Room_Instance::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.Instance.code)
}
::std::string* Room_Instance::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.Instance.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Room_Instance::release_code() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.Instance.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Room_Instance::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.Instance.code)
}

// optional double xscale = 7 [(.buffers.gmx) = "scaleX"];
bool Room_Instance::has_xscale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Room_Instance::set_has_xscale() {
  _has_bits_[0] |= 0x00000020u;
}
void Room_Instance::clear_has_xscale() {
  _has_bits_[0] &= ~0x00000020u;
}
void Room_Instance::clear_xscale() {
  xscale_ = 0;
  clear_has_xscale();
}
double Room_Instance::xscale() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.xscale)
  return xscale_;
}
void Room_Instance::set_xscale(double value) {
  set_has_xscale();
  xscale_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.xscale)
}

// optional double yscale = 8 [(.buffers.gmx) = "scaleY"];
bool Room_Instance::has_yscale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Room_Instance::set_has_yscale() {
  _has_bits_[0] |= 0x00000100u;
}
void Room_Instance::clear_has_yscale() {
  _has_bits_[0] &= ~0x00000100u;
}
void Room_Instance::clear_yscale() {
  yscale_ = 0;
  clear_has_yscale();
}
double Room_Instance::yscale() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.yscale)
  return yscale_;
}
void Room_Instance::set_yscale(double value) {
  set_has_yscale();
  yscale_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.yscale)
}

// optional int32 color = 9 [(.buffers.gmx) = "colour"];
bool Room_Instance::has_color() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Room_Instance::set_has_color() {
  _has_bits_[0] |= 0x00000080u;
}
void Room_Instance::clear_has_color() {
  _has_bits_[0] &= ~0x00000080u;
}
void Room_Instance::clear_color() {
  color_ = 0;
  clear_has_color();
}
::google::protobuf::int32 Room_Instance::color() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.color)
  return color_;
}
void Room_Instance::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.color)
}

// optional double rotation = 10;
bool Room_Instance::has_rotation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Room_Instance::set_has_rotation() {
  _has_bits_[0] |= 0x00000200u;
}
void Room_Instance::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000200u;
}
void Room_Instance::clear_rotation() {
  rotation_ = 0;
  clear_has_rotation();
}
double Room_Instance::rotation() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.rotation)
  return rotation_;
}
void Room_Instance::set_rotation(double value) {
  set_has_rotation();
  rotation_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Room_Tile::kImageFieldNumber;
const int Room_Tile::kXFieldNumber;
const int Room_Tile::kYFieldNumber;
const int Room_Tile::kWidthFieldNumber;
const int Room_Tile::kHeightFieldNumber;
const int Room_Tile::kXoffsetFieldNumber;
const int Room_Tile::kYoffsetFieldNumber;
const int Room_Tile::kIdFieldNumber;
const int Room_Tile::kNameFieldNumber;
const int Room_Tile::kDepthFieldNumber;
const int Room_Tile::kLockedFieldNumber;
const int Room_Tile::kColorFieldNumber;
const int Room_Tile::kXscaleFieldNumber;
const int Room_Tile::kYscaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Room_Tile::Room_Tile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_resources_2fRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Room.Tile)
}
Room_Tile::Room_Tile(const Room_Tile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image()) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&yscale_) -
    reinterpret_cast<char*>(&x_)) + sizeof(yscale_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Room.Tile)
}

void Room_Tile::SharedCtor() {
  _cached_size_ = 0;
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yscale_) -
      reinterpret_cast<char*>(&x_)) + sizeof(yscale_));
}

Room_Tile::~Room_Tile() {
  // @@protoc_insertion_point(destructor:buffers.resources.Room.Tile)
  SharedDtor();
}

void Room_Tile::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Room_Tile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room_Tile::descriptor() {
  protobuf_resources_2fRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Room_Tile& Room_Tile::default_instance() {
  protobuf_resources_2fRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

Room_Tile* Room_Tile::New(::google::protobuf::Arena* arena) const {
  Room_Tile* n = new Room_Tile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Room_Tile::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Room.Tile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!image_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*image_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yoffset_) -
        reinterpret_cast<char*>(&x_)) + sizeof(yoffset_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&yscale_) -
        reinterpret_cast<char*>(&id_)) + sizeof(yscale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Room_Tile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Room.Tile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string image = 1 [(.buffers.gmx) = "bgName"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Room.Tile.image");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 4 [(.buffers.gmx) = "w"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 5 [(.buffers.gmx) = "h"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 xoffset = 6 [(.buffers.gmx) = "xo"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_xoffset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 yoffset = 7 [(.buffers.gmx) = "yo"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_yoffset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Room.Tile.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 depth = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool locked = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_locked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 color = 12 [(.buffers.gmx) = "colour"];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double xscale = 13 [(.buffers.gmx) = "scaleX"];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_xscale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double yscale = 14 [(.buffers.gmx) = "scaleY"];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_yscale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Room.Tile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Room.Tile)
  return false;
#undef DO_
}

void Room_Tile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Room.Tile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string image = 1 [(.buffers.gmx) = "bgName"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.Tile.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image(), output);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional uint32 width = 4 [(.buffers.gmx) = "w"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  // optional uint32 height = 5 [(.buffers.gmx) = "h"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->height(), output);
  }

  // optional int32 xoffset = 6 [(.buffers.gmx) = "xo"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->xoffset(), output);
  }

  // optional int32 yoffset = 7 [(.buffers.gmx) = "yo"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->yoffset(), output);
  }

  // optional int32 id = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->id(), output);
  }

  // optional string name = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.Tile.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->name(), output);
  }

  // optional int32 depth = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->depth(), output);
  }

  // optional bool locked = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->locked(), output);
  }

  // optional int32 color = 12 [(.buffers.gmx) = "colour"];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->color(), output);
  }

  // optional double xscale = 13 [(.buffers.gmx) = "scaleX"];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->xscale(), output);
  }

  // optional double yscale = 14 [(.buffers.gmx) = "scaleY"];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->yscale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Room.Tile)
}

::google::protobuf::uint8* Room_Tile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Room.Tile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string image = 1 [(.buffers.gmx) = "bgName"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.Tile.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image(), target);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // optional uint32 width = 4 [(.buffers.gmx) = "w"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  // optional uint32 height = 5 [(.buffers.gmx) = "h"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->height(), target);
  }

  // optional int32 xoffset = 6 [(.buffers.gmx) = "xo"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->xoffset(), target);
  }

  // optional int32 yoffset = 7 [(.buffers.gmx) = "yo"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->yoffset(), target);
  }

  // optional int32 id = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->id(), target);
  }

  // optional string name = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.Tile.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }

  // optional int32 depth = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->depth(), target);
  }

  // optional bool locked = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->locked(), target);
  }

  // optional int32 color = 12 [(.buffers.gmx) = "colour"];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->color(), target);
  }

  // optional double xscale = 13 [(.buffers.gmx) = "scaleX"];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->xscale(), target);
  }

  // optional double yscale = 14 [(.buffers.gmx) = "scaleY"];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->yscale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Room.Tile)
  return target;
}

size_t Room_Tile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Room.Tile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string image = 1 [(.buffers.gmx) = "bgName"];
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional uint32 width = 4 [(.buffers.gmx) = "w"];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 5 [(.buffers.gmx) = "h"];
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional int32 xoffset = 6 [(.buffers.gmx) = "xo"];
    if (has_xoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xoffset());
    }

    // optional int32 yoffset = 7 [(.buffers.gmx) = "yo"];
    if (has_yoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yoffset());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional int32 id = 8;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 depth = 10;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }

    // optional bool locked = 11;
    if (has_locked()) {
      total_size += 1 + 1;
    }

    // optional int32 color = 12 [(.buffers.gmx) = "colour"];
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

    // optional double xscale = 13 [(.buffers.gmx) = "scaleX"];
    if (has_xscale()) {
      total_size += 1 + 8;
    }

    // optional double yscale = 14 [(.buffers.gmx) = "scaleY"];
    if (has_yscale()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room_Tile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Room.Tile)
  GOOGLE_DCHECK_NE(&from, this);
  const Room_Tile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Room_Tile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Room.Tile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Room.Tile)
    MergeFrom(*source);
  }
}

void Room_Tile::MergeFrom(const Room_Tile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Room.Tile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_image();
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      xoffset_ = from.xoffset_;
    }
    if (cached_has_bits & 0x00000080u) {
      yoffset_ = from.yoffset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000200u) {
      depth_ = from.depth_;
    }
    if (cached_has_bits & 0x00000400u) {
      locked_ = from.locked_;
    }
    if (cached_has_bits & 0x00000800u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00001000u) {
      xscale_ = from.xscale_;
    }
    if (cached_has_bits & 0x00002000u) {
      yscale_ = from.yscale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Room_Tile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Room.Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room_Tile::CopyFrom(const Room_Tile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Room.Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room_Tile::IsInitialized() const {
  return true;
}

void Room_Tile::Swap(Room_Tile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Room_Tile::InternalSwap(Room_Tile* other) {
  using std::swap;
  image_.Swap(&other->image_);
  name_.Swap(&other->name_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(xoffset_, other->xoffset_);
  swap(yoffset_, other->yoffset_);
  swap(id_, other->id_);
  swap(depth_, other->depth_);
  swap(locked_, other->locked_);
  swap(color_, other->color_);
  swap(xscale_, other->xscale_);
  swap(yscale_, other->yscale_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Room_Tile::GetMetadata() const {
  protobuf_resources_2fRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Room_Tile

// optional string image = 1 [(.buffers.gmx) = "bgName"];
bool Room_Tile::has_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Room_Tile::set_has_image() {
  _has_bits_[0] |= 0x00000001u;
}
void Room_Tile::clear_has_image() {
  _has_bits_[0] &= ~0x00000001u;
}
void Room_Tile::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image();
}
const ::std::string& Room_Tile::image() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.image)
  return image_.GetNoArena();
}
void Room_Tile::set_image(const ::std::string& value) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.image)
}
#if LANG_CXX11
void Room_Tile::set_image(::std::string&& value) {
  set_has_image();
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.Tile.image)
}
#endif
void Room_Tile::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.Tile.image)
}
void Room_Tile::set_image(const char* value, size_t size) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.Tile.image)
}
::std::string* Room_Tile::mutable_image() {
  set_has_image();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.Tile.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Room_Tile::release_image() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.Tile.image)
  clear_has_image();
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Room_Tile::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    set_has_image();
  } else {
    clear_has_image();
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.Tile.image)
}

// optional int32 x = 2;
bool Room_Tile::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Room_Tile::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
void Room_Tile::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void Room_Tile::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 Room_Tile::x() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.x)
  return x_;
}
void Room_Tile::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.x)
}

// optional int32 y = 3;
bool Room_Tile::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Room_Tile::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
void Room_Tile::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void Room_Tile::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 Room_Tile::y() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.y)
  return y_;
}
void Room_Tile::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.y)
}

// optional uint32 width = 4 [(.buffers.gmx) = "w"];
bool Room_Tile::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Room_Tile::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
void Room_Tile::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void Room_Tile::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 Room_Tile::width() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.width)
  return width_;
}
void Room_Tile::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.width)
}

// optional uint32 height = 5 [(.buffers.gmx) = "h"];
bool Room_Tile::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Room_Tile::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
void Room_Tile::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void Room_Tile::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 Room_Tile::height() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.height)
  return height_;
}
void Room_Tile::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.height)
}

// optional int32 xoffset = 6 [(.buffers.gmx) = "xo"];
bool Room_Tile::has_xoffset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Room_Tile::set_has_xoffset() {
  _has_bits_[0] |= 0x00000040u;
}
void Room_Tile::clear_has_xoffset() {
  _has_bits_[0] &= ~0x00000040u;
}
void Room_Tile::clear_xoffset() {
  xoffset_ = 0;
  clear_has_xoffset();
}
::google::protobuf::int32 Room_Tile::xoffset() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.xoffset)
  return xoffset_;
}
void Room_Tile::set_xoffset(::google::protobuf::int32 value) {
  set_has_xoffset();
  xoffset_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.xoffset)
}

// optional int32 yoffset = 7 [(.buffers.gmx) = "yo"];
bool Room_Tile::has_yoffset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Room_Tile::set_has_yoffset() {
  _has_bits_[0] |= 0x00000080u;
}
void Room_Tile::clear_has_yoffset() {
  _has_bits_[0] &= ~0x00000080u;
}
void Room_Tile::clear_yoffset() {
  yoffset_ = 0;
  clear_has_yoffset();
}
::google::protobuf::int32 Room_Tile::yoffset() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.yoffset)
  return yoffset_;
}
void Room_Tile::set_yoffset(::google::protobuf::int32 value) {
  set_has_yoffset();
  yoffset_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.yoffset)
}

// optional int32 id = 8;
bool Room_Tile::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Room_Tile::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
void Room_Tile::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void Room_Tile::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 Room_Tile::id() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.id)
  return id_;
}
void Room_Tile::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.id)
}

// optional string name = 9;
bool Room_Tile::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Room_Tile::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Room_Tile::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Room_Tile::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Room_Tile::name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.name)
  return name_.GetNoArena();
}
void Room_Tile::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.name)
}
#if LANG_CXX11
void Room_Tile::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.Tile.name)
}
#endif
void Room_Tile::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.Tile.name)
}
void Room_Tile::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.Tile.name)
}
::std::string* Room_Tile::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.Tile.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Room_Tile::release_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.Tile.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Room_Tile::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.Tile.name)
}

// optional int32 depth = 10;
bool Room_Tile::has_depth() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Room_Tile::set_has_depth() {
  _has_bits_[0] |= 0x00000200u;
}
void Room_Tile::clear_has_depth() {
  _has_bits_[0] &= ~0x00000200u;
}
void Room_Tile::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
::google::protobuf::int32 Room_Tile::depth() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.depth)
  return depth_;
}
void Room_Tile::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.depth)
}

// optional bool locked = 11;
bool Room_Tile::has_locked() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Room_Tile::set_has_locked() {
  _has_bits_[0] |= 0x00000400u;
}
void Room_Tile::clear_has_locked() {
  _has_bits_[0] &= ~0x00000400u;
}
void Room_Tile::clear_locked() {
  locked_ = false;
  clear_has_locked();
}
bool Room_Tile::locked() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.locked)
  return locked_;
}
void Room_Tile::set_locked(bool value) {
  set_has_locked();
  locked_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.locked)
}

// optional int32 color = 12 [(.buffers.gmx) = "colour"];
bool Room_Tile::has_color() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Room_Tile::set_has_color() {
  _has_bits_[0] |= 0x00000800u;
}
void Room_Tile::clear_has_color() {
  _has_bits_[0] &= ~0x00000800u;
}
void Room_Tile::clear_color() {
  color_ = 0;
  clear_has_color();
}
::google::protobuf::int32 Room_Tile::color() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.color)
  return color_;
}
void Room_Tile::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.color)
}

// optional double xscale = 13 [(.buffers.gmx) = "scaleX"];
bool Room_Tile::has_xscale() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Room_Tile::set_has_xscale() {
  _has_bits_[0] |= 0x00001000u;
}
void Room_Tile::clear_has_xscale() {
  _has_bits_[0] &= ~0x00001000u;
}
void Room_Tile::clear_xscale() {
  xscale_ = 0;
  clear_has_xscale();
}
double Room_Tile::xscale() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.xscale)
  return xscale_;
}
void Room_Tile::set_xscale(double value) {
  set_has_xscale();
  xscale_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.xscale)
}

// optional double yscale = 14 [(.buffers.gmx) = "scaleY"];
bool Room_Tile::has_yscale() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Room_Tile::set_has_yscale() {
  _has_bits_[0] |= 0x00002000u;
}
void Room_Tile::clear_has_yscale() {
  _has_bits_[0] &= ~0x00002000u;
}
void Room_Tile::clear_yscale() {
  yscale_ = 0;
  clear_has_yscale();
}
double Room_Tile::yscale() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.yscale)
  return yscale_;
}
void Room_Tile::set_yscale(double value) {
  set_has_yscale();
  yscale_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.yscale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Room::kCaptionFieldNumber;
const int Room::kWidthFieldNumber;
const int Room::kHeightFieldNumber;
const int Room::kVsnapFieldNumber;
const int Room::kHsnapFieldNumber;
const int Room::kIsometricFieldNumber;
const int Room::kSpeedFieldNumber;
const int Room::kPersistentFieldNumber;
const int Room::kColorFieldNumber;
const int Room::kShowColorFieldNumber;
const int Room::kCodeFieldNumber;
const int Room::kEnableViewsFieldNumber;
const int Room::kClearViewBackgroundFieldNumber;
const int Room::kClearDisplayBufferFieldNumber;
const int Room::kMakerSettingsFieldNumber;
const int Room::kBackgroundsFieldNumber;
const int Room::kViewsFieldNumber;
const int Room::kInstancesFieldNumber;
const int Room::kTilesFieldNumber;
const int Room::kUsePhysicsFieldNumber;
const int Room::kPhyWorldTopFieldNumber;
const int Room::kPhyWorldLeftFieldNumber;
const int Room::kPhyWorldRightFieldNumber;
const int Room::kPhyWorldBottomFieldNumber;
const int Room::kPhyWorldXgravityFieldNumber;
const int Room::kPhyWorldYgravityFieldNumber;
const int Room::kPhyWorldPixelMetersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Room::Room()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_resources_2fRoom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Room)
}
Room::Room(const Room& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      backgrounds_(from.backgrounds_),
      views_(from.views_),
      instances_(from.instances_),
      tiles_(from.tiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  caption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_caption()) {
    caption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caption_);
  }
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.has_maker_settings()) {
    maker_settings_ = new ::buffers::resources::Room_MakerSettings(*from.maker_settings_);
  } else {
    maker_settings_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&phy_world_pixel_meters_) -
    reinterpret_cast<char*>(&width_)) + sizeof(phy_world_pixel_meters_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Room)
}

void Room::SharedCtor() {
  _cached_size_ = 0;
  caption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&maker_settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phy_world_pixel_meters_) -
      reinterpret_cast<char*>(&maker_settings_)) + sizeof(phy_world_pixel_meters_));
}

Room::~Room() {
  // @@protoc_insertion_point(destructor:buffers.resources.Room)
  SharedDtor();
}

void Room::SharedDtor() {
  caption_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete maker_settings_;
}

void Room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room::descriptor() {
  protobuf_resources_2fRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fRoom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Room& Room::default_instance() {
  protobuf_resources_2fRoom_2eproto::InitDefaults();
  return *internal_default_instance();
}

Room* Room::New(::google::protobuf::Arena* arena) const {
  Room* n = new Room;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Room::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  backgrounds_.Clear();
  views_.Clear();
  instances_.Clear();
  tiles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!caption_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*caption_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*code_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(maker_settings_ != NULL);
      maker_settings_->::buffers::resources::Room_MakerSettings::Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_) -
        reinterpret_cast<char*>(&width_)) + sizeof(color_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&isometric_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&phy_world_top_) -
        reinterpret_cast<char*>(&isometric_)) + sizeof(phy_world_top_));
  }
  if (cached_has_bits & 8323072u) {
    ::memset(&phy_world_left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&phy_world_pixel_meters_) -
        reinterpret_cast<char*>(&phy_world_left_)) + sizeof(phy_world_pixel_meters_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string caption = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->caption().data(), static_cast<int>(this->caption().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Room.caption");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vsnap = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_vsnap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vsnap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hsnap = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_hsnap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hsnap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isometric = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_isometric();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isometric_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool persistent = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_persistent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persistent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 color = 8 [(.buffers.gmx) = "colour"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_color = 9 [(.buffers.gmx) = "showcolour"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_show_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Room.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_views = 11 [(.buffers.gmx) = "enableViews"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_enable_views();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clear_view_background = 12 [(.buffers.gmx) = "clearViewBackground"];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_clear_view_background();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clear_view_background_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clear_display_buffer = 13 [(.buffers.gmx) = "clearDisplayBuffer"];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_clear_display_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clear_display_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Room.MakerSettings maker_settings = 14 [(.buffers.gmx) = "makerSettings"];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maker_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .buffers.resources.Room.RoomBackground backgrounds = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backgrounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .buffers.resources.Room.View views = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_views()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .buffers.resources.Room.Instance instances = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instances()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .buffers.resources.Room.Tile tiles = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_physics = 19 [(.buffers.gmx) = "PhysicsWorld"];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_use_physics();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_physics_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 phy_world_top = 20 [(.buffers.gmx) = "PhysicsWorldTop"];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_phy_world_top();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phy_world_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 phy_world_left = 21 [(.buffers.gmx) = "PhysicsWorldLeft"];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_phy_world_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phy_world_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 phy_world_right = 22 [(.buffers.gmx) = "PhysicsWorldRight"];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_phy_world_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phy_world_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 phy_world_bottom = 23 [(.buffers.gmx) = "PhysicsWorldBottom"];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_phy_world_bottom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phy_world_bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double phy_world_xgravity = 24 [(.buffers.gmx) = "PhysicsWorldGravityX"];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_phy_world_xgravity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phy_world_xgravity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double phy_world_ygravity = 25 [(.buffers.gmx) = "PhysicsWorldGravityY"];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {
          set_has_phy_world_ygravity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phy_world_ygravity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double phy_world_pixel_meters = 26 [(.buffers.gmx) = "PhysicsWorldPixToMeters"];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          set_has_phy_world_pixel_meters();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phy_world_pixel_meters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 speed = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Room)
  return false;
#undef DO_
}

void Room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string caption = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caption().data(), static_cast<int>(this->caption().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.caption");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->caption(), output);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // optional uint32 vsnap = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vsnap(), output);
  }

  // optional uint32 hsnap = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hsnap(), output);
  }

  // optional bool isometric = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isometric(), output);
  }

  // optional bool persistent = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->persistent(), output);
  }

  // optional int32 color = 8 [(.buffers.gmx) = "colour"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->color(), output);
  }

  // optional bool show_color = 9 [(.buffers.gmx) = "showcolour"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->show_color(), output);
  }

  // optional string code = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->code(), output);
  }

  // optional bool enable_views = 11 [(.buffers.gmx) = "enableViews"];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->enable_views(), output);
  }

  // optional bool clear_view_background = 12 [(.buffers.gmx) = "clearViewBackground"];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->clear_view_background(), output);
  }

  // optional bool clear_display_buffer = 13 [(.buffers.gmx) = "clearDisplayBuffer"];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->clear_display_buffer(), output);
  }

  // optional .buffers.resources.Room.MakerSettings maker_settings = 14 [(.buffers.gmx) = "makerSettings"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->maker_settings_, output);
  }

  // repeated .buffers.resources.Room.RoomBackground backgrounds = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->backgrounds_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->backgrounds(static_cast<int>(i)), output);
  }

  // repeated .buffers.resources.Room.View views = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->views_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->views(static_cast<int>(i)), output);
  }

  // repeated .buffers.resources.Room.Instance instances = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->instances_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->instances(static_cast<int>(i)), output);
  }

  // repeated .buffers.resources.Room.Tile tiles = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tiles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->tiles(static_cast<int>(i)), output);
  }

  // optional bool use_physics = 19 [(.buffers.gmx) = "PhysicsWorld"];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->use_physics(), output);
  }

  // optional int32 phy_world_top = 20 [(.buffers.gmx) = "PhysicsWorldTop"];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->phy_world_top(), output);
  }

  // optional int32 phy_world_left = 21 [(.buffers.gmx) = "PhysicsWorldLeft"];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->phy_world_left(), output);
  }

  // optional int32 phy_world_right = 22 [(.buffers.gmx) = "PhysicsWorldRight"];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->phy_world_right(), output);
  }

  // optional int32 phy_world_bottom = 23 [(.buffers.gmx) = "PhysicsWorldBottom"];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->phy_world_bottom(), output);
  }

  // optional double phy_world_xgravity = 24 [(.buffers.gmx) = "PhysicsWorldGravityX"];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->phy_world_xgravity(), output);
  }

  // optional double phy_world_ygravity = 25 [(.buffers.gmx) = "PhysicsWorldGravityY"];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->phy_world_ygravity(), output);
  }

  // optional double phy_world_pixel_meters = 26 [(.buffers.gmx) = "PhysicsWorldPixToMeters"];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->phy_world_pixel_meters(), output);
  }

  // optional uint32 speed = 27;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Room)
}

::google::protobuf::uint8* Room::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Room)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string caption = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caption().data(), static_cast<int>(this->caption().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.caption");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->caption(), target);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // optional uint32 vsnap = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vsnap(), target);
  }

  // optional uint32 hsnap = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hsnap(), target);
  }

  // optional bool isometric = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isometric(), target);
  }

  // optional bool persistent = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->persistent(), target);
  }

  // optional int32 color = 8 [(.buffers.gmx) = "colour"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->color(), target);
  }

  // optional bool show_color = 9 [(.buffers.gmx) = "showcolour"];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->show_color(), target);
  }

  // optional string code = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Room.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->code(), target);
  }

  // optional bool enable_views = 11 [(.buffers.gmx) = "enableViews"];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->enable_views(), target);
  }

  // optional bool clear_view_background = 12 [(.buffers.gmx) = "clearViewBackground"];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->clear_view_background(), target);
  }

  // optional bool clear_display_buffer = 13 [(.buffers.gmx) = "clearDisplayBuffer"];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->clear_display_buffer(), target);
  }

  // optional .buffers.resources.Room.MakerSettings maker_settings = 14 [(.buffers.gmx) = "makerSettings"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->maker_settings_, deterministic, target);
  }

  // repeated .buffers.resources.Room.RoomBackground backgrounds = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->backgrounds_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->backgrounds(static_cast<int>(i)), deterministic, target);
  }

  // repeated .buffers.resources.Room.View views = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->views_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->views(static_cast<int>(i)), deterministic, target);
  }

  // repeated .buffers.resources.Room.Instance instances = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->instances_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->instances(static_cast<int>(i)), deterministic, target);
  }

  // repeated .buffers.resources.Room.Tile tiles = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tiles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->tiles(static_cast<int>(i)), deterministic, target);
  }

  // optional bool use_physics = 19 [(.buffers.gmx) = "PhysicsWorld"];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->use_physics(), target);
  }

  // optional int32 phy_world_top = 20 [(.buffers.gmx) = "PhysicsWorldTop"];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->phy_world_top(), target);
  }

  // optional int32 phy_world_left = 21 [(.buffers.gmx) = "PhysicsWorldLeft"];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->phy_world_left(), target);
  }

  // optional int32 phy_world_right = 22 [(.buffers.gmx) = "PhysicsWorldRight"];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->phy_world_right(), target);
  }

  // optional int32 phy_world_bottom = 23 [(.buffers.gmx) = "PhysicsWorldBottom"];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->phy_world_bottom(), target);
  }

  // optional double phy_world_xgravity = 24 [(.buffers.gmx) = "PhysicsWorldGravityX"];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->phy_world_xgravity(), target);
  }

  // optional double phy_world_ygravity = 25 [(.buffers.gmx) = "PhysicsWorldGravityY"];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->phy_world_ygravity(), target);
  }

  // optional double phy_world_pixel_meters = 26 [(.buffers.gmx) = "PhysicsWorldPixToMeters"];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->phy_world_pixel_meters(), target);
  }

  // optional uint32 speed = 27;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Room)
  return target;
}

size_t Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Room)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .buffers.resources.Room.RoomBackground backgrounds = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->backgrounds_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backgrounds(static_cast<int>(i)));
    }
  }

  // repeated .buffers.resources.Room.View views = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->views_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->views(static_cast<int>(i)));
    }
  }

  // repeated .buffers.resources.Room.Instance instances = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->instances_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instances(static_cast<int>(i)));
    }
  }

  // repeated .buffers.resources.Room.Tile tiles = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->tiles_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tiles(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string caption = 1;
    if (has_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caption());
    }

    // optional string code = 10;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional .buffers.resources.Room.MakerSettings maker_settings = 14 [(.buffers.gmx) = "makerSettings"];
    if (has_maker_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->maker_settings_);
    }

    // optional uint32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 vsnap = 4;
    if (has_vsnap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vsnap());
    }

    // optional uint32 hsnap = 5;
    if (has_hsnap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hsnap());
    }

    // optional int32 color = 8 [(.buffers.gmx) = "colour"];
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool isometric = 6;
    if (has_isometric()) {
      total_size += 1 + 1;
    }

    // optional bool persistent = 7;
    if (has_persistent()) {
      total_size += 1 + 1;
    }

    // optional bool show_color = 9 [(.buffers.gmx) = "showcolour"];
    if (has_show_color()) {
      total_size += 1 + 1;
    }

    // optional bool enable_views = 11 [(.buffers.gmx) = "enableViews"];
    if (has_enable_views()) {
      total_size += 1 + 1;
    }

    // optional bool clear_view_background = 12 [(.buffers.gmx) = "clearViewBackground"];
    if (has_clear_view_background()) {
      total_size += 1 + 1;
    }

    // optional bool clear_display_buffer = 13 [(.buffers.gmx) = "clearDisplayBuffer"];
    if (has_clear_display_buffer()) {
      total_size += 1 + 1;
    }

    // optional bool use_physics = 19 [(.buffers.gmx) = "PhysicsWorld"];
    if (has_use_physics()) {
      total_size += 2 + 1;
    }

    // optional int32 phy_world_top = 20 [(.buffers.gmx) = "PhysicsWorldTop"];
    if (has_phy_world_top()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_world_top());
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional int32 phy_world_left = 21 [(.buffers.gmx) = "PhysicsWorldLeft"];
    if (has_phy_world_left()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_world_left());
    }

    // optional int32 phy_world_right = 22 [(.buffers.gmx) = "PhysicsWorldRight"];
    if (has_phy_world_right()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_world_right());
    }

    // optional double phy_world_xgravity = 24 [(.buffers.gmx) = "PhysicsWorldGravityX"];
    if (has_phy_world_xgravity()) {
      total_size += 2 + 8;
    }

    // optional double phy_world_ygravity = 25 [(.buffers.gmx) = "PhysicsWorldGravityY"];
    if (has_phy_world_ygravity()) {
      total_size += 2 + 8;
    }

    // optional int32 phy_world_bottom = 23 [(.buffers.gmx) = "PhysicsWorldBottom"];
    if (has_phy_world_bottom()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_world_bottom());
    }

    // optional uint32 speed = 27;
    if (has_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // optional double phy_world_pixel_meters = 26 [(.buffers.gmx) = "PhysicsWorldPixToMeters"];
    if (has_phy_world_pixel_meters()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Room)
  GOOGLE_DCHECK_NE(&from, this);
  const Room* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Room>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Room)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Room)
    MergeFrom(*source);
  }
}

void Room::MergeFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Room)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  backgrounds_.MergeFrom(from.backgrounds_);
  views_.MergeFrom(from.views_);
  instances_.MergeFrom(from.instances_);
  tiles_.MergeFrom(from.tiles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_caption();
      caption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caption_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_maker_settings()->::buffers::resources::Room_MakerSettings::MergeFrom(from.maker_settings());
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      vsnap_ = from.vsnap_;
    }
    if (cached_has_bits & 0x00000040u) {
      hsnap_ = from.hsnap_;
    }
    if (cached_has_bits & 0x00000080u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      isometric_ = from.isometric_;
    }
    if (cached_has_bits & 0x00000200u) {
      persistent_ = from.persistent_;
    }
    if (cached_has_bits & 0x00000400u) {
      show_color_ = from.show_color_;
    }
    if (cached_has_bits & 0x00000800u) {
      enable_views_ = from.enable_views_;
    }
    if (cached_has_bits & 0x00001000u) {
      clear_view_background_ = from.clear_view_background_;
    }
    if (cached_has_bits & 0x00002000u) {
      clear_display_buffer_ = from.clear_display_buffer_;
    }
    if (cached_has_bits & 0x00004000u) {
      use_physics_ = from.use_physics_;
    }
    if (cached_has_bits & 0x00008000u) {
      phy_world_top_ = from.phy_world_top_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      phy_world_left_ = from.phy_world_left_;
    }
    if (cached_has_bits & 0x00020000u) {
      phy_world_right_ = from.phy_world_right_;
    }
    if (cached_has_bits & 0x00040000u) {
      phy_world_xgravity_ = from.phy_world_xgravity_;
    }
    if (cached_has_bits & 0x00080000u) {
      phy_world_ygravity_ = from.phy_world_ygravity_;
    }
    if (cached_has_bits & 0x00100000u) {
      phy_world_bottom_ = from.phy_world_bottom_;
    }
    if (cached_has_bits & 0x00200000u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00400000u) {
      phy_world_pixel_meters_ = from.phy_world_pixel_meters_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Room::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room::CopyFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room::IsInitialized() const {
  return true;
}

void Room::Swap(Room* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Room::InternalSwap(Room* other) {
  using std::swap;
  backgrounds_.InternalSwap(&other->backgrounds_);
  views_.InternalSwap(&other->views_);
  instances_.InternalSwap(&other->instances_);
  tiles_.InternalSwap(&other->tiles_);
  caption_.Swap(&other->caption_);
  code_.Swap(&other->code_);
  swap(maker_settings_, other->maker_settings_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(vsnap_, other->vsnap_);
  swap(hsnap_, other->hsnap_);
  swap(color_, other->color_);
  swap(isometric_, other->isometric_);
  swap(persistent_, other->persistent_);
  swap(show_color_, other->show_color_);
  swap(enable_views_, other->enable_views_);
  swap(clear_view_background_, other->clear_view_background_);
  swap(clear_display_buffer_, other->clear_display_buffer_);
  swap(use_physics_, other->use_physics_);
  swap(phy_world_top_, other->phy_world_top_);
  swap(phy_world_left_, other->phy_world_left_);
  swap(phy_world_right_, other->phy_world_right_);
  swap(phy_world_xgravity_, other->phy_world_xgravity_);
  swap(phy_world_ygravity_, other->phy_world_ygravity_);
  swap(phy_world_bottom_, other->phy_world_bottom_);
  swap(speed_, other->speed_);
  swap(phy_world_pixel_meters_, other->phy_world_pixel_meters_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Room::GetMetadata() const {
  protobuf_resources_2fRoom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fRoom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Room

// optional string caption = 1;
bool Room::has_caption() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Room::set_has_caption() {
  _has_bits_[0] |= 0x00000001u;
}
void Room::clear_has_caption() {
  _has_bits_[0] &= ~0x00000001u;
}
void Room::clear_caption() {
  caption_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caption();
}
const ::std::string& Room::caption() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.caption)
  return caption_.GetNoArena();
}
void Room::set_caption(const ::std::string& value) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.caption)
}
#if LANG_CXX11
void Room::set_caption(::std::string&& value) {
  set_has_caption();
  caption_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.caption)
}
#endif
void Room::set_caption(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.caption)
}
void Room::set_caption(const char* value, size_t size) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.caption)
}
::std::string* Room::mutable_caption() {
  set_has_caption();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.caption)
  return caption_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Room::release_caption() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.caption)
  clear_has_caption();
  return caption_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Room::set_allocated_caption(::std::string* caption) {
  if (caption != NULL) {
    set_has_caption();
  } else {
    clear_has_caption();
  }
  caption_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caption);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.caption)
}

// optional uint32 width = 2;
bool Room::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Room::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void Room::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void Room::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 Room::width() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.width)
  return width_;
}
void Room::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.width)
}

// optional uint32 height = 3;
bool Room::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Room::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
void Room::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void Room::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 Room::height() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.height)
  return height_;
}
void Room::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.height)
}

// optional uint32 vsnap = 4;
bool Room::has_vsnap() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Room::set_has_vsnap() {
  _has_bits_[0] |= 0x00000020u;
}
void Room::clear_has_vsnap() {
  _has_bits_[0] &= ~0x00000020u;
}
void Room::clear_vsnap() {
  vsnap_ = 0u;
  clear_has_vsnap();
}
::google::protobuf::uint32 Room::vsnap() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.vsnap)
  return vsnap_;
}
void Room::set_vsnap(::google::protobuf::uint32 value) {
  set_has_vsnap();
  vsnap_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.vsnap)
}

// optional uint32 hsnap = 5;
bool Room::has_hsnap() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Room::set_has_hsnap() {
  _has_bits_[0] |= 0x00000040u;
}
void Room::clear_has_hsnap() {
  _has_bits_[0] &= ~0x00000040u;
}
void Room::clear_hsnap() {
  hsnap_ = 0u;
  clear_has_hsnap();
}
::google::protobuf::uint32 Room::hsnap() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.hsnap)
  return hsnap_;
}
void Room::set_hsnap(::google::protobuf::uint32 value) {
  set_has_hsnap();
  hsnap_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.hsnap)
}

// optional bool isometric = 6;
bool Room::has_isometric() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Room::set_has_isometric() {
  _has_bits_[0] |= 0x00000100u;
}
void Room::clear_has_isometric() {
  _has_bits_[0] &= ~0x00000100u;
}
void Room::clear_isometric() {
  isometric_ = false;
  clear_has_isometric();
}
bool Room::isometric() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.isometric)
  return isometric_;
}
void Room::set_isometric(bool value) {
  set_has_isometric();
  isometric_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.isometric)
}

// optional uint32 speed = 27;
bool Room::has_speed() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Room::set_has_speed() {
  _has_bits_[0] |= 0x00200000u;
}
void Room::clear_has_speed() {
  _has_bits_[0] &= ~0x00200000u;
}
void Room::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
::google::protobuf::uint32 Room::speed() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.speed)
  return speed_;
}
void Room::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.speed)
}

// optional bool persistent = 7;
bool Room::has_persistent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Room::set_has_persistent() {
  _has_bits_[0] |= 0x00000200u;
}
void Room::clear_has_persistent() {
  _has_bits_[0] &= ~0x00000200u;
}
void Room::clear_persistent() {
  persistent_ = false;
  clear_has_persistent();
}
bool Room::persistent() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.persistent)
  return persistent_;
}
void Room::set_persistent(bool value) {
  set_has_persistent();
  persistent_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.persistent)
}

// optional int32 color = 8 [(.buffers.gmx) = "colour"];
bool Room::has_color() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Room::set_has_color() {
  _has_bits_[0] |= 0x00000080u;
}
void Room::clear_has_color() {
  _has_bits_[0] &= ~0x00000080u;
}
void Room::clear_color() {
  color_ = 0;
  clear_has_color();
}
::google::protobuf::int32 Room::color() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.color)
  return color_;
}
void Room::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.color)
}

// optional bool show_color = 9 [(.buffers.gmx) = "showcolour"];
bool Room::has_show_color() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Room::set_has_show_color() {
  _has_bits_[0] |= 0x00000400u;
}
void Room::clear_has_show_color() {
  _has_bits_[0] &= ~0x00000400u;
}
void Room::clear_show_color() {
  show_color_ = false;
  clear_has_show_color();
}
bool Room::show_color() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.show_color)
  return show_color_;
}
void Room::set_show_color(bool value) {
  set_has_show_color();
  show_color_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.show_color)
}

// optional string code = 10;
bool Room::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Room::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void Room::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void Room::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
const ::std::string& Room::code() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.code)
  return code_.GetNoArena();
}
void Room::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.code)
}
#if LANG_CXX11
void Room::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.code)
}
#endif
void Room::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.code)
}
void Room::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.code)
}
::std::string* Room::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Room::release_code() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Room::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.code)
}

// optional bool enable_views = 11 [(.buffers.gmx) = "enableViews"];
bool Room::has_enable_views() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Room::set_has_enable_views() {
  _has_bits_[0] |= 0x00000800u;
}
void Room::clear_has_enable_views() {
  _has_bits_[0] &= ~0x00000800u;
}
void Room::clear_enable_views() {
  enable_views_ = false;
  clear_has_enable_views();
}
bool Room::enable_views() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.enable_views)
  return enable_views_;
}
void Room::set_enable_views(bool value) {
  set_has_enable_views();
  enable_views_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.enable_views)
}

// optional bool clear_view_background = 12 [(.buffers.gmx) = "clearViewBackground"];
bool Room::has_clear_view_background() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Room::set_has_clear_view_background() {
  _has_bits_[0] |= 0x00001000u;
}
void Room::clear_has_clear_view_background() {
  _has_bits_[0] &= ~0x00001000u;
}
void Room::clear_clear_view_background() {
  clear_view_background_ = false;
  clear_has_clear_view_background();
}
bool Room::clear_view_background() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.clear_view_background)
  return clear_view_background_;
}
void Room::set_clear_view_background(bool value) {
  set_has_clear_view_background();
  clear_view_background_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.clear_view_background)
}

// optional bool clear_display_buffer = 13 [(.buffers.gmx) = "clearDisplayBuffer"];
bool Room::has_clear_display_buffer() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Room::set_has_clear_display_buffer() {
  _has_bits_[0] |= 0x00002000u;
}
void Room::clear_has_clear_display_buffer() {
  _has_bits_[0] &= ~0x00002000u;
}
void Room::clear_clear_display_buffer() {
  clear_display_buffer_ = false;
  clear_has_clear_display_buffer();
}
bool Room::clear_display_buffer() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.clear_display_buffer)
  return clear_display_buffer_;
}
void Room::set_clear_display_buffer(bool value) {
  set_has_clear_display_buffer();
  clear_display_buffer_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.clear_display_buffer)
}

// optional .buffers.resources.Room.MakerSettings maker_settings = 14 [(.buffers.gmx) = "makerSettings"];
bool Room::has_maker_settings() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Room::set_has_maker_settings() {
  _has_bits_[0] |= 0x00000004u;
}
void Room::clear_has_maker_settings() {
  _has_bits_[0] &= ~0x00000004u;
}
void Room::clear_maker_settings() {
  if (maker_settings_ != NULL) maker_settings_->::buffers::resources::Room_MakerSettings::Clear();
  clear_has_maker_settings();
}
const ::buffers::resources::Room_MakerSettings& Room::maker_settings() const {
  const ::buffers::resources::Room_MakerSettings* p = maker_settings_;
  // @@protoc_insertion_point(field_get:buffers.resources.Room.maker_settings)
  return p != NULL ? *p : *reinterpret_cast<const ::buffers::resources::Room_MakerSettings*>(
      &::buffers::resources::_Room_MakerSettings_default_instance_);
}
::buffers::resources::Room_MakerSettings* Room::mutable_maker_settings() {
  set_has_maker_settings();
  if (maker_settings_ == NULL) {
    maker_settings_ = new ::buffers::resources::Room_MakerSettings;
  }
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.maker_settings)
  return maker_settings_;
}
::buffers::resources::Room_MakerSettings* Room::release_maker_settings() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.maker_settings)
  clear_has_maker_settings();
  ::buffers::resources::Room_MakerSettings* temp = maker_settings_;
  maker_settings_ = NULL;
  return temp;
}
void Room::set_allocated_maker_settings(::buffers::resources::Room_MakerSettings* maker_settings) {
  delete maker_settings_;
  maker_settings_ = maker_settings;
  if (maker_settings) {
    set_has_maker_settings();
  } else {
    clear_has_maker_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.maker_settings)
}

// repeated .buffers.resources.Room.RoomBackground backgrounds = 15;
int Room::backgrounds_size() const {
  return backgrounds_.size();
}
void Room::clear_backgrounds() {
  backgrounds_.Clear();
}
const ::buffers::resources::Room_RoomBackground& Room::backgrounds(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.backgrounds)
  return backgrounds_.Get(index);
}
::buffers::resources::Room_RoomBackground* Room::mutable_backgrounds(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.backgrounds)
  return backgrounds_.Mutable(index);
}
::buffers::resources::Room_RoomBackground* Room::add_backgrounds() {
  // @@protoc_insertion_point(field_add:buffers.resources.Room.backgrounds)
  return backgrounds_.Add();
}
::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_RoomBackground >*
Room::mutable_backgrounds() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Room.backgrounds)
  return &backgrounds_;
}
const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_RoomBackground >&
Room::backgrounds() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Room.backgrounds)
  return backgrounds_;
}

// repeated .buffers.resources.Room.View views = 16;
int Room::views_size() const {
  return views_.size();
}
void Room::clear_views() {
  views_.Clear();
}
const ::buffers::resources::Room_View& Room::views(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.views)
  return views_.Get(index);
}
::buffers::resources::Room_View* Room::mutable_views(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.views)
  return views_.Mutable(index);
}
::buffers::resources::Room_View* Room::add_views() {
  // @@protoc_insertion_point(field_add:buffers.resources.Room.views)
  return views_.Add();
}
::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_View >*
Room::mutable_views() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Room.views)
  return &views_;
}
const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_View >&
Room::views() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Room.views)
  return views_;
}

// repeated .buffers.resources.Room.Instance instances = 17;
int Room::instances_size() const {
  return instances_.size();
}
void Room::clear_instances() {
  instances_.Clear();
}
const ::buffers::resources::Room_Instance& Room::instances(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.instances)
  return instances_.Get(index);
}
::buffers::resources::Room_Instance* Room::mutable_instances(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.instances)
  return instances_.Mutable(index);
}
::buffers::resources::Room_Instance* Room::add_instances() {
  // @@protoc_insertion_point(field_add:buffers.resources.Room.instances)
  return instances_.Add();
}
::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_Instance >*
Room::mutable_instances() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Room.instances)
  return &instances_;
}
const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_Instance >&
Room::instances() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Room.instances)
  return instances_;
}

// repeated .buffers.resources.Room.Tile tiles = 18;
int Room::tiles_size() const {
  return tiles_.size();
}
void Room::clear_tiles() {
  tiles_.Clear();
}
const ::buffers::resources::Room_Tile& Room::tiles(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.tiles)
  return tiles_.Get(index);
}
::buffers::resources::Room_Tile* Room::mutable_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.tiles)
  return tiles_.Mutable(index);
}
::buffers::resources::Room_Tile* Room::add_tiles() {
  // @@protoc_insertion_point(field_add:buffers.resources.Room.tiles)
  return tiles_.Add();
}
::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_Tile >*
Room::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Room.tiles)
  return &tiles_;
}
const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_Tile >&
Room::tiles() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Room.tiles)
  return tiles_;
}

// optional bool use_physics = 19 [(.buffers.gmx) = "PhysicsWorld"];
bool Room::has_use_physics() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Room::set_has_use_physics() {
  _has_bits_[0] |= 0x00004000u;
}
void Room::clear_has_use_physics() {
  _has_bits_[0] &= ~0x00004000u;
}
void Room::clear_use_physics() {
  use_physics_ = false;
  clear_has_use_physics();
}
bool Room::use_physics() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.use_physics)
  return use_physics_;
}
void Room::set_use_physics(bool value) {
  set_has_use_physics();
  use_physics_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.use_physics)
}

// optional int32 phy_world_top = 20 [(.buffers.gmx) = "PhysicsWorldTop"];
bool Room::has_phy_world_top() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Room::set_has_phy_world_top() {
  _has_bits_[0] |= 0x00008000u;
}
void Room::clear_has_phy_world_top() {
  _has_bits_[0] &= ~0x00008000u;
}
void Room::clear_phy_world_top() {
  phy_world_top_ = 0;
  clear_has_phy_world_top();
}
::google::protobuf::int32 Room::phy_world_top() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.phy_world_top)
  return phy_world_top_;
}
void Room::set_phy_world_top(::google::protobuf::int32 value) {
  set_has_phy_world_top();
  phy_world_top_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.phy_world_top)
}

// optional int32 phy_world_left = 21 [(.buffers.gmx) = "PhysicsWorldLeft"];
bool Room::has_phy_world_left() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Room::set_has_phy_world_left() {
  _has_bits_[0] |= 0x00010000u;
}
void Room::clear_has_phy_world_left() {
  _has_bits_[0] &= ~0x00010000u;
}
void Room::clear_phy_world_left() {
  phy_world_left_ = 0;
  clear_has_phy_world_left();
}
::google::protobuf::int32 Room::phy_world_left() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.phy_world_left)
  return phy_world_left_;
}
void Room::set_phy_world_left(::google::protobuf::int32 value) {
  set_has_phy_world_left();
  phy_world_left_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.phy_world_left)
}

// optional int32 phy_world_right = 22 [(.buffers.gmx) = "PhysicsWorldRight"];
bool Room::has_phy_world_right() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Room::set_has_phy_world_right() {
  _has_bits_[0] |= 0x00020000u;
}
void Room::clear_has_phy_world_right() {
  _has_bits_[0] &= ~0x00020000u;
}
void Room::clear_phy_world_right() {
  phy_world_right_ = 0;
  clear_has_phy_world_right();
}
::google::protobuf::int32 Room::phy_world_right() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.phy_world_right)
  return phy_world_right_;
}
void Room::set_phy_world_right(::google::protobuf::int32 value) {
  set_has_phy_world_right();
  phy_world_right_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.phy_world_right)
}

// optional int32 phy_world_bottom = 23 [(.buffers.gmx) = "PhysicsWorldBottom"];
bool Room::has_phy_world_bottom() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Room::set_has_phy_world_bottom() {
  _has_bits_[0] |= 0x00100000u;
}
void Room::clear_has_phy_world_bottom() {
  _has_bits_[0] &= ~0x00100000u;
}
void Room::clear_phy_world_bottom() {
  phy_world_bottom_ = 0;
  clear_has_phy_world_bottom();
}
::google::protobuf::int32 Room::phy_world_bottom() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.phy_world_bottom)
  return phy_world_bottom_;
}
void Room::set_phy_world_bottom(::google::protobuf::int32 value) {
  set_has_phy_world_bottom();
  phy_world_bottom_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.phy_world_bottom)
}

// optional double phy_world_xgravity = 24 [(.buffers.gmx) = "PhysicsWorldGravityX"];
bool Room::has_phy_world_xgravity() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Room::set_has_phy_world_xgravity() {
  _has_bits_[0] |= 0x00040000u;
}
void Room::clear_has_phy_world_xgravity() {
  _has_bits_[0] &= ~0x00040000u;
}
void Room::clear_phy_world_xgravity() {
  phy_world_xgravity_ = 0;
  clear_has_phy_world_xgravity();
}
double Room::phy_world_xgravity() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.phy_world_xgravity)
  return phy_world_xgravity_;
}
void Room::set_phy_world_xgravity(double value) {
  set_has_phy_world_xgravity();
  phy_world_xgravity_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.phy_world_xgravity)
}

// optional double phy_world_ygravity = 25 [(.buffers.gmx) = "PhysicsWorldGravityY"];
bool Room::has_phy_world_ygravity() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Room::set_has_phy_world_ygravity() {
  _has_bits_[0] |= 0x00080000u;
}
void Room::clear_has_phy_world_ygravity() {
  _has_bits_[0] &= ~0x00080000u;
}
void Room::clear_phy_world_ygravity() {
  phy_world_ygravity_ = 0;
  clear_has_phy_world_ygravity();
}
double Room::phy_world_ygravity() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.phy_world_ygravity)
  return phy_world_ygravity_;
}
void Room::set_phy_world_ygravity(double value) {
  set_has_phy_world_ygravity();
  phy_world_ygravity_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.phy_world_ygravity)
}

// optional double phy_world_pixel_meters = 26 [(.buffers.gmx) = "PhysicsWorldPixToMeters"];
bool Room::has_phy_world_pixel_meters() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Room::set_has_phy_world_pixel_meters() {
  _has_bits_[0] |= 0x00400000u;
}
void Room::clear_has_phy_world_pixel_meters() {
  _has_bits_[0] &= ~0x00400000u;
}
void Room::clear_phy_world_pixel_meters() {
  phy_world_pixel_meters_ = 0;
  clear_has_phy_world_pixel_meters();
}
double Room::phy_world_pixel_meters() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.phy_world_pixel_meters)
  return phy_world_pixel_meters_;
}
void Room::set_phy_world_pixel_meters(double value) {
  set_has_phy_world_pixel_meters();
  phy_world_pixel_meters_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.phy_world_pixel_meters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace resources
}  // namespace buffers

// @@protoc_insertion_point(global_scope)
