// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resources/Event.proto

#ifndef PROTOBUF_resources_2fEvent_2eproto__INCLUDED
#define PROTOBUF_resources_2fEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)
namespace buffers {
namespace resources {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class Argument;
class ArgumentDefaultTypeInternal;
extern ArgumentDefaultTypeInternal _Argument_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
}  // namespace resources
}  // namespace buffers

namespace buffers {
namespace resources {

namespace protobuf_resources_2fEvent_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_resources_2fEvent_2eproto

// ===================================================================

class Argument : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.Argument) */ {
 public:
  Argument();
  virtual ~Argument();

  Argument(const Argument& from);

  inline Argument& operator=(const Argument& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Argument(Argument&& from) noexcept
    : Argument() {
    *this = ::std::move(from);
  }

  inline Argument& operator=(Argument&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Argument& default_instance();

  static inline const Argument* internal_default_instance() {
    return reinterpret_cast<const Argument*>(
               &_Argument_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Argument* other);
  friend void swap(Argument& a, Argument& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Argument* New() const PROTOBUF_FINAL { return New(NULL); }

  Argument* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Argument& from);
  void MergeFrom(const Argument& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Argument* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string string = 2;
  bool has_string() const;
  void clear_string();
  static const int kStringFieldNumber = 2;
  const ::std::string& string() const;
  void set_string(const ::std::string& value);
  #if LANG_CXX11
  void set_string(::std::string&& value);
  #endif
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  ::std::string* mutable_string();
  ::std::string* release_string();
  void set_allocated_string(::std::string* string);

  // optional int32 kind = 1;
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  ::google::protobuf::int32 kind() const;
  void set_kind(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:buffers.resources.Argument)
 private:
  void set_has_kind();
  void clear_has_kind();
  void set_has_string();
  void clear_has_string();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr string_;
  ::google::protobuf::int32 kind_;
  friend struct protobuf_resources_2fEvent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Action : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.Action) */ {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Action* other);
  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const PROTOBUF_FINAL { return New(NULL); }

  Action* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Action* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .buffers.resources.Argument arguments = 13 [(.buffers.gmx) = "arguments/argument"];
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 13;
  const ::buffers::resources::Argument& arguments(int index) const;
  ::buffers::resources::Argument* mutable_arguments(int index);
  ::buffers::resources::Argument* add_arguments();
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Argument >*
      mutable_arguments();
  const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Argument >&
      arguments() const;

  // optional string function_name = 8 [(.buffers.gmx) = "functionname"];
  bool has_function_name() const;
  void clear_function_name();
  static const int kFunctionNameFieldNumber = 8;
  const ::std::string& function_name() const;
  void set_function_name(const ::std::string& value);
  #if LANG_CXX11
  void set_function_name(::std::string&& value);
  #endif
  void set_function_name(const char* value);
  void set_function_name(const char* value, size_t size);
  ::std::string* mutable_function_name();
  ::std::string* release_function_name();
  void set_allocated_function_name(::std::string* function_name);

  // optional string code_string = 9 [(.buffers.gmx) = "codestring"];
  bool has_code_string() const;
  void clear_code_string();
  static const int kCodeStringFieldNumber = 9;
  const ::std::string& code_string() const;
  void set_code_string(const ::std::string& value);
  #if LANG_CXX11
  void set_code_string(::std::string&& value);
  #endif
  void set_code_string(const char* value);
  void set_code_string(const char* value, size_t size);
  ::std::string* mutable_code_string();
  ::std::string* release_code_string();
  void set_allocated_code_string(::std::string* code_string);

  // optional string who_name = 10 [(.buffers.gmx) = "whoName"];
  bool has_who_name() const;
  void clear_who_name();
  static const int kWhoNameFieldNumber = 10;
  const ::std::string& who_name() const;
  void set_who_name(const ::std::string& value);
  #if LANG_CXX11
  void set_who_name(::std::string&& value);
  #endif
  void set_who_name(const char* value);
  void set_who_name(const char* value, size_t size);
  ::std::string* mutable_who_name();
  ::std::string* release_who_name();
  void set_allocated_who_name(::std::string* who_name);

  // optional int32 libid = 1;
  bool has_libid() const;
  void clear_libid();
  static const int kLibidFieldNumber = 1;
  ::google::protobuf::int32 libid() const;
  void set_libid(::google::protobuf::int32 value);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 kind = 3;
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 3;
  ::google::protobuf::int32 kind() const;
  void set_kind(::google::protobuf::int32 value);

  // optional int32 use_apply_to = 6 [(.buffers.gmx) = "useapplyto"];
  bool has_use_apply_to() const;
  void clear_use_apply_to();
  static const int kUseApplyToFieldNumber = 6;
  ::google::protobuf::int32 use_apply_to() const;
  void set_use_apply_to(::google::protobuf::int32 value);

  // optional int32 exe_type = 7 [(.buffers.gmx) = "exetype"];
  bool has_exe_type() const;
  void clear_exe_type();
  static const int kExeTypeFieldNumber = 7;
  ::google::protobuf::int32 exe_type() const;
  void set_exe_type(::google::protobuf::int32 value);

  // optional bool use_relative = 4 [(.buffers.gmx) = "userelative"];
  bool has_use_relative() const;
  void clear_use_relative();
  static const int kUseRelativeFieldNumber = 4;
  bool use_relative() const;
  void set_use_relative(bool value);

  // optional bool is_question = 5 [(.buffers.gmx) = "isquestion"];
  bool has_is_question() const;
  void clear_is_question();
  static const int kIsQuestionFieldNumber = 5;
  bool is_question() const;
  void set_is_question(bool value);

  // optional bool relative = 11;
  bool has_relative() const;
  void clear_relative();
  static const int kRelativeFieldNumber = 11;
  bool relative() const;
  void set_relative(bool value);

  // optional bool is_not = 12 [(.buffers.gmx) = "isnot"];
  bool has_is_not() const;
  void clear_is_not();
  static const int kIsNotFieldNumber = 12;
  bool is_not() const;
  void set_is_not(bool value);

  // @@protoc_insertion_point(class_scope:buffers.resources.Action)
 private:
  void set_has_libid();
  void clear_has_libid();
  void set_has_id();
  void clear_has_id();
  void set_has_kind();
  void clear_has_kind();
  void set_has_use_relative();
  void clear_has_use_relative();
  void set_has_is_question();
  void clear_has_is_question();
  void set_has_use_apply_to();
  void clear_has_use_apply_to();
  void set_has_exe_type();
  void clear_has_exe_type();
  void set_has_function_name();
  void clear_has_function_name();
  void set_has_code_string();
  void clear_has_code_string();
  void set_has_who_name();
  void clear_has_who_name();
  void set_has_relative();
  void clear_has_relative();
  void set_has_is_not();
  void clear_has_is_not();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Argument > arguments_;
  ::google::protobuf::internal::ArenaStringPtr function_name_;
  ::google::protobuf::internal::ArenaStringPtr code_string_;
  ::google::protobuf::internal::ArenaStringPtr who_name_;
  ::google::protobuf::int32 libid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 kind_;
  ::google::protobuf::int32 use_apply_to_;
  ::google::protobuf::int32 exe_type_;
  bool use_relative_;
  bool is_question_;
  bool relative_;
  bool is_not_;
  friend struct protobuf_resources_2fEvent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const PROTOBUF_FINAL { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .buffers.resources.Action action = 4;
  int action_size() const;
  void clear_action();
  static const int kActionFieldNumber = 4;
  const ::buffers::resources::Action& action(int index) const;
  ::buffers::resources::Action* mutable_action(int index);
  ::buffers::resources::Action* add_action();
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Action >*
      mutable_action();
  const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Action >&
      action() const;

  // optional string name = 3 [(.buffers.gmx) = "ename"];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 type = 1 [(.buffers.gmx) = "eventtype"];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 number = 2 [(.buffers.gmx) = "enumb"];
  bool has_number() const;
  void clear_number();
  static const int kNumberFieldNumber = 2;
  ::google::protobuf::int32 number() const;
  void set_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:buffers.resources.Event)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_number();
  void clear_has_number();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Action > action_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 number_;
  friend struct protobuf_resources_2fEvent_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Argument

// optional int32 kind = 1;
inline bool Argument::has_kind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Argument::set_has_kind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Argument::clear_has_kind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Argument::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::google::protobuf::int32 Argument::kind() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Argument.kind)
  return kind_;
}
inline void Argument::set_kind(::google::protobuf::int32 value) {
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.kind)
}

// optional string string = 2;
inline bool Argument::has_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Argument::set_has_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Argument::clear_has_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Argument::clear_string() {
  string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_string();
}
inline const ::std::string& Argument::string() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Argument.string)
  return string_.GetNoArena();
}
inline void Argument::set_string(const ::std::string& value) {
  set_has_string();
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Argument.string)
}
#if LANG_CXX11
inline void Argument::set_string(::std::string&& value) {
  set_has_string();
  string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Argument.string)
}
#endif
inline void Argument::set_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_string();
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Argument.string)
}
inline void Argument::set_string(const char* value, size_t size) {
  set_has_string();
  string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Argument.string)
}
inline ::std::string* Argument::mutable_string() {
  set_has_string();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Argument.string)
  return string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Argument::release_string() {
  // @@protoc_insertion_point(field_release:buffers.resources.Argument.string)
  clear_has_string();
  return string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Argument::set_allocated_string(::std::string* string) {
  if (string != NULL) {
    set_has_string();
  } else {
    clear_has_string();
  }
  string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Argument.string)
}

// -------------------------------------------------------------------

// Action

// optional int32 libid = 1;
inline bool Action::has_libid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Action::set_has_libid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Action::clear_has_libid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Action::clear_libid() {
  libid_ = 0;
  clear_has_libid();
}
inline ::google::protobuf::int32 Action::libid() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.libid)
  return libid_;
}
inline void Action::set_libid(::google::protobuf::int32 value) {
  set_has_libid();
  libid_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.libid)
}

// optional int32 id = 2;
inline bool Action::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Action::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Action::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Action::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Action::id() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.id)
  return id_;
}
inline void Action::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.id)
}

// optional int32 kind = 3;
inline bool Action::has_kind() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Action::set_has_kind() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Action::clear_has_kind() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Action::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::google::protobuf::int32 Action::kind() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.kind)
  return kind_;
}
inline void Action::set_kind(::google::protobuf::int32 value) {
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.kind)
}

// optional bool use_relative = 4 [(.buffers.gmx) = "userelative"];
inline bool Action::has_use_relative() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Action::set_has_use_relative() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Action::clear_has_use_relative() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Action::clear_use_relative() {
  use_relative_ = false;
  clear_has_use_relative();
}
inline bool Action::use_relative() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.use_relative)
  return use_relative_;
}
inline void Action::set_use_relative(bool value) {
  set_has_use_relative();
  use_relative_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.use_relative)
}

// optional bool is_question = 5 [(.buffers.gmx) = "isquestion"];
inline bool Action::has_is_question() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Action::set_has_is_question() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Action::clear_has_is_question() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Action::clear_is_question() {
  is_question_ = false;
  clear_has_is_question();
}
inline bool Action::is_question() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.is_question)
  return is_question_;
}
inline void Action::set_is_question(bool value) {
  set_has_is_question();
  is_question_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.is_question)
}

// optional int32 use_apply_to = 6 [(.buffers.gmx) = "useapplyto"];
inline bool Action::has_use_apply_to() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Action::set_has_use_apply_to() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Action::clear_has_use_apply_to() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Action::clear_use_apply_to() {
  use_apply_to_ = 0;
  clear_has_use_apply_to();
}
inline ::google::protobuf::int32 Action::use_apply_to() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.use_apply_to)
  return use_apply_to_;
}
inline void Action::set_use_apply_to(::google::protobuf::int32 value) {
  set_has_use_apply_to();
  use_apply_to_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.use_apply_to)
}

// optional int32 exe_type = 7 [(.buffers.gmx) = "exetype"];
inline bool Action::has_exe_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Action::set_has_exe_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Action::clear_has_exe_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Action::clear_exe_type() {
  exe_type_ = 0;
  clear_has_exe_type();
}
inline ::google::protobuf::int32 Action::exe_type() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.exe_type)
  return exe_type_;
}
inline void Action::set_exe_type(::google::protobuf::int32 value) {
  set_has_exe_type();
  exe_type_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.exe_type)
}

// optional string function_name = 8 [(.buffers.gmx) = "functionname"];
inline bool Action::has_function_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Action::set_has_function_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Action::clear_has_function_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Action::clear_function_name() {
  function_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_function_name();
}
inline const ::std::string& Action::function_name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.function_name)
  return function_name_.GetNoArena();
}
inline void Action::set_function_name(const ::std::string& value) {
  set_has_function_name();
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Action.function_name)
}
#if LANG_CXX11
inline void Action::set_function_name(::std::string&& value) {
  set_has_function_name();
  function_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Action.function_name)
}
#endif
inline void Action::set_function_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_function_name();
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Action.function_name)
}
inline void Action::set_function_name(const char* value, size_t size) {
  set_has_function_name();
  function_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Action.function_name)
}
inline ::std::string* Action::mutable_function_name() {
  set_has_function_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Action.function_name)
  return function_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Action::release_function_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Action.function_name)
  clear_has_function_name();
  return function_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_function_name(::std::string* function_name) {
  if (function_name != NULL) {
    set_has_function_name();
  } else {
    clear_has_function_name();
  }
  function_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function_name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Action.function_name)
}

// optional string code_string = 9 [(.buffers.gmx) = "codestring"];
inline bool Action::has_code_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Action::set_has_code_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Action::clear_has_code_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Action::clear_code_string() {
  code_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code_string();
}
inline const ::std::string& Action::code_string() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.code_string)
  return code_string_.GetNoArena();
}
inline void Action::set_code_string(const ::std::string& value) {
  set_has_code_string();
  code_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Action.code_string)
}
#if LANG_CXX11
inline void Action::set_code_string(::std::string&& value) {
  set_has_code_string();
  code_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Action.code_string)
}
#endif
inline void Action::set_code_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code_string();
  code_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Action.code_string)
}
inline void Action::set_code_string(const char* value, size_t size) {
  set_has_code_string();
  code_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Action.code_string)
}
inline ::std::string* Action::mutable_code_string() {
  set_has_code_string();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Action.code_string)
  return code_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Action::release_code_string() {
  // @@protoc_insertion_point(field_release:buffers.resources.Action.code_string)
  clear_has_code_string();
  return code_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_code_string(::std::string* code_string) {
  if (code_string != NULL) {
    set_has_code_string();
  } else {
    clear_has_code_string();
  }
  code_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code_string);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Action.code_string)
}

// optional string who_name = 10 [(.buffers.gmx) = "whoName"];
inline bool Action::has_who_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Action::set_has_who_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Action::clear_has_who_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Action::clear_who_name() {
  who_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_who_name();
}
inline const ::std::string& Action::who_name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.who_name)
  return who_name_.GetNoArena();
}
inline void Action::set_who_name(const ::std::string& value) {
  set_has_who_name();
  who_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Action.who_name)
}
#if LANG_CXX11
inline void Action::set_who_name(::std::string&& value) {
  set_has_who_name();
  who_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Action.who_name)
}
#endif
inline void Action::set_who_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_who_name();
  who_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Action.who_name)
}
inline void Action::set_who_name(const char* value, size_t size) {
  set_has_who_name();
  who_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Action.who_name)
}
inline ::std::string* Action::mutable_who_name() {
  set_has_who_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Action.who_name)
  return who_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Action::release_who_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Action.who_name)
  clear_has_who_name();
  return who_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_who_name(::std::string* who_name) {
  if (who_name != NULL) {
    set_has_who_name();
  } else {
    clear_has_who_name();
  }
  who_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), who_name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Action.who_name)
}

// optional bool relative = 11;
inline bool Action::has_relative() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Action::set_has_relative() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Action::clear_has_relative() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Action::clear_relative() {
  relative_ = false;
  clear_has_relative();
}
inline bool Action::relative() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.relative)
  return relative_;
}
inline void Action::set_relative(bool value) {
  set_has_relative();
  relative_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.relative)
}

// optional bool is_not = 12 [(.buffers.gmx) = "isnot"];
inline bool Action::has_is_not() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Action::set_has_is_not() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Action::clear_has_is_not() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Action::clear_is_not() {
  is_not_ = false;
  clear_has_is_not();
}
inline bool Action::is_not() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.is_not)
  return is_not_;
}
inline void Action::set_is_not(bool value) {
  set_has_is_not();
  is_not_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Action.is_not)
}

// repeated .buffers.resources.Argument arguments = 13 [(.buffers.gmx) = "arguments/argument"];
inline int Action::arguments_size() const {
  return arguments_.size();
}
inline void Action::clear_arguments() {
  arguments_.Clear();
}
inline const ::buffers::resources::Argument& Action::arguments(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Action.arguments)
  return arguments_.Get(index);
}
inline ::buffers::resources::Argument* Action::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Action.arguments)
  return arguments_.Mutable(index);
}
inline ::buffers::resources::Argument* Action::add_arguments() {
  // @@protoc_insertion_point(field_add:buffers.resources.Action.arguments)
  return arguments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::buffers::resources::Argument >*
Action::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Action.arguments)
  return &arguments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Argument >&
Action::arguments() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Action.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// Event

// optional int32 type = 1 [(.buffers.gmx) = "eventtype"];
inline bool Event::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Event::type() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Event.type)
  return type_;
}
inline void Event::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Event.type)
}

// optional int32 number = 2 [(.buffers.gmx) = "enumb"];
inline bool Event::has_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 Event::number() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Event.number)
  return number_;
}
inline void Event::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Event.number)
}

// optional string name = 3 [(.buffers.gmx) = "ename"];
inline bool Event::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Event::name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Event.name)
  return name_.GetNoArena();
}
inline void Event::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Event.name)
}
#if LANG_CXX11
inline void Event::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Event.name)
}
#endif
inline void Event::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Event.name)
}
inline void Event::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Event.name)
}
inline ::std::string* Event::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Event.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Event.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Event.name)
}

// repeated .buffers.resources.Action action = 4;
inline int Event::action_size() const {
  return action_.size();
}
inline void Event::clear_action() {
  action_.Clear();
}
inline const ::buffers::resources::Action& Event::action(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Event.action)
  return action_.Get(index);
}
inline ::buffers::resources::Action* Event::mutable_action(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Event.action)
  return action_.Mutable(index);
}
inline ::buffers::resources::Action* Event::add_action() {
  // @@protoc_insertion_point(field_add:buffers.resources.Event.action)
  return action_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::buffers::resources::Action >*
Event::mutable_action() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Event.action)
  return &action_;
}
inline const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Action >&
Event::action() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Event.action)
  return action_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace resources
}  // namespace buffers

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_resources_2fEvent_2eproto__INCLUDED
