// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resources/Object.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "resources/Object.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace buffers {
namespace resources {
class Object_PhysicsShapePointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Object_PhysicsShapePoint>
     _instance;
} _Object_PhysicsShapePoint_default_instance_;
class ObjectDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Object>
     _instance;
} _Object_default_instance_;

namespace protobuf_resources_2fObject_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_PhysicsShapePoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_PhysicsShapePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_PhysicsShapePoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object_PhysicsShapePoint, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, parent_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, sprite_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, mask_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, depth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, solid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, persistent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, use_physics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, phy_sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, phy_shape_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, phy_density_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, phy_restitution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, phy_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, phy_linear_damping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, phy_angular_damping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, phy_friction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, phy_awake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, phy_kinematic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, phy_shape_),
  0,
  4,
  1,
  2,
  3,
  5,
  6,
  7,
  8,
  ~0u,
  9,
  15,
  10,
  11,
  12,
  14,
  13,
  18,
  19,
  16,
  17,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(Object_PhysicsShapePoint)},
  { 9, 36, sizeof(Object)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Object_PhysicsShapePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Object_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "resources/Object.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::buffers::protobuf_options_2eproto::InitDefaults();
  ::buffers::resources::protobuf_resources_2fEvent_2eproto::InitDefaults();
  _Object_PhysicsShapePoint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Object_PhysicsShapePoint_default_instance_);_Object_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Object_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026resources/Object.proto\022\021buffers.resour"
      "ces\032\roptions.proto\032\025resources/Event.prot"
      "o\"\302\010\n\006Object\022\014\n\004name\030\001 \001(\t\022\036\n\002id\030\002 \001(\005B\022"
      "\202\265\030\016GMX_DEPRECATED\022#\n\013parent_name\030\003 \001(\tB"
      "\016\202\265\030\nparentName\022#\n\013sprite_name\030\004 \001(\tB\016\202\265"
      "\030\nspriteName\022\037\n\tmask_name\030\005 \001(\tB\014\202\265\030\010mas"
      "kName\022\r\n\005depth\030\006 \001(\005\022\r\n\005solid\030\007 \001(\010\022\017\n\007v"
      "isible\030\010 \001(\010\022\022\n\npersistent\030\t \001(\010\022:\n\006even"
      "ts\030\n \003(\0132\030.buffers.resources.EventB\020\202\265\030\014"
      "events/event\022&\n\013use_physics\030\013 \001(\010B\021\202\265\030\rP"
      "hysicsObject\022+\n\nphy_sensor\030\014 \001(\010B\027\202\265\030\023Ph"
      "ysicsObjectSensor\022V\n\016phy_shape_type\030\r \001("
      "\0162&.buffers.resources.Object.PhysicsShap"
      "eB\026\202\265\030\022PhysicsObjectShape\022-\n\013phy_density"
      "\030\016 \001(\001B\030\202\265\030\024PhysicsObjectDensity\0225\n\017phy_"
      "restitution\030\017 \001(\001B\034\202\265\030\030PhysicsObjectRest"
      "itution\022)\n\tphy_group\030\020 \001(\005B\026\202\265\030\022PhysicsO"
      "bjectGroup\022:\n\022phy_linear_damping\030\021 \001(\001B\036"
      "\202\265\030\032PhysicsObjectLinearDamping\022<\n\023phy_an"
      "gular_damping\030\022 \001(\001B\037\202\265\030\033PhysicsObjectAn"
      "gularDamping\022/\n\014phy_friction\030\023 \001(\001B\031\202\265\030\025"
      "PhysicsObjectFriction\022)\n\tphy_awake\030\024 \001(\010"
      "B\026\202\265\030\022PhysicsObjectAwake\0221\n\rphy_kinemati"
      "c\030\025 \001(\010B\032\202\265\030\026PhysicsObjectKinematic\022\\\n\tp"
      "hy_shape\030\026 \003(\0132+.buffers.resources.Objec"
      "t.PhysicsShapePointB\034\202\265\030\030PhysicsShapePoi"
      "nts/point\032K\n\021PhysicsShapePoint\022\032\n\001x\030\001 \001("
      "\005B\017\202\265\030\013GMX_SPLIT/0\022\032\n\001y\030\002 \001(\005B\017\202\265\030\013GMX_S"
      "PLIT/1\".\n\014PhysicsShape\022\n\n\006CIRCLE\020\000\022\007\n\003BO"
      "X\020\001\022\t\n\005SHAPE\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1174);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "resources/Object.proto", &protobuf_RegisterTypes);
  ::buffers::protobuf_options_2eproto::AddDescriptors();
  ::buffers::resources::protobuf_resources_2fEvent_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_resources_2fObject_2eproto

const ::google::protobuf::EnumDescriptor* Object_PhysicsShape_descriptor() {
  protobuf_resources_2fObject_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fObject_2eproto::file_level_enum_descriptors[0];
}
bool Object_PhysicsShape_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Object_PhysicsShape Object::CIRCLE;
const Object_PhysicsShape Object::BOX;
const Object_PhysicsShape Object::SHAPE;
const Object_PhysicsShape Object::PhysicsShape_MIN;
const Object_PhysicsShape Object::PhysicsShape_MAX;
const int Object::PhysicsShape_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object_PhysicsShapePoint::kXFieldNumber;
const int Object_PhysicsShapePoint::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object_PhysicsShapePoint::Object_PhysicsShapePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_resources_2fObject_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Object.PhysicsShapePoint)
}
Object_PhysicsShapePoint::Object_PhysicsShapePoint(const Object_PhysicsShapePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Object.PhysicsShapePoint)
}

void Object_PhysicsShapePoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Object_PhysicsShapePoint::~Object_PhysicsShapePoint() {
  // @@protoc_insertion_point(destructor:buffers.resources.Object.PhysicsShapePoint)
  SharedDtor();
}

void Object_PhysicsShapePoint::SharedDtor() {
}

void Object_PhysicsShapePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object_PhysicsShapePoint::descriptor() {
  protobuf_resources_2fObject_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fObject_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Object_PhysicsShapePoint& Object_PhysicsShapePoint::default_instance() {
  protobuf_resources_2fObject_2eproto::InitDefaults();
  return *internal_default_instance();
}

Object_PhysicsShapePoint* Object_PhysicsShapePoint::New(::google::protobuf::Arena* arena) const {
  Object_PhysicsShapePoint* n = new Object_PhysicsShapePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Object_PhysicsShapePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Object.PhysicsShapePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Object_PhysicsShapePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Object.PhysicsShapePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1 [(.buffers.gmx) = "GMX_SPLIT/0"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 2 [(.buffers.gmx) = "GMX_SPLIT/1"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Object.PhysicsShapePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Object.PhysicsShapePoint)
  return false;
#undef DO_
}

void Object_PhysicsShapePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Object.PhysicsShapePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1 [(.buffers.gmx) = "GMX_SPLIT/0"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2 [(.buffers.gmx) = "GMX_SPLIT/1"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Object.PhysicsShapePoint)
}

::google::protobuf::uint8* Object_PhysicsShapePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Object.PhysicsShapePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1 [(.buffers.gmx) = "GMX_SPLIT/0"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2 [(.buffers.gmx) = "GMX_SPLIT/1"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Object.PhysicsShapePoint)
  return target;
}

size_t Object_PhysicsShapePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Object.PhysicsShapePoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 x = 1 [(.buffers.gmx) = "GMX_SPLIT/0"];
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2 [(.buffers.gmx) = "GMX_SPLIT/1"];
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object_PhysicsShapePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Object.PhysicsShapePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Object_PhysicsShapePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Object_PhysicsShapePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Object.PhysicsShapePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Object.PhysicsShapePoint)
    MergeFrom(*source);
  }
}

void Object_PhysicsShapePoint::MergeFrom(const Object_PhysicsShapePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Object.PhysicsShapePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Object_PhysicsShapePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Object.PhysicsShapePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object_PhysicsShapePoint::CopyFrom(const Object_PhysicsShapePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Object.PhysicsShapePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object_PhysicsShapePoint::IsInitialized() const {
  return true;
}

void Object_PhysicsShapePoint::Swap(Object_PhysicsShapePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object_PhysicsShapePoint::InternalSwap(Object_PhysicsShapePoint* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Object_PhysicsShapePoint::GetMetadata() const {
  protobuf_resources_2fObject_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fObject_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Object_PhysicsShapePoint

// optional int32 x = 1 [(.buffers.gmx) = "GMX_SPLIT/0"];
bool Object_PhysicsShapePoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Object_PhysicsShapePoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Object_PhysicsShapePoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Object_PhysicsShapePoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 Object_PhysicsShapePoint::x() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.PhysicsShapePoint.x)
  return x_;
}
void Object_PhysicsShapePoint::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.PhysicsShapePoint.x)
}

// optional int32 y = 2 [(.buffers.gmx) = "GMX_SPLIT/1"];
bool Object_PhysicsShapePoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Object_PhysicsShapePoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Object_PhysicsShapePoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Object_PhysicsShapePoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 Object_PhysicsShapePoint::y() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.PhysicsShapePoint.y)
  return y_;
}
void Object_PhysicsShapePoint::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.PhysicsShapePoint.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kNameFieldNumber;
const int Object::kIdFieldNumber;
const int Object::kParentNameFieldNumber;
const int Object::kSpriteNameFieldNumber;
const int Object::kMaskNameFieldNumber;
const int Object::kDepthFieldNumber;
const int Object::kSolidFieldNumber;
const int Object::kVisibleFieldNumber;
const int Object::kPersistentFieldNumber;
const int Object::kEventsFieldNumber;
const int Object::kUsePhysicsFieldNumber;
const int Object::kPhySensorFieldNumber;
const int Object::kPhyShapeTypeFieldNumber;
const int Object::kPhyDensityFieldNumber;
const int Object::kPhyRestitutionFieldNumber;
const int Object::kPhyGroupFieldNumber;
const int Object::kPhyLinearDampingFieldNumber;
const int Object::kPhyAngularDampingFieldNumber;
const int Object::kPhyFrictionFieldNumber;
const int Object::kPhyAwakeFieldNumber;
const int Object::kPhyKinematicFieldNumber;
const int Object::kPhyShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_resources_2fObject_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Object)
}
Object::Object(const Object& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      events_(from.events_),
      phy_shape_(from.phy_shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  parent_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parent_name()) {
    parent_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_name_);
  }
  sprite_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sprite_name()) {
    sprite_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sprite_name_);
  }
  mask_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mask_name()) {
    mask_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&phy_friction_) -
    reinterpret_cast<char*>(&id_)) + sizeof(phy_friction_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Object)
}

void Object::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sprite_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phy_friction_) -
      reinterpret_cast<char*>(&id_)) + sizeof(phy_friction_));
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:buffers.resources.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sprite_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  protobuf_resources_2fObject_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fObject_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Object& Object::default_instance() {
  protobuf_resources_2fObject_2eproto::InitDefaults();
  return *internal_default_instance();
}

Object* Object::New(::google::protobuf::Arena* arena) const {
  Object* n = new Object;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  phy_shape_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!parent_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*parent_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!sprite_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sprite_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!mask_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mask_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visible_) -
        reinterpret_cast<char*>(&id_)) + sizeof(visible_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&persistent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&phy_sensor_) -
        reinterpret_cast<char*>(&persistent_)) + sizeof(phy_sensor_));
  }
  if (cached_has_bits & 983040u) {
    ::memset(&phy_awake_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&phy_friction_) -
        reinterpret_cast<char*>(&phy_awake_)) + sizeof(phy_friction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Object)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Object.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parent_name = 3 [(.buffers.gmx) = "parentName"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent_name().data(), static_cast<int>(this->parent_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Object.parent_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sprite_name = 4 [(.buffers.gmx) = "spriteName"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sprite_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sprite_name().data(), static_cast<int>(this->sprite_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Object.sprite_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mask_name = 5 [(.buffers.gmx) = "maskName"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mask_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mask_name().data(), static_cast<int>(this->mask_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Object.mask_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 depth = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_solid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool visible = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_visible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool persistent = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_persistent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persistent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .buffers.resources.Event events = 10 [(.buffers.gmx) = "events/event"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_physics = 11 [(.buffers.gmx) = "PhysicsObject"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_use_physics();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_physics_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool phy_sensor = 12 [(.buffers.gmx) = "PhysicsObjectSensor"];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_phy_sensor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &phy_sensor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Object.PhysicsShape phy_shape_type = 13 [(.buffers.gmx) = "PhysicsObjectShape"];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::buffers::resources::Object_PhysicsShape_IsValid(value)) {
            set_phy_shape_type(static_cast< ::buffers::resources::Object_PhysicsShape >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                13, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double phy_density = 14 [(.buffers.gmx) = "PhysicsObjectDensity"];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_phy_density();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phy_density_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double phy_restitution = 15 [(.buffers.gmx) = "PhysicsObjectRestitution"];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_phy_restitution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phy_restitution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 phy_group = 16 [(.buffers.gmx) = "PhysicsObjectGroup"];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_phy_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phy_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double phy_linear_damping = 17 [(.buffers.gmx) = "PhysicsObjectLinearDamping"];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_phy_linear_damping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phy_linear_damping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double phy_angular_damping = 18 [(.buffers.gmx) = "PhysicsObjectAngularDamping"];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_phy_angular_damping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phy_angular_damping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double phy_friction = 19 [(.buffers.gmx) = "PhysicsObjectFriction"];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_phy_friction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phy_friction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool phy_awake = 20 [(.buffers.gmx) = "PhysicsObjectAwake"];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_phy_awake();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &phy_awake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool phy_kinematic = 21 [(.buffers.gmx) = "PhysicsObjectKinematic"];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_phy_kinematic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &phy_kinematic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .buffers.resources.Object.PhysicsShapePoint phy_shape = 22 [(.buffers.gmx) = "PhysicsShapePoints/point"];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phy_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Object.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string parent_name = 3 [(.buffers.gmx) = "parentName"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_name().data(), static_cast<int>(this->parent_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Object.parent_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parent_name(), output);
  }

  // optional string sprite_name = 4 [(.buffers.gmx) = "spriteName"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sprite_name().data(), static_cast<int>(this->sprite_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Object.sprite_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sprite_name(), output);
  }

  // optional string mask_name = 5 [(.buffers.gmx) = "maskName"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mask_name().data(), static_cast<int>(this->mask_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Object.mask_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mask_name(), output);
  }

  // optional int32 depth = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->depth(), output);
  }

  // optional bool solid = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->solid(), output);
  }

  // optional bool visible = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->visible(), output);
  }

  // optional bool persistent = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->persistent(), output);
  }

  // repeated .buffers.resources.Event events = 10 [(.buffers.gmx) = "events/event"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->events(static_cast<int>(i)), output);
  }

  // optional bool use_physics = 11 [(.buffers.gmx) = "PhysicsObject"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->use_physics(), output);
  }

  // optional bool phy_sensor = 12 [(.buffers.gmx) = "PhysicsObjectSensor"];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->phy_sensor(), output);
  }

  // optional .buffers.resources.Object.PhysicsShape phy_shape_type = 13 [(.buffers.gmx) = "PhysicsObjectShape"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->phy_shape_type(), output);
  }

  // optional double phy_density = 14 [(.buffers.gmx) = "PhysicsObjectDensity"];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->phy_density(), output);
  }

  // optional double phy_restitution = 15 [(.buffers.gmx) = "PhysicsObjectRestitution"];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->phy_restitution(), output);
  }

  // optional int32 phy_group = 16 [(.buffers.gmx) = "PhysicsObjectGroup"];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->phy_group(), output);
  }

  // optional double phy_linear_damping = 17 [(.buffers.gmx) = "PhysicsObjectLinearDamping"];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->phy_linear_damping(), output);
  }

  // optional double phy_angular_damping = 18 [(.buffers.gmx) = "PhysicsObjectAngularDamping"];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->phy_angular_damping(), output);
  }

  // optional double phy_friction = 19 [(.buffers.gmx) = "PhysicsObjectFriction"];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->phy_friction(), output);
  }

  // optional bool phy_awake = 20 [(.buffers.gmx) = "PhysicsObjectAwake"];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->phy_awake(), output);
  }

  // optional bool phy_kinematic = 21 [(.buffers.gmx) = "PhysicsObjectKinematic"];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->phy_kinematic(), output);
  }

  // repeated .buffers.resources.Object.PhysicsShapePoint phy_shape = 22 [(.buffers.gmx) = "PhysicsShapePoints/point"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->phy_shape_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->phy_shape(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Object)
}

::google::protobuf::uint8* Object::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Object.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string parent_name = 3 [(.buffers.gmx) = "parentName"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent_name().data(), static_cast<int>(this->parent_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Object.parent_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parent_name(), target);
  }

  // optional string sprite_name = 4 [(.buffers.gmx) = "spriteName"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sprite_name().data(), static_cast<int>(this->sprite_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Object.sprite_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sprite_name(), target);
  }

  // optional string mask_name = 5 [(.buffers.gmx) = "maskName"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mask_name().data(), static_cast<int>(this->mask_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Object.mask_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mask_name(), target);
  }

  // optional int32 depth = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->depth(), target);
  }

  // optional bool solid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->solid(), target);
  }

  // optional bool visible = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->visible(), target);
  }

  // optional bool persistent = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->persistent(), target);
  }

  // repeated .buffers.resources.Event events = 10 [(.buffers.gmx) = "events/event"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->events(static_cast<int>(i)), deterministic, target);
  }

  // optional bool use_physics = 11 [(.buffers.gmx) = "PhysicsObject"];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->use_physics(), target);
  }

  // optional bool phy_sensor = 12 [(.buffers.gmx) = "PhysicsObjectSensor"];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->phy_sensor(), target);
  }

  // optional .buffers.resources.Object.PhysicsShape phy_shape_type = 13 [(.buffers.gmx) = "PhysicsObjectShape"];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->phy_shape_type(), target);
  }

  // optional double phy_density = 14 [(.buffers.gmx) = "PhysicsObjectDensity"];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->phy_density(), target);
  }

  // optional double phy_restitution = 15 [(.buffers.gmx) = "PhysicsObjectRestitution"];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->phy_restitution(), target);
  }

  // optional int32 phy_group = 16 [(.buffers.gmx) = "PhysicsObjectGroup"];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->phy_group(), target);
  }

  // optional double phy_linear_damping = 17 [(.buffers.gmx) = "PhysicsObjectLinearDamping"];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->phy_linear_damping(), target);
  }

  // optional double phy_angular_damping = 18 [(.buffers.gmx) = "PhysicsObjectAngularDamping"];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->phy_angular_damping(), target);
  }

  // optional double phy_friction = 19 [(.buffers.gmx) = "PhysicsObjectFriction"];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->phy_friction(), target);
  }

  // optional bool phy_awake = 20 [(.buffers.gmx) = "PhysicsObjectAwake"];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->phy_awake(), target);
  }

  // optional bool phy_kinematic = 21 [(.buffers.gmx) = "PhysicsObjectKinematic"];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->phy_kinematic(), target);
  }

  // repeated .buffers.resources.Object.PhysicsShapePoint phy_shape = 22 [(.buffers.gmx) = "PhysicsShapePoints/point"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->phy_shape_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->phy_shape(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Object)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .buffers.resources.Event events = 10 [(.buffers.gmx) = "events/event"];
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->events(static_cast<int>(i)));
    }
  }

  // repeated .buffers.resources.Object.PhysicsShapePoint phy_shape = 22 [(.buffers.gmx) = "PhysicsShapePoints/point"];
  {
    unsigned int count = static_cast<unsigned int>(this->phy_shape_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->phy_shape(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string parent_name = 3 [(.buffers.gmx) = "parentName"];
    if (has_parent_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_name());
    }

    // optional string sprite_name = 4 [(.buffers.gmx) = "spriteName"];
    if (has_sprite_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sprite_name());
    }

    // optional string mask_name = 5 [(.buffers.gmx) = "maskName"];
    if (has_mask_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mask_name());
    }

    // optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 depth = 6;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }

    // optional bool solid = 7;
    if (has_solid()) {
      total_size += 1 + 1;
    }

    // optional bool visible = 8;
    if (has_visible()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool persistent = 9;
    if (has_persistent()) {
      total_size += 1 + 1;
    }

    // optional bool use_physics = 11 [(.buffers.gmx) = "PhysicsObject"];
    if (has_use_physics()) {
      total_size += 1 + 1;
    }

    // optional .buffers.resources.Object.PhysicsShape phy_shape_type = 13 [(.buffers.gmx) = "PhysicsObjectShape"];
    if (has_phy_shape_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phy_shape_type());
    }

    // optional double phy_density = 14 [(.buffers.gmx) = "PhysicsObjectDensity"];
    if (has_phy_density()) {
      total_size += 1 + 8;
    }

    // optional double phy_restitution = 15 [(.buffers.gmx) = "PhysicsObjectRestitution"];
    if (has_phy_restitution()) {
      total_size += 1 + 8;
    }

    // optional double phy_linear_damping = 17 [(.buffers.gmx) = "PhysicsObjectLinearDamping"];
    if (has_phy_linear_damping()) {
      total_size += 2 + 8;
    }

    // optional int32 phy_group = 16 [(.buffers.gmx) = "PhysicsObjectGroup"];
    if (has_phy_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phy_group());
    }

    // optional bool phy_sensor = 12 [(.buffers.gmx) = "PhysicsObjectSensor"];
    if (has_phy_sensor()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional bool phy_awake = 20 [(.buffers.gmx) = "PhysicsObjectAwake"];
    if (has_phy_awake()) {
      total_size += 2 + 1;
    }

    // optional bool phy_kinematic = 21 [(.buffers.gmx) = "PhysicsObjectKinematic"];
    if (has_phy_kinematic()) {
      total_size += 2 + 1;
    }

    // optional double phy_angular_damping = 18 [(.buffers.gmx) = "PhysicsObjectAngularDamping"];
    if (has_phy_angular_damping()) {
      total_size += 2 + 8;
    }

    // optional double phy_friction = 19 [(.buffers.gmx) = "PhysicsObjectFriction"];
    if (has_phy_friction()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Object>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Object)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  phy_shape_.MergeFrom(from.phy_shape_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_parent_name();
      parent_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sprite_name();
      sprite_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sprite_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_mask_name();
      mask_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      depth_ = from.depth_;
    }
    if (cached_has_bits & 0x00000040u) {
      solid_ = from.solid_;
    }
    if (cached_has_bits & 0x00000080u) {
      visible_ = from.visible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      persistent_ = from.persistent_;
    }
    if (cached_has_bits & 0x00000200u) {
      use_physics_ = from.use_physics_;
    }
    if (cached_has_bits & 0x00000400u) {
      phy_shape_type_ = from.phy_shape_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      phy_density_ = from.phy_density_;
    }
    if (cached_has_bits & 0x00001000u) {
      phy_restitution_ = from.phy_restitution_;
    }
    if (cached_has_bits & 0x00002000u) {
      phy_linear_damping_ = from.phy_linear_damping_;
    }
    if (cached_has_bits & 0x00004000u) {
      phy_group_ = from.phy_group_;
    }
    if (cached_has_bits & 0x00008000u) {
      phy_sensor_ = from.phy_sensor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      phy_awake_ = from.phy_awake_;
    }
    if (cached_has_bits & 0x00020000u) {
      phy_kinematic_ = from.phy_kinematic_;
    }
    if (cached_has_bits & 0x00040000u) {
      phy_angular_damping_ = from.phy_angular_damping_;
    }
    if (cached_has_bits & 0x00080000u) {
      phy_friction_ = from.phy_friction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  using std::swap;
  events_.InternalSwap(&other->events_);
  phy_shape_.InternalSwap(&other->phy_shape_);
  name_.Swap(&other->name_);
  parent_name_.Swap(&other->parent_name_);
  sprite_name_.Swap(&other->sprite_name_);
  mask_name_.Swap(&other->mask_name_);
  swap(id_, other->id_);
  swap(depth_, other->depth_);
  swap(solid_, other->solid_);
  swap(visible_, other->visible_);
  swap(persistent_, other->persistent_);
  swap(use_physics_, other->use_physics_);
  swap(phy_shape_type_, other->phy_shape_type_);
  swap(phy_density_, other->phy_density_);
  swap(phy_restitution_, other->phy_restitution_);
  swap(phy_linear_damping_, other->phy_linear_damping_);
  swap(phy_group_, other->phy_group_);
  swap(phy_sensor_, other->phy_sensor_);
  swap(phy_awake_, other->phy_awake_);
  swap(phy_kinematic_, other->phy_kinematic_);
  swap(phy_angular_damping_, other->phy_angular_damping_);
  swap(phy_friction_, other->phy_friction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_resources_2fObject_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fObject_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Object

// optional string name = 1;
bool Object::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Object::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Object::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Object::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Object::name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.name)
  return name_.GetNoArena();
}
void Object::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Object.name)
}
#if LANG_CXX11
void Object::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Object.name)
}
#endif
void Object::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Object.name)
}
void Object::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Object.name)
}
::std::string* Object::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Object.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Object::release_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Object.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Object::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Object.name)
}

// optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
bool Object::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Object::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Object::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Object::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 Object::id() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.id)
  return id_;
}
void Object::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.id)
}

// optional string parent_name = 3 [(.buffers.gmx) = "parentName"];
bool Object::has_parent_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Object::set_has_parent_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Object::clear_has_parent_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Object::clear_parent_name() {
  parent_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_name();
}
const ::std::string& Object::parent_name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.parent_name)
  return parent_name_.GetNoArena();
}
void Object::set_parent_name(const ::std::string& value) {
  set_has_parent_name();
  parent_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Object.parent_name)
}
#if LANG_CXX11
void Object::set_parent_name(::std::string&& value) {
  set_has_parent_name();
  parent_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Object.parent_name)
}
#endif
void Object::set_parent_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_name();
  parent_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Object.parent_name)
}
void Object::set_parent_name(const char* value, size_t size) {
  set_has_parent_name();
  parent_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Object.parent_name)
}
::std::string* Object::mutable_parent_name() {
  set_has_parent_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Object.parent_name)
  return parent_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Object::release_parent_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Object.parent_name)
  clear_has_parent_name();
  return parent_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Object::set_allocated_parent_name(::std::string* parent_name) {
  if (parent_name != NULL) {
    set_has_parent_name();
  } else {
    clear_has_parent_name();
  }
  parent_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Object.parent_name)
}

// optional string sprite_name = 4 [(.buffers.gmx) = "spriteName"];
bool Object::has_sprite_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Object::set_has_sprite_name() {
  _has_bits_[0] |= 0x00000004u;
}
void Object::clear_has_sprite_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void Object::clear_sprite_name() {
  sprite_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sprite_name();
}
const ::std::string& Object::sprite_name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.sprite_name)
  return sprite_name_.GetNoArena();
}
void Object::set_sprite_name(const ::std::string& value) {
  set_has_sprite_name();
  sprite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Object.sprite_name)
}
#if LANG_CXX11
void Object::set_sprite_name(::std::string&& value) {
  set_has_sprite_name();
  sprite_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Object.sprite_name)
}
#endif
void Object::set_sprite_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sprite_name();
  sprite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Object.sprite_name)
}
void Object::set_sprite_name(const char* value, size_t size) {
  set_has_sprite_name();
  sprite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Object.sprite_name)
}
::std::string* Object::mutable_sprite_name() {
  set_has_sprite_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Object.sprite_name)
  return sprite_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Object::release_sprite_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Object.sprite_name)
  clear_has_sprite_name();
  return sprite_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Object::set_allocated_sprite_name(::std::string* sprite_name) {
  if (sprite_name != NULL) {
    set_has_sprite_name();
  } else {
    clear_has_sprite_name();
  }
  sprite_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sprite_name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Object.sprite_name)
}

// optional string mask_name = 5 [(.buffers.gmx) = "maskName"];
bool Object::has_mask_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Object::set_has_mask_name() {
  _has_bits_[0] |= 0x00000008u;
}
void Object::clear_has_mask_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void Object::clear_mask_name() {
  mask_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mask_name();
}
const ::std::string& Object::mask_name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.mask_name)
  return mask_name_.GetNoArena();
}
void Object::set_mask_name(const ::std::string& value) {
  set_has_mask_name();
  mask_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Object.mask_name)
}
#if LANG_CXX11
void Object::set_mask_name(::std::string&& value) {
  set_has_mask_name();
  mask_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Object.mask_name)
}
#endif
void Object::set_mask_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mask_name();
  mask_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Object.mask_name)
}
void Object::set_mask_name(const char* value, size_t size) {
  set_has_mask_name();
  mask_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Object.mask_name)
}
::std::string* Object::mutable_mask_name() {
  set_has_mask_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Object.mask_name)
  return mask_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Object::release_mask_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Object.mask_name)
  clear_has_mask_name();
  return mask_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Object::set_allocated_mask_name(::std::string* mask_name) {
  if (mask_name != NULL) {
    set_has_mask_name();
  } else {
    clear_has_mask_name();
  }
  mask_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mask_name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Object.mask_name)
}

// optional int32 depth = 6;
bool Object::has_depth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Object::set_has_depth() {
  _has_bits_[0] |= 0x00000020u;
}
void Object::clear_has_depth() {
  _has_bits_[0] &= ~0x00000020u;
}
void Object::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
::google::protobuf::int32 Object::depth() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.depth)
  return depth_;
}
void Object::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.depth)
}

// optional bool solid = 7;
bool Object::has_solid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Object::set_has_solid() {
  _has_bits_[0] |= 0x00000040u;
}
void Object::clear_has_solid() {
  _has_bits_[0] &= ~0x00000040u;
}
void Object::clear_solid() {
  solid_ = false;
  clear_has_solid();
}
bool Object::solid() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.solid)
  return solid_;
}
void Object::set_solid(bool value) {
  set_has_solid();
  solid_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.solid)
}

// optional bool visible = 8;
bool Object::has_visible() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Object::set_has_visible() {
  _has_bits_[0] |= 0x00000080u;
}
void Object::clear_has_visible() {
  _has_bits_[0] &= ~0x00000080u;
}
void Object::clear_visible() {
  visible_ = false;
  clear_has_visible();
}
bool Object::visible() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.visible)
  return visible_;
}
void Object::set_visible(bool value) {
  set_has_visible();
  visible_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.visible)
}

// optional bool persistent = 9;
bool Object::has_persistent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Object::set_has_persistent() {
  _has_bits_[0] |= 0x00000100u;
}
void Object::clear_has_persistent() {
  _has_bits_[0] &= ~0x00000100u;
}
void Object::clear_persistent() {
  persistent_ = false;
  clear_has_persistent();
}
bool Object::persistent() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.persistent)
  return persistent_;
}
void Object::set_persistent(bool value) {
  set_has_persistent();
  persistent_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.persistent)
}

// repeated .buffers.resources.Event events = 10 [(.buffers.gmx) = "events/event"];
int Object::events_size() const {
  return events_.size();
}
void Object::clear_events() {
  events_.Clear();
}
const ::buffers::resources::Event& Object::events(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.events)
  return events_.Get(index);
}
::buffers::resources::Event* Object::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Object.events)
  return events_.Mutable(index);
}
::buffers::resources::Event* Object::add_events() {
  // @@protoc_insertion_point(field_add:buffers.resources.Object.events)
  return events_.Add();
}
::google::protobuf::RepeatedPtrField< ::buffers::resources::Event >*
Object::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Object.events)
  return &events_;
}
const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Event >&
Object::events() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Object.events)
  return events_;
}

// optional bool use_physics = 11 [(.buffers.gmx) = "PhysicsObject"];
bool Object::has_use_physics() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Object::set_has_use_physics() {
  _has_bits_[0] |= 0x00000200u;
}
void Object::clear_has_use_physics() {
  _has_bits_[0] &= ~0x00000200u;
}
void Object::clear_use_physics() {
  use_physics_ = false;
  clear_has_use_physics();
}
bool Object::use_physics() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.use_physics)
  return use_physics_;
}
void Object::set_use_physics(bool value) {
  set_has_use_physics();
  use_physics_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.use_physics)
}

// optional bool phy_sensor = 12 [(.buffers.gmx) = "PhysicsObjectSensor"];
bool Object::has_phy_sensor() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Object::set_has_phy_sensor() {
  _has_bits_[0] |= 0x00008000u;
}
void Object::clear_has_phy_sensor() {
  _has_bits_[0] &= ~0x00008000u;
}
void Object::clear_phy_sensor() {
  phy_sensor_ = false;
  clear_has_phy_sensor();
}
bool Object::phy_sensor() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.phy_sensor)
  return phy_sensor_;
}
void Object::set_phy_sensor(bool value) {
  set_has_phy_sensor();
  phy_sensor_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.phy_sensor)
}

// optional .buffers.resources.Object.PhysicsShape phy_shape_type = 13 [(.buffers.gmx) = "PhysicsObjectShape"];
bool Object::has_phy_shape_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Object::set_has_phy_shape_type() {
  _has_bits_[0] |= 0x00000400u;
}
void Object::clear_has_phy_shape_type() {
  _has_bits_[0] &= ~0x00000400u;
}
void Object::clear_phy_shape_type() {
  phy_shape_type_ = 0;
  clear_has_phy_shape_type();
}
::buffers::resources::Object_PhysicsShape Object::phy_shape_type() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.phy_shape_type)
  return static_cast< ::buffers::resources::Object_PhysicsShape >(phy_shape_type_);
}
void Object::set_phy_shape_type(::buffers::resources::Object_PhysicsShape value) {
  assert(::buffers::resources::Object_PhysicsShape_IsValid(value));
  set_has_phy_shape_type();
  phy_shape_type_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.phy_shape_type)
}

// optional double phy_density = 14 [(.buffers.gmx) = "PhysicsObjectDensity"];
bool Object::has_phy_density() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Object::set_has_phy_density() {
  _has_bits_[0] |= 0x00000800u;
}
void Object::clear_has_phy_density() {
  _has_bits_[0] &= ~0x00000800u;
}
void Object::clear_phy_density() {
  phy_density_ = 0;
  clear_has_phy_density();
}
double Object::phy_density() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.phy_density)
  return phy_density_;
}
void Object::set_phy_density(double value) {
  set_has_phy_density();
  phy_density_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.phy_density)
}

// optional double phy_restitution = 15 [(.buffers.gmx) = "PhysicsObjectRestitution"];
bool Object::has_phy_restitution() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Object::set_has_phy_restitution() {
  _has_bits_[0] |= 0x00001000u;
}
void Object::clear_has_phy_restitution() {
  _has_bits_[0] &= ~0x00001000u;
}
void Object::clear_phy_restitution() {
  phy_restitution_ = 0;
  clear_has_phy_restitution();
}
double Object::phy_restitution() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.phy_restitution)
  return phy_restitution_;
}
void Object::set_phy_restitution(double value) {
  set_has_phy_restitution();
  phy_restitution_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.phy_restitution)
}

// optional int32 phy_group = 16 [(.buffers.gmx) = "PhysicsObjectGroup"];
bool Object::has_phy_group() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Object::set_has_phy_group() {
  _has_bits_[0] |= 0x00004000u;
}
void Object::clear_has_phy_group() {
  _has_bits_[0] &= ~0x00004000u;
}
void Object::clear_phy_group() {
  phy_group_ = 0;
  clear_has_phy_group();
}
::google::protobuf::int32 Object::phy_group() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.phy_group)
  return phy_group_;
}
void Object::set_phy_group(::google::protobuf::int32 value) {
  set_has_phy_group();
  phy_group_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.phy_group)
}

// optional double phy_linear_damping = 17 [(.buffers.gmx) = "PhysicsObjectLinearDamping"];
bool Object::has_phy_linear_damping() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Object::set_has_phy_linear_damping() {
  _has_bits_[0] |= 0x00002000u;
}
void Object::clear_has_phy_linear_damping() {
  _has_bits_[0] &= ~0x00002000u;
}
void Object::clear_phy_linear_damping() {
  phy_linear_damping_ = 0;
  clear_has_phy_linear_damping();
}
double Object::phy_linear_damping() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.phy_linear_damping)
  return phy_linear_damping_;
}
void Object::set_phy_linear_damping(double value) {
  set_has_phy_linear_damping();
  phy_linear_damping_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.phy_linear_damping)
}

// optional double phy_angular_damping = 18 [(.buffers.gmx) = "PhysicsObjectAngularDamping"];
bool Object::has_phy_angular_damping() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Object::set_has_phy_angular_damping() {
  _has_bits_[0] |= 0x00040000u;
}
void Object::clear_has_phy_angular_damping() {
  _has_bits_[0] &= ~0x00040000u;
}
void Object::clear_phy_angular_damping() {
  phy_angular_damping_ = 0;
  clear_has_phy_angular_damping();
}
double Object::phy_angular_damping() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.phy_angular_damping)
  return phy_angular_damping_;
}
void Object::set_phy_angular_damping(double value) {
  set_has_phy_angular_damping();
  phy_angular_damping_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.phy_angular_damping)
}

// optional double phy_friction = 19 [(.buffers.gmx) = "PhysicsObjectFriction"];
bool Object::has_phy_friction() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Object::set_has_phy_friction() {
  _has_bits_[0] |= 0x00080000u;
}
void Object::clear_has_phy_friction() {
  _has_bits_[0] &= ~0x00080000u;
}
void Object::clear_phy_friction() {
  phy_friction_ = 0;
  clear_has_phy_friction();
}
double Object::phy_friction() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.phy_friction)
  return phy_friction_;
}
void Object::set_phy_friction(double value) {
  set_has_phy_friction();
  phy_friction_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.phy_friction)
}

// optional bool phy_awake = 20 [(.buffers.gmx) = "PhysicsObjectAwake"];
bool Object::has_phy_awake() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Object::set_has_phy_awake() {
  _has_bits_[0] |= 0x00010000u;
}
void Object::clear_has_phy_awake() {
  _has_bits_[0] &= ~0x00010000u;
}
void Object::clear_phy_awake() {
  phy_awake_ = false;
  clear_has_phy_awake();
}
bool Object::phy_awake() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.phy_awake)
  return phy_awake_;
}
void Object::set_phy_awake(bool value) {
  set_has_phy_awake();
  phy_awake_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.phy_awake)
}

// optional bool phy_kinematic = 21 [(.buffers.gmx) = "PhysicsObjectKinematic"];
bool Object::has_phy_kinematic() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Object::set_has_phy_kinematic() {
  _has_bits_[0] |= 0x00020000u;
}
void Object::clear_has_phy_kinematic() {
  _has_bits_[0] &= ~0x00020000u;
}
void Object::clear_phy_kinematic() {
  phy_kinematic_ = false;
  clear_has_phy_kinematic();
}
bool Object::phy_kinematic() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.phy_kinematic)
  return phy_kinematic_;
}
void Object::set_phy_kinematic(bool value) {
  set_has_phy_kinematic();
  phy_kinematic_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.phy_kinematic)
}

// repeated .buffers.resources.Object.PhysicsShapePoint phy_shape = 22 [(.buffers.gmx) = "PhysicsShapePoints/point"];
int Object::phy_shape_size() const {
  return phy_shape_.size();
}
void Object::clear_phy_shape() {
  phy_shape_.Clear();
}
const ::buffers::resources::Object_PhysicsShapePoint& Object::phy_shape(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.phy_shape)
  return phy_shape_.Get(index);
}
::buffers::resources::Object_PhysicsShapePoint* Object::mutable_phy_shape(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Object.phy_shape)
  return phy_shape_.Mutable(index);
}
::buffers::resources::Object_PhysicsShapePoint* Object::add_phy_shape() {
  // @@protoc_insertion_point(field_add:buffers.resources.Object.phy_shape)
  return phy_shape_.Add();
}
::google::protobuf::RepeatedPtrField< ::buffers::resources::Object_PhysicsShapePoint >*
Object::mutable_phy_shape() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Object.phy_shape)
  return &phy_shape_;
}
const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Object_PhysicsShapePoint >&
Object::phy_shape() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Object.phy_shape)
  return phy_shape_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace resources
}  // namespace buffers

// @@protoc_insertion_point(global_scope)
