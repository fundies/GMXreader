// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resources/Sprite.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "resources/Sprite.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace buffers {
namespace resources {
class SpriteDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Sprite>
     _instance;
} _Sprite_default_instance_;

namespace protobuf_resources_2fSprite_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, preload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, transparent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, smooth_edges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, alpha_tolerance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, separate_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, origin_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, origin_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, bbox_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, bbox_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, bbox_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, bbox_top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, bbox_bottom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, h_tile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, v_tile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, texture_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, for3d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sprite, subimages_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 28, sizeof(Sprite)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sprite_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "resources/Sprite.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::buffers::protobuf_options_2eproto::InitDefaults();
  _Sprite_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Sprite_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026resources/Sprite.proto\022\021buffers.resour"
      "ces\032\roptions.proto\"\327\006\n\006Sprite\022\014\n\004name\030\001 "
      "\001(\t\022\036\n\002id\030\002 \001(\005B\022\202\265\030\016GMX_DEPRECATED\022#\n\007p"
      "reload\030\004 \001(\010B\022\202\265\030\016GMX_DEPRECATED\022\'\n\013tran"
      "sparent\030\005 \001(\010B\022\202\265\030\016GMX_DEPRECATED\022(\n\014smo"
      "oth_edges\030\006 \001(\010B\022\202\265\030\016GMX_DEPRECATED\022)\n\017a"
      "lpha_tolerance\030\007 \001(\005B\020\202\265\030\014coltolerance\022#"
      "\n\rseparate_mask\030\010 \001(\010B\014\202\265\030\010sepmasks\022\033\n\010o"
      "rigin_x\030\t \001(\005B\t\202\265\030\005xorig\022\035\n\010origin_y\030\n \001"
      "(\005B\013\202\265\030\007yorigin\022;\n\005shape\030\013 \001(\0162\037.buffers"
      ".resources.Sprite.ShapeB\013\202\265\030\007colkind\022F\n\t"
      "bbox_mode\030\014 \001(\0162%.buffers.resources.Spri"
      "te.BoundingBoxB\014\202\265\030\010bboxmode\022\021\n\tbbox_lef"
      "t\030\r \001(\005\022\022\n\nbbox_right\030\016 \001(\005\022\020\n\010bbox_top\030"
      "\017 \001(\005\022\023\n\013bbox_bottom\030\020 \001(\005\022\014\n\004type\030\021 \001(\005"
      "\022\031\n\006h_tile\030\022 \001(\005B\t\202\265\030\005HTile\022\031\n\006v_tile\030\023 "
      "\001(\005B\t\202\265\030\005VTile\0226\n\rtexture_group\030\024 \001(\005B\037\202"
      "\265\030\033TextureGroups/TextureGroup0\022\030\n\005for3D\030"
      "\025 \001(\010B\t\202\265\030\005For3D\022\r\n\005width\030\026 \001(\r\022\016\n\006heigh"
      "t\030\027 \001(\r\022\035\n\tsubimages\030\003 \003(\tB\n\202\265\030\006frames\":"
      "\n\005Shape\022\013\n\007PRECISE\020\000\022\r\n\tRECTANGLE\020\001\022\010\n\004D"
      "ISK\020\002\022\013\n\007DIAMOND\020\003\"8\n\013BoundingBox\022\r\n\tAUT"
      "OMATIC\020\000\022\016\n\nFULL_IMAGE\020\001\022\n\n\006MANUAL\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 916);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "resources/Sprite.proto", &protobuf_RegisterTypes);
  ::buffers::protobuf_options_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_resources_2fSprite_2eproto

const ::google::protobuf::EnumDescriptor* Sprite_Shape_descriptor() {
  protobuf_resources_2fSprite_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fSprite_2eproto::file_level_enum_descriptors[0];
}
bool Sprite_Shape_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sprite_Shape Sprite::PRECISE;
const Sprite_Shape Sprite::RECTANGLE;
const Sprite_Shape Sprite::DISK;
const Sprite_Shape Sprite::DIAMOND;
const Sprite_Shape Sprite::Shape_MIN;
const Sprite_Shape Sprite::Shape_MAX;
const int Sprite::Shape_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sprite_BoundingBox_descriptor() {
  protobuf_resources_2fSprite_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fSprite_2eproto::file_level_enum_descriptors[1];
}
bool Sprite_BoundingBox_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sprite_BoundingBox Sprite::AUTOMATIC;
const Sprite_BoundingBox Sprite::FULL_IMAGE;
const Sprite_BoundingBox Sprite::MANUAL;
const Sprite_BoundingBox Sprite::BoundingBox_MIN;
const Sprite_BoundingBox Sprite::BoundingBox_MAX;
const int Sprite::BoundingBox_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sprite::kNameFieldNumber;
const int Sprite::kIdFieldNumber;
const int Sprite::kPreloadFieldNumber;
const int Sprite::kTransparentFieldNumber;
const int Sprite::kSmoothEdgesFieldNumber;
const int Sprite::kAlphaToleranceFieldNumber;
const int Sprite::kSeparateMaskFieldNumber;
const int Sprite::kOriginXFieldNumber;
const int Sprite::kOriginYFieldNumber;
const int Sprite::kShapeFieldNumber;
const int Sprite::kBboxModeFieldNumber;
const int Sprite::kBboxLeftFieldNumber;
const int Sprite::kBboxRightFieldNumber;
const int Sprite::kBboxTopFieldNumber;
const int Sprite::kBboxBottomFieldNumber;
const int Sprite::kTypeFieldNumber;
const int Sprite::kHTileFieldNumber;
const int Sprite::kVTileFieldNumber;
const int Sprite::kTextureGroupFieldNumber;
const int Sprite::kFor3DFieldNumber;
const int Sprite::kWidthFieldNumber;
const int Sprite::kHeightFieldNumber;
const int Sprite::kSubimagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sprite::Sprite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_resources_2fSprite_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Sprite)
}
Sprite::Sprite(const Sprite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      subimages_(from.subimages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&id_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Sprite)
}

void Sprite::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&id_)) + sizeof(height_));
}

Sprite::~Sprite() {
  // @@protoc_insertion_point(destructor:buffers.resources.Sprite)
  SharedDtor();
}

void Sprite::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Sprite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sprite::descriptor() {
  protobuf_resources_2fSprite_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fSprite_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sprite& Sprite::default_instance() {
  protobuf_resources_2fSprite_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sprite* Sprite::New(::google::protobuf::Arena* arena) const {
  Sprite* n = new Sprite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sprite::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Sprite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subimages_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 254u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&origin_x_) -
        reinterpret_cast<char*>(&id_)) + sizeof(origin_x_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&origin_y_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&origin_y_)) + sizeof(type_));
  }
  if (cached_has_bits & 4128768u) {
    ::memset(&h_tile_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&h_tile_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sprite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Sprite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Sprite.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string subimages = 3 [(.buffers.gmx) = "frames"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subimages()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subimages(this->subimages_size() - 1).data(),
            static_cast<int>(this->subimages(this->subimages_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Sprite.subimages");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool preload = 4 [(.buffers.gmx) = "GMX_DEPRECATED"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_preload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool transparent = 5 [(.buffers.gmx) = "GMX_DEPRECATED"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_transparent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transparent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool smooth_edges = 6 [(.buffers.gmx) = "GMX_DEPRECATED"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_smooth_edges();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &smooth_edges_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 alpha_tolerance = 7 [(.buffers.gmx) = "coltolerance"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_alpha_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alpha_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool separate_mask = 8 [(.buffers.gmx) = "sepmasks"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_separate_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &separate_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 origin_x = 9 [(.buffers.gmx) = "xorig"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_origin_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origin_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 origin_y = 10 [(.buffers.gmx) = "yorigin"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_origin_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origin_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Sprite.Shape shape = 11 [(.buffers.gmx) = "colkind"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::buffers::resources::Sprite_Shape_IsValid(value)) {
            set_shape(static_cast< ::buffers::resources::Sprite_Shape >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Sprite.BoundingBox bbox_mode = 12 [(.buffers.gmx) = "bboxmode"];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::buffers::resources::Sprite_BoundingBox_IsValid(value)) {
            set_bbox_mode(static_cast< ::buffers::resources::Sprite_BoundingBox >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bbox_left = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_bbox_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bbox_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bbox_right = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_bbox_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bbox_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bbox_top = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_bbox_top();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bbox_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bbox_bottom = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_bbox_bottom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bbox_bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 h_tile = 18 [(.buffers.gmx) = "HTile"];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_h_tile();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_tile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 v_tile = 19 [(.buffers.gmx) = "VTile"];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_v_tile();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_tile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 texture_group = 20 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_texture_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &texture_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool for3D = 21 [(.buffers.gmx) = "For3D"];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_for3d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &for3d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Sprite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Sprite)
  return false;
#undef DO_
}

void Sprite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Sprite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sprite.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // repeated string subimages = 3 [(.buffers.gmx) = "frames"];
  for (int i = 0, n = this->subimages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subimages(i).data(), static_cast<int>(this->subimages(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sprite.subimages");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->subimages(i), output);
  }

  // optional bool preload = 4 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->preload(), output);
  }

  // optional bool transparent = 5 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->transparent(), output);
  }

  // optional bool smooth_edges = 6 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->smooth_edges(), output);
  }

  // optional int32 alpha_tolerance = 7 [(.buffers.gmx) = "coltolerance"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->alpha_tolerance(), output);
  }

  // optional bool separate_mask = 8 [(.buffers.gmx) = "sepmasks"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->separate_mask(), output);
  }

  // optional int32 origin_x = 9 [(.buffers.gmx) = "xorig"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->origin_x(), output);
  }

  // optional int32 origin_y = 10 [(.buffers.gmx) = "yorigin"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->origin_y(), output);
  }

  // optional .buffers.resources.Sprite.Shape shape = 11 [(.buffers.gmx) = "colkind"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->shape(), output);
  }

  // optional .buffers.resources.Sprite.BoundingBox bbox_mode = 12 [(.buffers.gmx) = "bboxmode"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->bbox_mode(), output);
  }

  // optional int32 bbox_left = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bbox_left(), output);
  }

  // optional int32 bbox_right = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->bbox_right(), output);
  }

  // optional int32 bbox_top = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->bbox_top(), output);
  }

  // optional int32 bbox_bottom = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->bbox_bottom(), output);
  }

  // optional int32 type = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->type(), output);
  }

  // optional int32 h_tile = 18 [(.buffers.gmx) = "HTile"];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->h_tile(), output);
  }

  // optional int32 v_tile = 19 [(.buffers.gmx) = "VTile"];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->v_tile(), output);
  }

  // optional int32 texture_group = 20 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->texture_group(), output);
  }

  // optional bool for3D = 21 [(.buffers.gmx) = "For3D"];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->for3d(), output);
  }

  // optional uint32 width = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->width(), output);
  }

  // optional uint32 height = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Sprite)
}

::google::protobuf::uint8* Sprite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Sprite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sprite.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // repeated string subimages = 3 [(.buffers.gmx) = "frames"];
  for (int i = 0, n = this->subimages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subimages(i).data(), static_cast<int>(this->subimages(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sprite.subimages");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->subimages(i), target);
  }

  // optional bool preload = 4 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->preload(), target);
  }

  // optional bool transparent = 5 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->transparent(), target);
  }

  // optional bool smooth_edges = 6 [(.buffers.gmx) = "GMX_DEPRECATED"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->smooth_edges(), target);
  }

  // optional int32 alpha_tolerance = 7 [(.buffers.gmx) = "coltolerance"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->alpha_tolerance(), target);
  }

  // optional bool separate_mask = 8 [(.buffers.gmx) = "sepmasks"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->separate_mask(), target);
  }

  // optional int32 origin_x = 9 [(.buffers.gmx) = "xorig"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->origin_x(), target);
  }

  // optional int32 origin_y = 10 [(.buffers.gmx) = "yorigin"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->origin_y(), target);
  }

  // optional .buffers.resources.Sprite.Shape shape = 11 [(.buffers.gmx) = "colkind"];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->shape(), target);
  }

  // optional .buffers.resources.Sprite.BoundingBox bbox_mode = 12 [(.buffers.gmx) = "bboxmode"];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->bbox_mode(), target);
  }

  // optional int32 bbox_left = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->bbox_left(), target);
  }

  // optional int32 bbox_right = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->bbox_right(), target);
  }

  // optional int32 bbox_top = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->bbox_top(), target);
  }

  // optional int32 bbox_bottom = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->bbox_bottom(), target);
  }

  // optional int32 type = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->type(), target);
  }

  // optional int32 h_tile = 18 [(.buffers.gmx) = "HTile"];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->h_tile(), target);
  }

  // optional int32 v_tile = 19 [(.buffers.gmx) = "VTile"];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->v_tile(), target);
  }

  // optional int32 texture_group = 20 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->texture_group(), target);
  }

  // optional bool for3D = 21 [(.buffers.gmx) = "For3D"];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->for3d(), target);
  }

  // optional uint32 width = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->width(), target);
  }

  // optional uint32 height = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Sprite)
  return target;
}

size_t Sprite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Sprite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string subimages = 3 [(.buffers.gmx) = "frames"];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->subimages_size());
  for (int i = 0, n = this->subimages_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subimages(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool preload = 4 [(.buffers.gmx) = "GMX_DEPRECATED"];
    if (has_preload()) {
      total_size += 1 + 1;
    }

    // optional bool transparent = 5 [(.buffers.gmx) = "GMX_DEPRECATED"];
    if (has_transparent()) {
      total_size += 1 + 1;
    }

    // optional bool smooth_edges = 6 [(.buffers.gmx) = "GMX_DEPRECATED"];
    if (has_smooth_edges()) {
      total_size += 1 + 1;
    }

    // optional bool separate_mask = 8 [(.buffers.gmx) = "sepmasks"];
    if (has_separate_mask()) {
      total_size += 1 + 1;
    }

    // optional int32 alpha_tolerance = 7 [(.buffers.gmx) = "coltolerance"];
    if (has_alpha_tolerance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alpha_tolerance());
    }

    // optional int32 origin_x = 9 [(.buffers.gmx) = "xorig"];
    if (has_origin_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->origin_x());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 origin_y = 10 [(.buffers.gmx) = "yorigin"];
    if (has_origin_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->origin_y());
    }

    // optional .buffers.resources.Sprite.Shape shape = 11 [(.buffers.gmx) = "colkind"];
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shape());
    }

    // optional .buffers.resources.Sprite.BoundingBox bbox_mode = 12 [(.buffers.gmx) = "bboxmode"];
    if (has_bbox_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bbox_mode());
    }

    // optional int32 bbox_left = 13;
    if (has_bbox_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bbox_left());
    }

    // optional int32 bbox_right = 14;
    if (has_bbox_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bbox_right());
    }

    // optional int32 bbox_top = 15;
    if (has_bbox_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bbox_top());
    }

    // optional int32 bbox_bottom = 16;
    if (has_bbox_bottom()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bbox_bottom());
    }

    // optional int32 type = 17;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional int32 h_tile = 18 [(.buffers.gmx) = "HTile"];
    if (has_h_tile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h_tile());
    }

    // optional int32 v_tile = 19 [(.buffers.gmx) = "VTile"];
    if (has_v_tile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->v_tile());
    }

    // optional int32 texture_group = 20 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];
    if (has_texture_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->texture_group());
    }

    // optional bool for3D = 21 [(.buffers.gmx) = "For3D"];
    if (has_for3d()) {
      total_size += 2 + 1;
    }

    // optional uint32 width = 22;
    if (has_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 23;
    if (has_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sprite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Sprite)
  GOOGLE_DCHECK_NE(&from, this);
  const Sprite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sprite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Sprite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Sprite)
    MergeFrom(*source);
  }
}

void Sprite::MergeFrom(const Sprite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Sprite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subimages_.MergeFrom(from.subimages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      preload_ = from.preload_;
    }
    if (cached_has_bits & 0x00000008u) {
      transparent_ = from.transparent_;
    }
    if (cached_has_bits & 0x00000010u) {
      smooth_edges_ = from.smooth_edges_;
    }
    if (cached_has_bits & 0x00000020u) {
      separate_mask_ = from.separate_mask_;
    }
    if (cached_has_bits & 0x00000040u) {
      alpha_tolerance_ = from.alpha_tolerance_;
    }
    if (cached_has_bits & 0x00000080u) {
      origin_x_ = from.origin_x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      origin_y_ = from.origin_y_;
    }
    if (cached_has_bits & 0x00000200u) {
      shape_ = from.shape_;
    }
    if (cached_has_bits & 0x00000400u) {
      bbox_mode_ = from.bbox_mode_;
    }
    if (cached_has_bits & 0x00000800u) {
      bbox_left_ = from.bbox_left_;
    }
    if (cached_has_bits & 0x00001000u) {
      bbox_right_ = from.bbox_right_;
    }
    if (cached_has_bits & 0x00002000u) {
      bbox_top_ = from.bbox_top_;
    }
    if (cached_has_bits & 0x00004000u) {
      bbox_bottom_ = from.bbox_bottom_;
    }
    if (cached_has_bits & 0x00008000u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      h_tile_ = from.h_tile_;
    }
    if (cached_has_bits & 0x00020000u) {
      v_tile_ = from.v_tile_;
    }
    if (cached_has_bits & 0x00040000u) {
      texture_group_ = from.texture_group_;
    }
    if (cached_has_bits & 0x00080000u) {
      for3d_ = from.for3d_;
    }
    if (cached_has_bits & 0x00100000u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00200000u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sprite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Sprite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sprite::CopyFrom(const Sprite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Sprite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sprite::IsInitialized() const {
  return true;
}

void Sprite::Swap(Sprite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sprite::InternalSwap(Sprite* other) {
  using std::swap;
  subimages_.InternalSwap(&other->subimages_);
  name_.Swap(&other->name_);
  swap(id_, other->id_);
  swap(preload_, other->preload_);
  swap(transparent_, other->transparent_);
  swap(smooth_edges_, other->smooth_edges_);
  swap(separate_mask_, other->separate_mask_);
  swap(alpha_tolerance_, other->alpha_tolerance_);
  swap(origin_x_, other->origin_x_);
  swap(origin_y_, other->origin_y_);
  swap(shape_, other->shape_);
  swap(bbox_mode_, other->bbox_mode_);
  swap(bbox_left_, other->bbox_left_);
  swap(bbox_right_, other->bbox_right_);
  swap(bbox_top_, other->bbox_top_);
  swap(bbox_bottom_, other->bbox_bottom_);
  swap(type_, other->type_);
  swap(h_tile_, other->h_tile_);
  swap(v_tile_, other->v_tile_);
  swap(texture_group_, other->texture_group_);
  swap(for3d_, other->for3d_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sprite::GetMetadata() const {
  protobuf_resources_2fSprite_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fSprite_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sprite

// optional string name = 1;
bool Sprite::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Sprite::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Sprite::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Sprite::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Sprite::name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.name)
  return name_.GetNoArena();
}
void Sprite::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.name)
}
#if LANG_CXX11
void Sprite::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Sprite.name)
}
#endif
void Sprite::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Sprite.name)
}
void Sprite::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Sprite.name)
}
::std::string* Sprite::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Sprite.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sprite::release_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Sprite.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sprite::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Sprite.name)
}

// optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
bool Sprite::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Sprite::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Sprite::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Sprite::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 Sprite::id() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.id)
  return id_;
}
void Sprite::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.id)
}

// optional bool preload = 4 [(.buffers.gmx) = "GMX_DEPRECATED"];
bool Sprite::has_preload() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Sprite::set_has_preload() {
  _has_bits_[0] |= 0x00000004u;
}
void Sprite::clear_has_preload() {
  _has_bits_[0] &= ~0x00000004u;
}
void Sprite::clear_preload() {
  preload_ = false;
  clear_has_preload();
}
bool Sprite::preload() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.preload)
  return preload_;
}
void Sprite::set_preload(bool value) {
  set_has_preload();
  preload_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.preload)
}

// optional bool transparent = 5 [(.buffers.gmx) = "GMX_DEPRECATED"];
bool Sprite::has_transparent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Sprite::set_has_transparent() {
  _has_bits_[0] |= 0x00000008u;
}
void Sprite::clear_has_transparent() {
  _has_bits_[0] &= ~0x00000008u;
}
void Sprite::clear_transparent() {
  transparent_ = false;
  clear_has_transparent();
}
bool Sprite::transparent() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.transparent)
  return transparent_;
}
void Sprite::set_transparent(bool value) {
  set_has_transparent();
  transparent_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.transparent)
}

// optional bool smooth_edges = 6 [(.buffers.gmx) = "GMX_DEPRECATED"];
bool Sprite::has_smooth_edges() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Sprite::set_has_smooth_edges() {
  _has_bits_[0] |= 0x00000010u;
}
void Sprite::clear_has_smooth_edges() {
  _has_bits_[0] &= ~0x00000010u;
}
void Sprite::clear_smooth_edges() {
  smooth_edges_ = false;
  clear_has_smooth_edges();
}
bool Sprite::smooth_edges() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.smooth_edges)
  return smooth_edges_;
}
void Sprite::set_smooth_edges(bool value) {
  set_has_smooth_edges();
  smooth_edges_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.smooth_edges)
}

// optional int32 alpha_tolerance = 7 [(.buffers.gmx) = "coltolerance"];
bool Sprite::has_alpha_tolerance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Sprite::set_has_alpha_tolerance() {
  _has_bits_[0] |= 0x00000040u;
}
void Sprite::clear_has_alpha_tolerance() {
  _has_bits_[0] &= ~0x00000040u;
}
void Sprite::clear_alpha_tolerance() {
  alpha_tolerance_ = 0;
  clear_has_alpha_tolerance();
}
::google::protobuf::int32 Sprite::alpha_tolerance() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.alpha_tolerance)
  return alpha_tolerance_;
}
void Sprite::set_alpha_tolerance(::google::protobuf::int32 value) {
  set_has_alpha_tolerance();
  alpha_tolerance_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.alpha_tolerance)
}

// optional bool separate_mask = 8 [(.buffers.gmx) = "sepmasks"];
bool Sprite::has_separate_mask() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Sprite::set_has_separate_mask() {
  _has_bits_[0] |= 0x00000020u;
}
void Sprite::clear_has_separate_mask() {
  _has_bits_[0] &= ~0x00000020u;
}
void Sprite::clear_separate_mask() {
  separate_mask_ = false;
  clear_has_separate_mask();
}
bool Sprite::separate_mask() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.separate_mask)
  return separate_mask_;
}
void Sprite::set_separate_mask(bool value) {
  set_has_separate_mask();
  separate_mask_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.separate_mask)
}

// optional int32 origin_x = 9 [(.buffers.gmx) = "xorig"];
bool Sprite::has_origin_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Sprite::set_has_origin_x() {
  _has_bits_[0] |= 0x00000080u;
}
void Sprite::clear_has_origin_x() {
  _has_bits_[0] &= ~0x00000080u;
}
void Sprite::clear_origin_x() {
  origin_x_ = 0;
  clear_has_origin_x();
}
::google::protobuf::int32 Sprite::origin_x() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.origin_x)
  return origin_x_;
}
void Sprite::set_origin_x(::google::protobuf::int32 value) {
  set_has_origin_x();
  origin_x_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.origin_x)
}

// optional int32 origin_y = 10 [(.buffers.gmx) = "yorigin"];
bool Sprite::has_origin_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Sprite::set_has_origin_y() {
  _has_bits_[0] |= 0x00000100u;
}
void Sprite::clear_has_origin_y() {
  _has_bits_[0] &= ~0x00000100u;
}
void Sprite::clear_origin_y() {
  origin_y_ = 0;
  clear_has_origin_y();
}
::google::protobuf::int32 Sprite::origin_y() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.origin_y)
  return origin_y_;
}
void Sprite::set_origin_y(::google::protobuf::int32 value) {
  set_has_origin_y();
  origin_y_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.origin_y)
}

// optional .buffers.resources.Sprite.Shape shape = 11 [(.buffers.gmx) = "colkind"];
bool Sprite::has_shape() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Sprite::set_has_shape() {
  _has_bits_[0] |= 0x00000200u;
}
void Sprite::clear_has_shape() {
  _has_bits_[0] &= ~0x00000200u;
}
void Sprite::clear_shape() {
  shape_ = 0;
  clear_has_shape();
}
::buffers::resources::Sprite_Shape Sprite::shape() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.shape)
  return static_cast< ::buffers::resources::Sprite_Shape >(shape_);
}
void Sprite::set_shape(::buffers::resources::Sprite_Shape value) {
  assert(::buffers::resources::Sprite_Shape_IsValid(value));
  set_has_shape();
  shape_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.shape)
}

// optional .buffers.resources.Sprite.BoundingBox bbox_mode = 12 [(.buffers.gmx) = "bboxmode"];
bool Sprite::has_bbox_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Sprite::set_has_bbox_mode() {
  _has_bits_[0] |= 0x00000400u;
}
void Sprite::clear_has_bbox_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
void Sprite::clear_bbox_mode() {
  bbox_mode_ = 0;
  clear_has_bbox_mode();
}
::buffers::resources::Sprite_BoundingBox Sprite::bbox_mode() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.bbox_mode)
  return static_cast< ::buffers::resources::Sprite_BoundingBox >(bbox_mode_);
}
void Sprite::set_bbox_mode(::buffers::resources::Sprite_BoundingBox value) {
  assert(::buffers::resources::Sprite_BoundingBox_IsValid(value));
  set_has_bbox_mode();
  bbox_mode_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.bbox_mode)
}

// optional int32 bbox_left = 13;
bool Sprite::has_bbox_left() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Sprite::set_has_bbox_left() {
  _has_bits_[0] |= 0x00000800u;
}
void Sprite::clear_has_bbox_left() {
  _has_bits_[0] &= ~0x00000800u;
}
void Sprite::clear_bbox_left() {
  bbox_left_ = 0;
  clear_has_bbox_left();
}
::google::protobuf::int32 Sprite::bbox_left() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.bbox_left)
  return bbox_left_;
}
void Sprite::set_bbox_left(::google::protobuf::int32 value) {
  set_has_bbox_left();
  bbox_left_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.bbox_left)
}

// optional int32 bbox_right = 14;
bool Sprite::has_bbox_right() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Sprite::set_has_bbox_right() {
  _has_bits_[0] |= 0x00001000u;
}
void Sprite::clear_has_bbox_right() {
  _has_bits_[0] &= ~0x00001000u;
}
void Sprite::clear_bbox_right() {
  bbox_right_ = 0;
  clear_has_bbox_right();
}
::google::protobuf::int32 Sprite::bbox_right() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.bbox_right)
  return bbox_right_;
}
void Sprite::set_bbox_right(::google::protobuf::int32 value) {
  set_has_bbox_right();
  bbox_right_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.bbox_right)
}

// optional int32 bbox_top = 15;
bool Sprite::has_bbox_top() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Sprite::set_has_bbox_top() {
  _has_bits_[0] |= 0x00002000u;
}
void Sprite::clear_has_bbox_top() {
  _has_bits_[0] &= ~0x00002000u;
}
void Sprite::clear_bbox_top() {
  bbox_top_ = 0;
  clear_has_bbox_top();
}
::google::protobuf::int32 Sprite::bbox_top() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.bbox_top)
  return bbox_top_;
}
void Sprite::set_bbox_top(::google::protobuf::int32 value) {
  set_has_bbox_top();
  bbox_top_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.bbox_top)
}

// optional int32 bbox_bottom = 16;
bool Sprite::has_bbox_bottom() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Sprite::set_has_bbox_bottom() {
  _has_bits_[0] |= 0x00004000u;
}
void Sprite::clear_has_bbox_bottom() {
  _has_bits_[0] &= ~0x00004000u;
}
void Sprite::clear_bbox_bottom() {
  bbox_bottom_ = 0;
  clear_has_bbox_bottom();
}
::google::protobuf::int32 Sprite::bbox_bottom() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.bbox_bottom)
  return bbox_bottom_;
}
void Sprite::set_bbox_bottom(::google::protobuf::int32 value) {
  set_has_bbox_bottom();
  bbox_bottom_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.bbox_bottom)
}

// optional int32 type = 17;
bool Sprite::has_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Sprite::set_has_type() {
  _has_bits_[0] |= 0x00008000u;
}
void Sprite::clear_has_type() {
  _has_bits_[0] &= ~0x00008000u;
}
void Sprite::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 Sprite::type() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.type)
  return type_;
}
void Sprite::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.type)
}

// optional int32 h_tile = 18 [(.buffers.gmx) = "HTile"];
bool Sprite::has_h_tile() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Sprite::set_has_h_tile() {
  _has_bits_[0] |= 0x00010000u;
}
void Sprite::clear_has_h_tile() {
  _has_bits_[0] &= ~0x00010000u;
}
void Sprite::clear_h_tile() {
  h_tile_ = 0;
  clear_has_h_tile();
}
::google::protobuf::int32 Sprite::h_tile() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.h_tile)
  return h_tile_;
}
void Sprite::set_h_tile(::google::protobuf::int32 value) {
  set_has_h_tile();
  h_tile_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.h_tile)
}

// optional int32 v_tile = 19 [(.buffers.gmx) = "VTile"];
bool Sprite::has_v_tile() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Sprite::set_has_v_tile() {
  _has_bits_[0] |= 0x00020000u;
}
void Sprite::clear_has_v_tile() {
  _has_bits_[0] &= ~0x00020000u;
}
void Sprite::clear_v_tile() {
  v_tile_ = 0;
  clear_has_v_tile();
}
::google::protobuf::int32 Sprite::v_tile() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.v_tile)
  return v_tile_;
}
void Sprite::set_v_tile(::google::protobuf::int32 value) {
  set_has_v_tile();
  v_tile_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.v_tile)
}

// optional int32 texture_group = 20 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];
bool Sprite::has_texture_group() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Sprite::set_has_texture_group() {
  _has_bits_[0] |= 0x00040000u;
}
void Sprite::clear_has_texture_group() {
  _has_bits_[0] &= ~0x00040000u;
}
void Sprite::clear_texture_group() {
  texture_group_ = 0;
  clear_has_texture_group();
}
::google::protobuf::int32 Sprite::texture_group() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.texture_group)
  return texture_group_;
}
void Sprite::set_texture_group(::google::protobuf::int32 value) {
  set_has_texture_group();
  texture_group_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.texture_group)
}

// optional bool for3D = 21 [(.buffers.gmx) = "For3D"];
bool Sprite::has_for3d() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Sprite::set_has_for3d() {
  _has_bits_[0] |= 0x00080000u;
}
void Sprite::clear_has_for3d() {
  _has_bits_[0] &= ~0x00080000u;
}
void Sprite::clear_for3d() {
  for3d_ = false;
  clear_has_for3d();
}
bool Sprite::for3d() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.for3D)
  return for3d_;
}
void Sprite::set_for3d(bool value) {
  set_has_for3d();
  for3d_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.for3D)
}

// optional uint32 width = 22;
bool Sprite::has_width() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Sprite::set_has_width() {
  _has_bits_[0] |= 0x00100000u;
}
void Sprite::clear_has_width() {
  _has_bits_[0] &= ~0x00100000u;
}
void Sprite::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 Sprite::width() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.width)
  return width_;
}
void Sprite::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.width)
}

// optional uint32 height = 23;
bool Sprite::has_height() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Sprite::set_has_height() {
  _has_bits_[0] |= 0x00200000u;
}
void Sprite::clear_has_height() {
  _has_bits_[0] &= ~0x00200000u;
}
void Sprite::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 Sprite::height() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.height)
  return height_;
}
void Sprite::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.height)
}

// repeated string subimages = 3 [(.buffers.gmx) = "frames"];
int Sprite::subimages_size() const {
  return subimages_.size();
}
void Sprite::clear_subimages() {
  subimages_.Clear();
}
const ::std::string& Sprite::subimages(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.subimages)
  return subimages_.Get(index);
}
::std::string* Sprite::mutable_subimages(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Sprite.subimages)
  return subimages_.Mutable(index);
}
void Sprite::set_subimages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.subimages)
  subimages_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Sprite::set_subimages(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.subimages)
  subimages_.Mutable(index)->assign(std::move(value));
}
#endif
void Sprite::set_subimages(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subimages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:buffers.resources.Sprite.subimages)
}
void Sprite::set_subimages(int index, const char* value, size_t size) {
  subimages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Sprite.subimages)
}
::std::string* Sprite::add_subimages() {
  // @@protoc_insertion_point(field_add_mutable:buffers.resources.Sprite.subimages)
  return subimages_.Add();
}
void Sprite::add_subimages(const ::std::string& value) {
  subimages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:buffers.resources.Sprite.subimages)
}
#if LANG_CXX11
void Sprite::add_subimages(::std::string&& value) {
  subimages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:buffers.resources.Sprite.subimages)
}
#endif
void Sprite::add_subimages(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subimages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:buffers.resources.Sprite.subimages)
}
void Sprite::add_subimages(const char* value, size_t size) {
  subimages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:buffers.resources.Sprite.subimages)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Sprite::subimages() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Sprite.subimages)
  return subimages_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Sprite::mutable_subimages() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Sprite.subimages)
  return &subimages_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace resources
}  // namespace buffers

// @@protoc_insertion_point(global_scope)
