// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resources/GameInformation.proto

#ifndef PROTOBUF_resources_2fGameInformation_2eproto__INCLUDED
#define PROTOBUF_resources_2fGameInformation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_resources_2fGameInformation_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGameInformationImpl();
void InitDefaultsGameInformation();
inline void InitDefaults() {
  InitDefaultsGameInformation();
}
}  // namespace protobuf_resources_2fGameInformation_2eproto
namespace buffers {
namespace resources {
class GameInformation;
class GameInformationDefaultTypeInternal;
extern GameInformationDefaultTypeInternal _GameInformation_default_instance_;
}  // namespace resources
}  // namespace buffers
namespace buffers {
namespace resources {

// ===================================================================

class GameInformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.GameInformation) */ {
 public:
  GameInformation();
  virtual ~GameInformation();

  GameInformation(const GameInformation& from);

  inline GameInformation& operator=(const GameInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameInformation(GameInformation&& from) noexcept
    : GameInformation() {
    *this = ::std::move(from);
  }

  inline GameInformation& operator=(GameInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameInformation* internal_default_instance() {
    return reinterpret_cast<const GameInformation*>(
               &_GameInformation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GameInformation* other);
  friend void swap(GameInformation& a, GameInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameInformation* New() const PROTOBUF_FINAL { return New(NULL); }

  GameInformation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameInformation& from);
  void MergeFrom(const GameInformation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameInformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string form_caption = 3;
  bool has_form_caption() const;
  void clear_form_caption();
  static const int kFormCaptionFieldNumber = 3;
  const ::std::string& form_caption() const;
  void set_form_caption(const ::std::string& value);
  #if LANG_CXX11
  void set_form_caption(::std::string&& value);
  #endif
  void set_form_caption(const char* value);
  void set_form_caption(const char* value, size_t size);
  ::std::string* mutable_form_caption();
  ::std::string* release_form_caption();
  void set_allocated_form_caption(::std::string* form_caption);

  // optional string text = 12;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 12;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional int32 background_color = 1;
  bool has_background_color() const;
  void clear_background_color();
  static const int kBackgroundColorFieldNumber = 1;
  ::google::protobuf::int32 background_color() const;
  void set_background_color(::google::protobuf::int32 value);

  // optional int32 left = 4;
  bool has_left() const;
  void clear_left();
  static const int kLeftFieldNumber = 4;
  ::google::protobuf::int32 left() const;
  void set_left(::google::protobuf::int32 value);

  // optional int32 top = 5;
  bool has_top() const;
  void clear_top();
  static const int kTopFieldNumber = 5;
  ::google::protobuf::int32 top() const;
  void set_top(::google::protobuf::int32 value);

  // optional int32 right = 6;
  bool has_right() const;
  void clear_right();
  static const int kRightFieldNumber = 6;
  ::google::protobuf::int32 right() const;
  void set_right(::google::protobuf::int32 value);

  // optional int32 bottom = 7;
  bool has_bottom() const;
  void clear_bottom();
  static const int kBottomFieldNumber = 7;
  ::google::protobuf::int32 bottom() const;
  void set_bottom(::google::protobuf::int32 value);

  // optional bool embed_game_window = 2;
  bool has_embed_game_window() const;
  void clear_embed_game_window();
  static const int kEmbedGameWindowFieldNumber = 2;
  bool embed_game_window() const;
  void set_embed_game_window(bool value);

  // optional bool show_border = 8;
  bool has_show_border() const;
  void clear_show_border();
  static const int kShowBorderFieldNumber = 8;
  bool show_border() const;
  void set_show_border(bool value);

  // optional bool allow_resize = 9;
  bool has_allow_resize() const;
  void clear_allow_resize();
  static const int kAllowResizeFieldNumber = 9;
  bool allow_resize() const;
  void set_allow_resize(bool value);

  // optional bool stay_on_top = 10;
  bool has_stay_on_top() const;
  void clear_stay_on_top();
  static const int kStayOnTopFieldNumber = 10;
  bool stay_on_top() const;
  void set_stay_on_top(bool value);

  // optional bool pause_game = 11;
  bool has_pause_game() const;
  void clear_pause_game();
  static const int kPauseGameFieldNumber = 11;
  bool pause_game() const;
  void set_pause_game(bool value);

  // @@protoc_insertion_point(class_scope:buffers.resources.GameInformation)
 private:
  void set_has_background_color();
  void clear_has_background_color();
  void set_has_embed_game_window();
  void clear_has_embed_game_window();
  void set_has_form_caption();
  void clear_has_form_caption();
  void set_has_left();
  void clear_has_left();
  void set_has_top();
  void clear_has_top();
  void set_has_right();
  void clear_has_right();
  void set_has_bottom();
  void clear_has_bottom();
  void set_has_show_border();
  void clear_has_show_border();
  void set_has_allow_resize();
  void clear_has_allow_resize();
  void set_has_stay_on_top();
  void clear_has_stay_on_top();
  void set_has_pause_game();
  void clear_has_pause_game();
  void set_has_text();
  void clear_has_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr form_caption_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::int32 background_color_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 right_;
  ::google::protobuf::int32 bottom_;
  bool embed_game_window_;
  bool show_border_;
  bool allow_resize_;
  bool stay_on_top_;
  bool pause_game_;
  friend struct ::protobuf_resources_2fGameInformation_2eproto::TableStruct;
  friend void ::protobuf_resources_2fGameInformation_2eproto::InitDefaultsGameInformationImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameInformation

// optional int32 background_color = 1;
inline bool GameInformation::has_background_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameInformation::set_has_background_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameInformation::clear_has_background_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameInformation::clear_background_color() {
  background_color_ = 0;
  clear_has_background_color();
}
inline ::google::protobuf::int32 GameInformation::background_color() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.background_color)
  return background_color_;
}
inline void GameInformation::set_background_color(::google::protobuf::int32 value) {
  set_has_background_color();
  background_color_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.background_color)
}

// optional bool embed_game_window = 2;
inline bool GameInformation::has_embed_game_window() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameInformation::set_has_embed_game_window() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameInformation::clear_has_embed_game_window() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameInformation::clear_embed_game_window() {
  embed_game_window_ = false;
  clear_has_embed_game_window();
}
inline bool GameInformation::embed_game_window() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.embed_game_window)
  return embed_game_window_;
}
inline void GameInformation::set_embed_game_window(bool value) {
  set_has_embed_game_window();
  embed_game_window_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.embed_game_window)
}

// optional string form_caption = 3;
inline bool GameInformation::has_form_caption() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameInformation::set_has_form_caption() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameInformation::clear_has_form_caption() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameInformation::clear_form_caption() {
  form_caption_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_form_caption();
}
inline const ::std::string& GameInformation::form_caption() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.form_caption)
  return form_caption_.GetNoArena();
}
inline void GameInformation::set_form_caption(const ::std::string& value) {
  set_has_form_caption();
  form_caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.form_caption)
}
#if LANG_CXX11
inline void GameInformation::set_form_caption(::std::string&& value) {
  set_has_form_caption();
  form_caption_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.GameInformation.form_caption)
}
#endif
inline void GameInformation::set_form_caption(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_form_caption();
  form_caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.GameInformation.form_caption)
}
inline void GameInformation::set_form_caption(const char* value, size_t size) {
  set_has_form_caption();
  form_caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.GameInformation.form_caption)
}
inline ::std::string* GameInformation::mutable_form_caption() {
  set_has_form_caption();
  // @@protoc_insertion_point(field_mutable:buffers.resources.GameInformation.form_caption)
  return form_caption_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameInformation::release_form_caption() {
  // @@protoc_insertion_point(field_release:buffers.resources.GameInformation.form_caption)
  clear_has_form_caption();
  return form_caption_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameInformation::set_allocated_form_caption(::std::string* form_caption) {
  if (form_caption != NULL) {
    set_has_form_caption();
  } else {
    clear_has_form_caption();
  }
  form_caption_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), form_caption);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.GameInformation.form_caption)
}

// optional int32 left = 4;
inline bool GameInformation::has_left() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameInformation::set_has_left() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameInformation::clear_has_left() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameInformation::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline ::google::protobuf::int32 GameInformation::left() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.left)
  return left_;
}
inline void GameInformation::set_left(::google::protobuf::int32 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.left)
}

// optional int32 top = 5;
inline bool GameInformation::has_top() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameInformation::set_has_top() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameInformation::clear_has_top() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameInformation::clear_top() {
  top_ = 0;
  clear_has_top();
}
inline ::google::protobuf::int32 GameInformation::top() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.top)
  return top_;
}
inline void GameInformation::set_top(::google::protobuf::int32 value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.top)
}

// optional int32 right = 6;
inline bool GameInformation::has_right() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameInformation::set_has_right() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameInformation::clear_has_right() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameInformation::clear_right() {
  right_ = 0;
  clear_has_right();
}
inline ::google::protobuf::int32 GameInformation::right() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.right)
  return right_;
}
inline void GameInformation::set_right(::google::protobuf::int32 value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.right)
}

// optional int32 bottom = 7;
inline bool GameInformation::has_bottom() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameInformation::set_has_bottom() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameInformation::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameInformation::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
inline ::google::protobuf::int32 GameInformation::bottom() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.bottom)
  return bottom_;
}
inline void GameInformation::set_bottom(::google::protobuf::int32 value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.bottom)
}

// optional bool show_border = 8;
inline bool GameInformation::has_show_border() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameInformation::set_has_show_border() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameInformation::clear_has_show_border() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameInformation::clear_show_border() {
  show_border_ = false;
  clear_has_show_border();
}
inline bool GameInformation::show_border() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.show_border)
  return show_border_;
}
inline void GameInformation::set_show_border(bool value) {
  set_has_show_border();
  show_border_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.show_border)
}

// optional bool allow_resize = 9;
inline bool GameInformation::has_allow_resize() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GameInformation::set_has_allow_resize() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GameInformation::clear_has_allow_resize() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GameInformation::clear_allow_resize() {
  allow_resize_ = false;
  clear_has_allow_resize();
}
inline bool GameInformation::allow_resize() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.allow_resize)
  return allow_resize_;
}
inline void GameInformation::set_allow_resize(bool value) {
  set_has_allow_resize();
  allow_resize_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.allow_resize)
}

// optional bool stay_on_top = 10;
inline bool GameInformation::has_stay_on_top() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GameInformation::set_has_stay_on_top() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GameInformation::clear_has_stay_on_top() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GameInformation::clear_stay_on_top() {
  stay_on_top_ = false;
  clear_has_stay_on_top();
}
inline bool GameInformation::stay_on_top() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.stay_on_top)
  return stay_on_top_;
}
inline void GameInformation::set_stay_on_top(bool value) {
  set_has_stay_on_top();
  stay_on_top_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.stay_on_top)
}

// optional bool pause_game = 11;
inline bool GameInformation::has_pause_game() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GameInformation::set_has_pause_game() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GameInformation::clear_has_pause_game() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GameInformation::clear_pause_game() {
  pause_game_ = false;
  clear_has_pause_game();
}
inline bool GameInformation::pause_game() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.pause_game)
  return pause_game_;
}
inline void GameInformation::set_pause_game(bool value) {
  set_has_pause_game();
  pause_game_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.pause_game)
}

// optional string text = 12;
inline bool GameInformation::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameInformation::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameInformation::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameInformation::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& GameInformation::text() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.text)
  return text_.GetNoArena();
}
inline void GameInformation::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.text)
}
#if LANG_CXX11
inline void GameInformation::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.GameInformation.text)
}
#endif
inline void GameInformation::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.GameInformation.text)
}
inline void GameInformation::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.GameInformation.text)
}
inline ::std::string* GameInformation::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:buffers.resources.GameInformation.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameInformation::release_text() {
  // @@protoc_insertion_point(field_release:buffers.resources.GameInformation.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameInformation::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.GameInformation.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace resources
}  // namespace buffers

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_resources_2fGameInformation_2eproto__INCLUDED
