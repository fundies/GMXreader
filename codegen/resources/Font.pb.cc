// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resources/Font.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "resources/Font.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace buffers {
namespace resources {
class Font_GlyphDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Font_Glyph>
     _instance;
} _Font_Glyph_default_instance_;
class Font_RangeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Font_Range>
     _instance;
} _Font_Range_default_instance_;
class FontDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Font>
     _instance;
} _Font_default_instance_;

namespace protobuf_resources_2fFont_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font_Glyph, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font_Glyph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font_Glyph, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font_Glyph, baseline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font_Glyph, advance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font_Glyph, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font_Glyph, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font_Glyph, data_),
  1,
  2,
  3,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font_Range, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font_Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font_Range, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font_Range, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font_Range, glyphs_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font, font_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font, bold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font, italic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Font, ranges_),
  0,
  2,
  1,
  3,
  4,
  5,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(Font_Glyph)},
  { 17, 25, sizeof(Font_Range)},
  { 28, 40, sizeof(Font)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Font_Glyph_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Font_Range_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Font_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "resources/Font.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::buffers::protobuf_options_2eproto::InitDefaults();
  _Font_Glyph_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Font_Glyph_default_instance_);_Font_Range_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Font_Range_default_instance_);_Font_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Font_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024resources/Font.proto\022\021buffers.resource"
      "s\032\roptions.proto\"\323\002\n\004Font\022\014\n\004name\030\001 \001(\t\022"
      "\n\n\002id\030\002 \001(\005\022\033\n\tfont_name\030\003 \001(\tB\010\202\265\030\004name"
      "\022\014\n\004size\030\004 \001(\005\022\014\n\004bold\030\005 \001(\010\022\016\n\006italic\030\006"
      " \001(\010\022-\n\006ranges\030\007 \003(\0132\035.buffers.resources"
      ".Font.Range\032g\n\005Glyph\022\016\n\006origin\030\001 \001(\001\022\020\n\010"
      "baseline\030\002 \001(\001\022\017\n\007advance\030\003 \001(\001\022\r\n\005width"
      "\030\004 \001(\005\022\016\n\006height\030\005 \001(\005\022\014\n\004data\030\006 \001(\014\032P\n\005"
      "Range\022\013\n\003min\030\001 \001(\005\022\013\n\003max\030\002 \001(\005\022-\n\006glyph"
      "s\030\003 \003(\0132\035.buffers.resources.Font.Glyph"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 398);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "resources/Font.proto", &protobuf_RegisterTypes);
  ::buffers::protobuf_options_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_resources_2fFont_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Font_Glyph::kOriginFieldNumber;
const int Font_Glyph::kBaselineFieldNumber;
const int Font_Glyph::kAdvanceFieldNumber;
const int Font_Glyph::kWidthFieldNumber;
const int Font_Glyph::kHeightFieldNumber;
const int Font_Glyph::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Font_Glyph::Font_Glyph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_resources_2fFont_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Font.Glyph)
}
Font_Glyph::Font_Glyph(const Font_Glyph& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&origin_, &from.origin_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Font.Glyph)
}

void Font_Glyph::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(height_));
}

Font_Glyph::~Font_Glyph() {
  // @@protoc_insertion_point(destructor:buffers.resources.Font.Glyph)
  SharedDtor();
}

void Font_Glyph::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Font_Glyph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Font_Glyph::descriptor() {
  protobuf_resources_2fFont_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fFont_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Font_Glyph& Font_Glyph::default_instance() {
  protobuf_resources_2fFont_2eproto::InitDefaults();
  return *internal_default_instance();
}

Font_Glyph* Font_Glyph::New(::google::protobuf::Arena* arena) const {
  Font_Glyph* n = new Font_Glyph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Font_Glyph::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Font.Glyph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 62u) {
    ::memset(&origin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&origin_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Font_Glyph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Font.Glyph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_origin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &origin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double baseline = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_baseline();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &baseline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double advance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_advance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &advance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Font.Glyph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Font.Glyph)
  return false;
#undef DO_
}

void Font_Glyph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Font.Glyph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double origin = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->origin(), output);
  }

  // optional double baseline = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->baseline(), output);
  }

  // optional double advance = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->advance(), output);
  }

  // optional int32 width = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // optional int32 height = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // optional bytes data = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Font.Glyph)
}

::google::protobuf::uint8* Font_Glyph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Font.Glyph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double origin = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->origin(), target);
  }

  // optional double baseline = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->baseline(), target);
  }

  // optional double advance = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->advance(), target);
  }

  // optional int32 width = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // optional int32 height = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  // optional bytes data = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Font.Glyph)
  return target;
}

size_t Font_Glyph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Font.Glyph)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional double origin = 1;
    if (has_origin()) {
      total_size += 1 + 8;
    }

    // optional double baseline = 2;
    if (has_baseline()) {
      total_size += 1 + 8;
    }

    // optional double advance = 3;
    if (has_advance()) {
      total_size += 1 + 8;
    }

    // optional int32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Font_Glyph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Font.Glyph)
  GOOGLE_DCHECK_NE(&from, this);
  const Font_Glyph* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Font_Glyph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Font.Glyph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Font.Glyph)
    MergeFrom(*source);
  }
}

void Font_Glyph::MergeFrom(const Font_Glyph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Font.Glyph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      origin_ = from.origin_;
    }
    if (cached_has_bits & 0x00000004u) {
      baseline_ = from.baseline_;
    }
    if (cached_has_bits & 0x00000008u) {
      advance_ = from.advance_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Font_Glyph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Font.Glyph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Font_Glyph::CopyFrom(const Font_Glyph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Font.Glyph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Font_Glyph::IsInitialized() const {
  return true;
}

void Font_Glyph::Swap(Font_Glyph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Font_Glyph::InternalSwap(Font_Glyph* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(origin_, other->origin_);
  swap(baseline_, other->baseline_);
  swap(advance_, other->advance_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Font_Glyph::GetMetadata() const {
  protobuf_resources_2fFont_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fFont_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Font_Glyph

// optional double origin = 1;
bool Font_Glyph::has_origin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Font_Glyph::set_has_origin() {
  _has_bits_[0] |= 0x00000002u;
}
void Font_Glyph::clear_has_origin() {
  _has_bits_[0] &= ~0x00000002u;
}
void Font_Glyph::clear_origin() {
  origin_ = 0;
  clear_has_origin();
}
double Font_Glyph::origin() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Font.Glyph.origin)
  return origin_;
}
void Font_Glyph::set_origin(double value) {
  set_has_origin();
  origin_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Font.Glyph.origin)
}

// optional double baseline = 2;
bool Font_Glyph::has_baseline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Font_Glyph::set_has_baseline() {
  _has_bits_[0] |= 0x00000004u;
}
void Font_Glyph::clear_has_baseline() {
  _has_bits_[0] &= ~0x00000004u;
}
void Font_Glyph::clear_baseline() {
  baseline_ = 0;
  clear_has_baseline();
}
double Font_Glyph::baseline() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Font.Glyph.baseline)
  return baseline_;
}
void Font_Glyph::set_baseline(double value) {
  set_has_baseline();
  baseline_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Font.Glyph.baseline)
}

// optional double advance = 3;
bool Font_Glyph::has_advance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Font_Glyph::set_has_advance() {
  _has_bits_[0] |= 0x00000008u;
}
void Font_Glyph::clear_has_advance() {
  _has_bits_[0] &= ~0x00000008u;
}
void Font_Glyph::clear_advance() {
  advance_ = 0;
  clear_has_advance();
}
double Font_Glyph::advance() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Font.Glyph.advance)
  return advance_;
}
void Font_Glyph::set_advance(double value) {
  set_has_advance();
  advance_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Font.Glyph.advance)
}

// optional int32 width = 4;
bool Font_Glyph::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Font_Glyph::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
void Font_Glyph::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void Font_Glyph::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 Font_Glyph::width() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Font.Glyph.width)
  return width_;
}
void Font_Glyph::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Font.Glyph.width)
}

// optional int32 height = 5;
bool Font_Glyph::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Font_Glyph::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
void Font_Glyph::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void Font_Glyph::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 Font_Glyph::height() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Font.Glyph.height)
  return height_;
}
void Font_Glyph::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Font.Glyph.height)
}

// optional bytes data = 6;
bool Font_Glyph::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Font_Glyph::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void Font_Glyph::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void Font_Glyph::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Font_Glyph::data() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Font.Glyph.data)
  return data_.GetNoArena();
}
void Font_Glyph::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Font.Glyph.data)
}
#if LANG_CXX11
void Font_Glyph::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Font.Glyph.data)
}
#endif
void Font_Glyph::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Font.Glyph.data)
}
void Font_Glyph::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Font.Glyph.data)
}
::std::string* Font_Glyph::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Font.Glyph.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Font_Glyph::release_data() {
  // @@protoc_insertion_point(field_release:buffers.resources.Font.Glyph.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Font_Glyph::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Font.Glyph.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Font_Range::kMinFieldNumber;
const int Font_Range::kMaxFieldNumber;
const int Font_Range::kGlyphsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Font_Range::Font_Range()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_resources_2fFont_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Font.Range)
}
Font_Range::Font_Range(const Font_Range& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      glyphs_(from.glyphs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Font.Range)
}

void Font_Range::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

Font_Range::~Font_Range() {
  // @@protoc_insertion_point(destructor:buffers.resources.Font.Range)
  SharedDtor();
}

void Font_Range::SharedDtor() {
}

void Font_Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Font_Range::descriptor() {
  protobuf_resources_2fFont_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fFont_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Font_Range& Font_Range::default_instance() {
  protobuf_resources_2fFont_2eproto::InitDefaults();
  return *internal_default_instance();
}

Font_Range* Font_Range::New(::google::protobuf::Arena* arena) const {
  Font_Range* n = new Font_Range;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Font_Range::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Font.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  glyphs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Font_Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Font.Range)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .buffers.resources.Font.Glyph glyphs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_glyphs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Font.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Font.Range)
  return false;
#undef DO_
}

void Font_Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Font.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 min = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min(), output);
  }

  // optional int32 max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max(), output);
  }

  // repeated .buffers.resources.Font.Glyph glyphs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->glyphs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->glyphs(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Font.Range)
}

::google::protobuf::uint8* Font_Range::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Font.Range)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->min(), target);
  }

  // optional int32 max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max(), target);
  }

  // repeated .buffers.resources.Font.Glyph glyphs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->glyphs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->glyphs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Font.Range)
  return target;
}

size_t Font_Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Font.Range)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .buffers.resources.Font.Glyph glyphs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->glyphs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->glyphs(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 min = 1;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min());
    }

    // optional int32 max = 2;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Font_Range::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Font.Range)
  GOOGLE_DCHECK_NE(&from, this);
  const Font_Range* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Font_Range>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Font.Range)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Font.Range)
    MergeFrom(*source);
  }
}

void Font_Range::MergeFrom(const Font_Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Font.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  glyphs_.MergeFrom(from.glyphs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Font_Range::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Font.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Font_Range::CopyFrom(const Font_Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Font.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Font_Range::IsInitialized() const {
  return true;
}

void Font_Range::Swap(Font_Range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Font_Range::InternalSwap(Font_Range* other) {
  using std::swap;
  glyphs_.InternalSwap(&other->glyphs_);
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Font_Range::GetMetadata() const {
  protobuf_resources_2fFont_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fFont_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Font_Range

// optional int32 min = 1;
bool Font_Range::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Font_Range::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
void Font_Range::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
void Font_Range::clear_min() {
  min_ = 0;
  clear_has_min();
}
::google::protobuf::int32 Font_Range::min() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Font.Range.min)
  return min_;
}
void Font_Range::set_min(::google::protobuf::int32 value) {
  set_has_min();
  min_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Font.Range.min)
}

// optional int32 max = 2;
bool Font_Range::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Font_Range::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
void Font_Range::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
void Font_Range::clear_max() {
  max_ = 0;
  clear_has_max();
}
::google::protobuf::int32 Font_Range::max() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Font.Range.max)
  return max_;
}
void Font_Range::set_max(::google::protobuf::int32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Font.Range.max)
}

// repeated .buffers.resources.Font.Glyph glyphs = 3;
int Font_Range::glyphs_size() const {
  return glyphs_.size();
}
void Font_Range::clear_glyphs() {
  glyphs_.Clear();
}
const ::buffers::resources::Font_Glyph& Font_Range::glyphs(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Font.Range.glyphs)
  return glyphs_.Get(index);
}
::buffers::resources::Font_Glyph* Font_Range::mutable_glyphs(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Font.Range.glyphs)
  return glyphs_.Mutable(index);
}
::buffers::resources::Font_Glyph* Font_Range::add_glyphs() {
  // @@protoc_insertion_point(field_add:buffers.resources.Font.Range.glyphs)
  return glyphs_.Add();
}
::google::protobuf::RepeatedPtrField< ::buffers::resources::Font_Glyph >*
Font_Range::mutable_glyphs() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Font.Range.glyphs)
  return &glyphs_;
}
const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Font_Glyph >&
Font_Range::glyphs() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Font.Range.glyphs)
  return glyphs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Font::kNameFieldNumber;
const int Font::kIdFieldNumber;
const int Font::kFontNameFieldNumber;
const int Font::kSizeFieldNumber;
const int Font::kBoldFieldNumber;
const int Font::kItalicFieldNumber;
const int Font::kRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Font::Font()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_resources_2fFont_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Font)
}
Font::Font(const Font& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ranges_(from.ranges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  font_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_font_name()) {
    font_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.font_name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&italic_) -
    reinterpret_cast<char*>(&id_)) + sizeof(italic_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Font)
}

void Font::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  font_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&italic_) -
      reinterpret_cast<char*>(&id_)) + sizeof(italic_));
}

Font::~Font() {
  // @@protoc_insertion_point(destructor:buffers.resources.Font)
  SharedDtor();
}

void Font::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  font_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Font::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Font::descriptor() {
  protobuf_resources_2fFont_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fFont_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Font& Font::default_instance() {
  protobuf_resources_2fFont_2eproto::InitDefaults();
  return *internal_default_instance();
}

Font* Font::New(::google::protobuf::Arena* arena) const {
  Font* n = new Font;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Font::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Font)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!font_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*font_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&italic_) -
        reinterpret_cast<char*>(&id_)) + sizeof(italic_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Font::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Font)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Font.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string font_name = 3 [(.buffers.gmx) = "name"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_font_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->font_name().data(), static_cast<int>(this->font_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Font.font_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bold = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_bold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool italic = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_italic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &italic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .buffers.resources.Font.Range ranges = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Font)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Font)
  return false;
#undef DO_
}

void Font::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Font)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Font.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional string font_name = 3 [(.buffers.gmx) = "name"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->font_name().data(), static_cast<int>(this->font_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Font.font_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->font_name(), output);
  }

  // optional int32 size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  // optional bool bold = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bold(), output);
  }

  // optional bool italic = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->italic(), output);
  }

  // repeated .buffers.resources.Font.Range ranges = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ranges_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ranges(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Font)
}

::google::protobuf::uint8* Font::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Font)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Font.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional string font_name = 3 [(.buffers.gmx) = "name"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->font_name().data(), static_cast<int>(this->font_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Font.font_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->font_name(), target);
  }

  // optional int32 size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size(), target);
  }

  // optional bool bold = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bold(), target);
  }

  // optional bool italic = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->italic(), target);
  }

  // repeated .buffers.resources.Font.Range ranges = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ranges_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->ranges(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Font)
  return target;
}

size_t Font::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Font)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .buffers.resources.Font.Range ranges = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->ranges_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ranges(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string font_name = 3 [(.buffers.gmx) = "name"];
    if (has_font_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->font_name());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bool bold = 5;
    if (has_bold()) {
      total_size += 1 + 1;
    }

    // optional bool italic = 6;
    if (has_italic()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Font::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Font)
  GOOGLE_DCHECK_NE(&from, this);
  const Font* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Font>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Font)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Font)
    MergeFrom(*source);
  }
}

void Font::MergeFrom(const Font& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Font)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_font_name();
      font_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.font_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      bold_ = from.bold_;
    }
    if (cached_has_bits & 0x00000020u) {
      italic_ = from.italic_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Font::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Font)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Font::CopyFrom(const Font& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Font)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Font::IsInitialized() const {
  return true;
}

void Font::Swap(Font* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Font::InternalSwap(Font* other) {
  using std::swap;
  ranges_.InternalSwap(&other->ranges_);
  name_.Swap(&other->name_);
  font_name_.Swap(&other->font_name_);
  swap(id_, other->id_);
  swap(size_, other->size_);
  swap(bold_, other->bold_);
  swap(italic_, other->italic_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Font::GetMetadata() const {
  protobuf_resources_2fFont_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fFont_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Font

// optional string name = 1;
bool Font::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Font::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Font::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Font::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Font::name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Font.name)
  return name_.GetNoArena();
}
void Font::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Font.name)
}
#if LANG_CXX11
void Font::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Font.name)
}
#endif
void Font::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Font.name)
}
void Font::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Font.name)
}
::std::string* Font::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Font.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Font::release_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Font.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Font::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Font.name)
}

// optional int32 id = 2;
bool Font::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Font::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Font::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Font::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 Font::id() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Font.id)
  return id_;
}
void Font::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Font.id)
}

// optional string font_name = 3 [(.buffers.gmx) = "name"];
bool Font::has_font_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Font::set_has_font_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Font::clear_has_font_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Font::clear_font_name() {
  font_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_font_name();
}
const ::std::string& Font::font_name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Font.font_name)
  return font_name_.GetNoArena();
}
void Font::set_font_name(const ::std::string& value) {
  set_has_font_name();
  font_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Font.font_name)
}
#if LANG_CXX11
void Font::set_font_name(::std::string&& value) {
  set_has_font_name();
  font_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Font.font_name)
}
#endif
void Font::set_font_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_font_name();
  font_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Font.font_name)
}
void Font::set_font_name(const char* value, size_t size) {
  set_has_font_name();
  font_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Font.font_name)
}
::std::string* Font::mutable_font_name() {
  set_has_font_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Font.font_name)
  return font_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Font::release_font_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Font.font_name)
  clear_has_font_name();
  return font_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Font::set_allocated_font_name(::std::string* font_name) {
  if (font_name != NULL) {
    set_has_font_name();
  } else {
    clear_has_font_name();
  }
  font_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), font_name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Font.font_name)
}

// optional int32 size = 4;
bool Font::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Font::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
void Font::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void Font::clear_size() {
  size_ = 0;
  clear_has_size();
}
::google::protobuf::int32 Font::size() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Font.size)
  return size_;
}
void Font::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Font.size)
}

// optional bool bold = 5;
bool Font::has_bold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Font::set_has_bold() {
  _has_bits_[0] |= 0x00000010u;
}
void Font::clear_has_bold() {
  _has_bits_[0] &= ~0x00000010u;
}
void Font::clear_bold() {
  bold_ = false;
  clear_has_bold();
}
bool Font::bold() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Font.bold)
  return bold_;
}
void Font::set_bold(bool value) {
  set_has_bold();
  bold_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Font.bold)
}

// optional bool italic = 6;
bool Font::has_italic() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Font::set_has_italic() {
  _has_bits_[0] |= 0x00000020u;
}
void Font::clear_has_italic() {
  _has_bits_[0] &= ~0x00000020u;
}
void Font::clear_italic() {
  italic_ = false;
  clear_has_italic();
}
bool Font::italic() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Font.italic)
  return italic_;
}
void Font::set_italic(bool value) {
  set_has_italic();
  italic_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Font.italic)
}

// repeated .buffers.resources.Font.Range ranges = 7;
int Font::ranges_size() const {
  return ranges_.size();
}
void Font::clear_ranges() {
  ranges_.Clear();
}
const ::buffers::resources::Font_Range& Font::ranges(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Font.ranges)
  return ranges_.Get(index);
}
::buffers::resources::Font_Range* Font::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Font.ranges)
  return ranges_.Mutable(index);
}
::buffers::resources::Font_Range* Font::add_ranges() {
  // @@protoc_insertion_point(field_add:buffers.resources.Font.ranges)
  return ranges_.Add();
}
::google::protobuf::RepeatedPtrField< ::buffers::resources::Font_Range >*
Font::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Font.ranges)
  return &ranges_;
}
const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Font_Range >&
Font::ranges() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Font.ranges)
  return ranges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace resources
}  // namespace buffers

// @@protoc_insertion_point(global_scope)
