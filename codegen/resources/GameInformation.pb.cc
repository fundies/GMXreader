// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resources/GameInformation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "resources/GameInformation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace buffers {
namespace resources {
class GameInformationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GameInformation>
     _instance;
} _GameInformation_default_instance_;

namespace protobuf_resources_2fGameInformation_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInformation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInformation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInformation, background_color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInformation, embed_game_window_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInformation, form_caption_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInformation, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInformation, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInformation, right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInformation, bottom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInformation, show_border_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInformation, allow_resize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInformation, stay_on_top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInformation, pause_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInformation, text_),
  2,
  7,
  0,
  3,
  4,
  5,
  6,
  8,
  9,
  10,
  11,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(GameInformation)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameInformation_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "resources/GameInformation.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::buffers::protobuf_options_2eproto::InitDefaults();
  _GameInformation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GameInformation_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\037resources/GameInformation.proto\022\021buffe"
      "rs.resources\032\roptions.proto\"\370\001\n\017GameInfo"
      "rmation\022\030\n\020background_color\030\001 \001(\005\022\031\n\021emb"
      "ed_game_window\030\002 \001(\010\022\024\n\014form_caption\030\003 \001"
      "(\t\022\014\n\004left\030\004 \001(\005\022\013\n\003top\030\005 \001(\005\022\r\n\005right\030\006"
      " \001(\005\022\016\n\006bottom\030\007 \001(\005\022\023\n\013show_border\030\010 \001("
      "\010\022\024\n\014allow_resize\030\t \001(\010\022\023\n\013stay_on_top\030\n"
      " \001(\010\022\022\n\npause_game\030\013 \001(\010\022\014\n\004text\030\014 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 318);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "resources/GameInformation.proto", &protobuf_RegisterTypes);
  ::buffers::protobuf_options_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_resources_2fGameInformation_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInformation::kBackgroundColorFieldNumber;
const int GameInformation::kEmbedGameWindowFieldNumber;
const int GameInformation::kFormCaptionFieldNumber;
const int GameInformation::kLeftFieldNumber;
const int GameInformation::kTopFieldNumber;
const int GameInformation::kRightFieldNumber;
const int GameInformation::kBottomFieldNumber;
const int GameInformation::kShowBorderFieldNumber;
const int GameInformation::kAllowResizeFieldNumber;
const int GameInformation::kStayOnTopFieldNumber;
const int GameInformation::kPauseGameFieldNumber;
const int GameInformation::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInformation::GameInformation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_resources_2fGameInformation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.GameInformation)
}
GameInformation::GameInformation(const GameInformation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  form_caption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_form_caption()) {
    form_caption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.form_caption_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&background_color_, &from.background_color_,
    static_cast<size_t>(reinterpret_cast<char*>(&pause_game_) -
    reinterpret_cast<char*>(&background_color_)) + sizeof(pause_game_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.GameInformation)
}

void GameInformation::SharedCtor() {
  _cached_size_ = 0;
  form_caption_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&background_color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pause_game_) -
      reinterpret_cast<char*>(&background_color_)) + sizeof(pause_game_));
}

GameInformation::~GameInformation() {
  // @@protoc_insertion_point(destructor:buffers.resources.GameInformation)
  SharedDtor();
}

void GameInformation::SharedDtor() {
  form_caption_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInformation::descriptor() {
  protobuf_resources_2fGameInformation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fGameInformation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameInformation& GameInformation::default_instance() {
  protobuf_resources_2fGameInformation_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameInformation* GameInformation::New(::google::protobuf::Arena* arena) const {
  GameInformation* n = new GameInformation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.GameInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!form_caption_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*form_caption_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&background_color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&embed_game_window_) -
        reinterpret_cast<char*>(&background_color_)) + sizeof(embed_game_window_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&show_border_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pause_game_) -
        reinterpret_cast<char*>(&show_border_)) + sizeof(pause_game_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GameInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.GameInformation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 background_color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_background_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &background_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool embed_game_window = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_embed_game_window();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &embed_game_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string form_caption = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_form_caption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->form_caption().data(), static_cast<int>(this->form_caption().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.GameInformation.form_caption");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 left = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 top = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_top();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 right = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bottom = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_bottom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_border = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_show_border();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_border_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_resize = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_allow_resize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_resize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stay_on_top = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_stay_on_top();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stay_on_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pause_game = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_pause_game();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pause_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.GameInformation.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.GameInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.GameInformation)
  return false;
#undef DO_
}

void GameInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.GameInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 background_color = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->background_color(), output);
  }

  // optional bool embed_game_window = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->embed_game_window(), output);
  }

  // optional string form_caption = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->form_caption().data(), static_cast<int>(this->form_caption().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.GameInformation.form_caption");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->form_caption(), output);
  }

  // optional int32 left = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left(), output);
  }

  // optional int32 top = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->top(), output);
  }

  // optional int32 right = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->right(), output);
  }

  // optional int32 bottom = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bottom(), output);
  }

  // optional bool show_border = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->show_border(), output);
  }

  // optional bool allow_resize = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->allow_resize(), output);
  }

  // optional bool stay_on_top = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->stay_on_top(), output);
  }

  // optional bool pause_game = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->pause_game(), output);
  }

  // optional string text = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.GameInformation.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.GameInformation)
}

::google::protobuf::uint8* GameInformation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.GameInformation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 background_color = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->background_color(), target);
  }

  // optional bool embed_game_window = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->embed_game_window(), target);
  }

  // optional string form_caption = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->form_caption().data(), static_cast<int>(this->form_caption().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.GameInformation.form_caption");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->form_caption(), target);
  }

  // optional int32 left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left(), target);
  }

  // optional int32 top = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->top(), target);
  }

  // optional int32 right = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->right(), target);
  }

  // optional int32 bottom = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bottom(), target);
  }

  // optional bool show_border = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->show_border(), target);
  }

  // optional bool allow_resize = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->allow_resize(), target);
  }

  // optional bool stay_on_top = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->stay_on_top(), target);
  }

  // optional bool pause_game = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->pause_game(), target);
  }

  // optional string text = 12;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.GameInformation.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.GameInformation)
  return target;
}

size_t GameInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.GameInformation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string form_caption = 3;
    if (has_form_caption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->form_caption());
    }

    // optional string text = 12;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional int32 background_color = 1;
    if (has_background_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->background_color());
    }

    // optional int32 left = 4;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left());
    }

    // optional int32 top = 5;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top());
    }

    // optional int32 right = 6;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }

    // optional int32 bottom = 7;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bottom());
    }

    // optional bool embed_game_window = 2;
    if (has_embed_game_window()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional bool show_border = 8;
    if (has_show_border()) {
      total_size += 1 + 1;
    }

    // optional bool allow_resize = 9;
    if (has_allow_resize()) {
      total_size += 1 + 1;
    }

    // optional bool stay_on_top = 10;
    if (has_stay_on_top()) {
      total_size += 1 + 1;
    }

    // optional bool pause_game = 11;
    if (has_pause_game()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInformation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.GameInformation)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInformation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInformation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.GameInformation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.GameInformation)
    MergeFrom(*source);
  }
}

void GameInformation::MergeFrom(const GameInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.GameInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_form_caption();
      form_caption_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.form_caption_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000004u) {
      background_color_ = from.background_color_;
    }
    if (cached_has_bits & 0x00000008u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000010u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000020u) {
      right_ = from.right_;
    }
    if (cached_has_bits & 0x00000040u) {
      bottom_ = from.bottom_;
    }
    if (cached_has_bits & 0x00000080u) {
      embed_game_window_ = from.embed_game_window_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      show_border_ = from.show_border_;
    }
    if (cached_has_bits & 0x00000200u) {
      allow_resize_ = from.allow_resize_;
    }
    if (cached_has_bits & 0x00000400u) {
      stay_on_top_ = from.stay_on_top_;
    }
    if (cached_has_bits & 0x00000800u) {
      pause_game_ = from.pause_game_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameInformation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.GameInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInformation::CopyFrom(const GameInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.GameInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInformation::IsInitialized() const {
  return true;
}

void GameInformation::Swap(GameInformation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameInformation::InternalSwap(GameInformation* other) {
  using std::swap;
  form_caption_.Swap(&other->form_caption_);
  text_.Swap(&other->text_);
  swap(background_color_, other->background_color_);
  swap(left_, other->left_);
  swap(top_, other->top_);
  swap(right_, other->right_);
  swap(bottom_, other->bottom_);
  swap(embed_game_window_, other->embed_game_window_);
  swap(show_border_, other->show_border_);
  swap(allow_resize_, other->allow_resize_);
  swap(stay_on_top_, other->stay_on_top_);
  swap(pause_game_, other->pause_game_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameInformation::GetMetadata() const {
  protobuf_resources_2fGameInformation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fGameInformation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameInformation

// optional int32 background_color = 1;
bool GameInformation::has_background_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GameInformation::set_has_background_color() {
  _has_bits_[0] |= 0x00000004u;
}
void GameInformation::clear_has_background_color() {
  _has_bits_[0] &= ~0x00000004u;
}
void GameInformation::clear_background_color() {
  background_color_ = 0;
  clear_has_background_color();
}
::google::protobuf::int32 GameInformation::background_color() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.background_color)
  return background_color_;
}
void GameInformation::set_background_color(::google::protobuf::int32 value) {
  set_has_background_color();
  background_color_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.background_color)
}

// optional bool embed_game_window = 2;
bool GameInformation::has_embed_game_window() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GameInformation::set_has_embed_game_window() {
  _has_bits_[0] |= 0x00000080u;
}
void GameInformation::clear_has_embed_game_window() {
  _has_bits_[0] &= ~0x00000080u;
}
void GameInformation::clear_embed_game_window() {
  embed_game_window_ = false;
  clear_has_embed_game_window();
}
bool GameInformation::embed_game_window() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.embed_game_window)
  return embed_game_window_;
}
void GameInformation::set_embed_game_window(bool value) {
  set_has_embed_game_window();
  embed_game_window_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.embed_game_window)
}

// optional string form_caption = 3;
bool GameInformation::has_form_caption() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GameInformation::set_has_form_caption() {
  _has_bits_[0] |= 0x00000001u;
}
void GameInformation::clear_has_form_caption() {
  _has_bits_[0] &= ~0x00000001u;
}
void GameInformation::clear_form_caption() {
  form_caption_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_form_caption();
}
const ::std::string& GameInformation::form_caption() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.form_caption)
  return form_caption_.GetNoArena();
}
void GameInformation::set_form_caption(const ::std::string& value) {
  set_has_form_caption();
  form_caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.form_caption)
}
#if LANG_CXX11
void GameInformation::set_form_caption(::std::string&& value) {
  set_has_form_caption();
  form_caption_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.GameInformation.form_caption)
}
#endif
void GameInformation::set_form_caption(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_form_caption();
  form_caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.GameInformation.form_caption)
}
void GameInformation::set_form_caption(const char* value, size_t size) {
  set_has_form_caption();
  form_caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.GameInformation.form_caption)
}
::std::string* GameInformation::mutable_form_caption() {
  set_has_form_caption();
  // @@protoc_insertion_point(field_mutable:buffers.resources.GameInformation.form_caption)
  return form_caption_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameInformation::release_form_caption() {
  // @@protoc_insertion_point(field_release:buffers.resources.GameInformation.form_caption)
  clear_has_form_caption();
  return form_caption_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameInformation::set_allocated_form_caption(::std::string* form_caption) {
  if (form_caption != NULL) {
    set_has_form_caption();
  } else {
    clear_has_form_caption();
  }
  form_caption_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), form_caption);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.GameInformation.form_caption)
}

// optional int32 left = 4;
bool GameInformation::has_left() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GameInformation::set_has_left() {
  _has_bits_[0] |= 0x00000008u;
}
void GameInformation::clear_has_left() {
  _has_bits_[0] &= ~0x00000008u;
}
void GameInformation::clear_left() {
  left_ = 0;
  clear_has_left();
}
::google::protobuf::int32 GameInformation::left() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.left)
  return left_;
}
void GameInformation::set_left(::google::protobuf::int32 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.left)
}

// optional int32 top = 5;
bool GameInformation::has_top() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GameInformation::set_has_top() {
  _has_bits_[0] |= 0x00000010u;
}
void GameInformation::clear_has_top() {
  _has_bits_[0] &= ~0x00000010u;
}
void GameInformation::clear_top() {
  top_ = 0;
  clear_has_top();
}
::google::protobuf::int32 GameInformation::top() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.top)
  return top_;
}
void GameInformation::set_top(::google::protobuf::int32 value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.top)
}

// optional int32 right = 6;
bool GameInformation::has_right() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GameInformation::set_has_right() {
  _has_bits_[0] |= 0x00000020u;
}
void GameInformation::clear_has_right() {
  _has_bits_[0] &= ~0x00000020u;
}
void GameInformation::clear_right() {
  right_ = 0;
  clear_has_right();
}
::google::protobuf::int32 GameInformation::right() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.right)
  return right_;
}
void GameInformation::set_right(::google::protobuf::int32 value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.right)
}

// optional int32 bottom = 7;
bool GameInformation::has_bottom() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GameInformation::set_has_bottom() {
  _has_bits_[0] |= 0x00000040u;
}
void GameInformation::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000040u;
}
void GameInformation::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
::google::protobuf::int32 GameInformation::bottom() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.bottom)
  return bottom_;
}
void GameInformation::set_bottom(::google::protobuf::int32 value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.bottom)
}

// optional bool show_border = 8;
bool GameInformation::has_show_border() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GameInformation::set_has_show_border() {
  _has_bits_[0] |= 0x00000100u;
}
void GameInformation::clear_has_show_border() {
  _has_bits_[0] &= ~0x00000100u;
}
void GameInformation::clear_show_border() {
  show_border_ = false;
  clear_has_show_border();
}
bool GameInformation::show_border() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.show_border)
  return show_border_;
}
void GameInformation::set_show_border(bool value) {
  set_has_show_border();
  show_border_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.show_border)
}

// optional bool allow_resize = 9;
bool GameInformation::has_allow_resize() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GameInformation::set_has_allow_resize() {
  _has_bits_[0] |= 0x00000200u;
}
void GameInformation::clear_has_allow_resize() {
  _has_bits_[0] &= ~0x00000200u;
}
void GameInformation::clear_allow_resize() {
  allow_resize_ = false;
  clear_has_allow_resize();
}
bool GameInformation::allow_resize() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.allow_resize)
  return allow_resize_;
}
void GameInformation::set_allow_resize(bool value) {
  set_has_allow_resize();
  allow_resize_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.allow_resize)
}

// optional bool stay_on_top = 10;
bool GameInformation::has_stay_on_top() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GameInformation::set_has_stay_on_top() {
  _has_bits_[0] |= 0x00000400u;
}
void GameInformation::clear_has_stay_on_top() {
  _has_bits_[0] &= ~0x00000400u;
}
void GameInformation::clear_stay_on_top() {
  stay_on_top_ = false;
  clear_has_stay_on_top();
}
bool GameInformation::stay_on_top() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.stay_on_top)
  return stay_on_top_;
}
void GameInformation::set_stay_on_top(bool value) {
  set_has_stay_on_top();
  stay_on_top_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.stay_on_top)
}

// optional bool pause_game = 11;
bool GameInformation::has_pause_game() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void GameInformation::set_has_pause_game() {
  _has_bits_[0] |= 0x00000800u;
}
void GameInformation::clear_has_pause_game() {
  _has_bits_[0] &= ~0x00000800u;
}
void GameInformation::clear_pause_game() {
  pause_game_ = false;
  clear_has_pause_game();
}
bool GameInformation::pause_game() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.pause_game)
  return pause_game_;
}
void GameInformation::set_pause_game(bool value) {
  set_has_pause_game();
  pause_game_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.pause_game)
}

// optional string text = 12;
bool GameInformation::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GameInformation::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
void GameInformation::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void GameInformation::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& GameInformation::text() const {
  // @@protoc_insertion_point(field_get:buffers.resources.GameInformation.text)
  return text_.GetNoArena();
}
void GameInformation::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.GameInformation.text)
}
#if LANG_CXX11
void GameInformation::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.GameInformation.text)
}
#endif
void GameInformation::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.GameInformation.text)
}
void GameInformation::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.GameInformation.text)
}
::std::string* GameInformation::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:buffers.resources.GameInformation.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameInformation::release_text() {
  // @@protoc_insertion_point(field_release:buffers.resources.GameInformation.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameInformation::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.GameInformation.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace resources
}  // namespace buffers

// @@protoc_insertion_point(global_scope)
