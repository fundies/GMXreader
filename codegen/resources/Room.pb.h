// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resources/Room.proto

#ifndef PROTOBUF_resources_2fRoom_2eproto__INCLUDED
#define PROTOBUF_resources_2fRoom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)
namespace buffers {
namespace resources {
class Room;
class RoomDefaultTypeInternal;
extern RoomDefaultTypeInternal _Room_default_instance_;
class Room_Instance;
class Room_InstanceDefaultTypeInternal;
extern Room_InstanceDefaultTypeInternal _Room_Instance_default_instance_;
class Room_MakerSettings;
class Room_MakerSettingsDefaultTypeInternal;
extern Room_MakerSettingsDefaultTypeInternal _Room_MakerSettings_default_instance_;
class Room_RoomBackground;
class Room_RoomBackgroundDefaultTypeInternal;
extern Room_RoomBackgroundDefaultTypeInternal _Room_RoomBackground_default_instance_;
class Room_Tile;
class Room_TileDefaultTypeInternal;
extern Room_TileDefaultTypeInternal _Room_Tile_default_instance_;
class Room_View;
class Room_ViewDefaultTypeInternal;
extern Room_ViewDefaultTypeInternal _Room_View_default_instance_;
}  // namespace resources
}  // namespace buffers

namespace buffers {
namespace resources {

namespace protobuf_resources_2fRoom_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_resources_2fRoom_2eproto

// ===================================================================

class Room_MakerSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.Room.MakerSettings) */ {
 public:
  Room_MakerSettings();
  virtual ~Room_MakerSettings();

  Room_MakerSettings(const Room_MakerSettings& from);

  inline Room_MakerSettings& operator=(const Room_MakerSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Room_MakerSettings(Room_MakerSettings&& from) noexcept
    : Room_MakerSettings() {
    *this = ::std::move(from);
  }

  inline Room_MakerSettings& operator=(Room_MakerSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Room_MakerSettings& default_instance();

  static inline const Room_MakerSettings* internal_default_instance() {
    return reinterpret_cast<const Room_MakerSettings*>(
               &_Room_MakerSettings_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Room_MakerSettings* other);
  friend void swap(Room_MakerSettings& a, Room_MakerSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Room_MakerSettings* New() const PROTOBUF_FINAL { return New(NULL); }

  Room_MakerSettings* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Room_MakerSettings& from);
  void MergeFrom(const Room_MakerSettings& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Room_MakerSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool set = 1 [(.buffers.gmx) = "isSet"];
  bool has_set() const;
  void clear_set();
  static const int kSetFieldNumber = 1;
  bool set() const;
  void set_set(bool value);

  // optional bool width = 2 [(.buffers.gmx) = "w"];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  bool width() const;
  void set_width(bool value);

  // optional bool height = 3 [(.buffers.gmx) = "h"];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  bool height() const;
  void set_height(bool value);

  // optional bool show_grid = 4 [(.buffers.gmx) = "showGrid"];
  bool has_show_grid() const;
  void clear_show_grid();
  static const int kShowGridFieldNumber = 4;
  bool show_grid() const;
  void set_show_grid(bool value);

  // optional bool show_objects = 5 [(.buffers.gmx) = "showObjects"];
  bool has_show_objects() const;
  void clear_show_objects();
  static const int kShowObjectsFieldNumber = 5;
  bool show_objects() const;
  void set_show_objects(bool value);

  // optional bool show_tiles = 6 [(.buffers.gmx) = "showTiles"];
  bool has_show_tiles() const;
  void clear_show_tiles();
  static const int kShowTilesFieldNumber = 6;
  bool show_tiles() const;
  void set_show_tiles(bool value);

  // optional bool show_backgrounds = 7 [(.buffers.gmx) = "showBackgrounds"];
  bool has_show_backgrounds() const;
  void clear_show_backgrounds();
  static const int kShowBackgroundsFieldNumber = 7;
  bool show_backgrounds() const;
  void set_show_backgrounds(bool value);

  // optional bool show_foregrounds = 8 [(.buffers.gmx) = "showForegrounds"];
  bool has_show_foregrounds() const;
  void clear_show_foregrounds();
  static const int kShowForegroundsFieldNumber = 8;
  bool show_foregrounds() const;
  void set_show_foregrounds(bool value);

  // optional bool show_views = 9 [(.buffers.gmx) = "showViews"];
  bool has_show_views() const;
  void clear_show_views();
  static const int kShowViewsFieldNumber = 9;
  bool show_views() const;
  void set_show_views(bool value);

  // optional bool delete_underlying_objects = 10 [(.buffers.gmx) = "deleteUnderlyingObj"];
  bool has_delete_underlying_objects() const;
  void clear_delete_underlying_objects();
  static const int kDeleteUnderlyingObjectsFieldNumber = 10;
  bool delete_underlying_objects() const;
  void set_delete_underlying_objects(bool value);

  // optional bool delete_underlying_tiles = 11 [(.buffers.gmx) = "deleteUnderlyingTiles"];
  bool has_delete_underlying_tiles() const;
  void clear_delete_underlying_tiles();
  static const int kDeleteUnderlyingTilesFieldNumber = 11;
  bool delete_underlying_tiles() const;
  void set_delete_underlying_tiles(bool value);

  // optional uint32 page = 12;
  bool has_page() const;
  void clear_page();
  static const int kPageFieldNumber = 12;
  ::google::protobuf::uint32 page() const;
  void set_page(::google::protobuf::uint32 value);

  // optional int32 xoffset = 13;
  bool has_xoffset() const;
  void clear_xoffset();
  static const int kXoffsetFieldNumber = 13;
  ::google::protobuf::int32 xoffset() const;
  void set_xoffset(::google::protobuf::int32 value);

  // optional int32 yoffset = 14;
  bool has_yoffset() const;
  void clear_yoffset();
  static const int kYoffsetFieldNumber = 14;
  ::google::protobuf::int32 yoffset() const;
  void set_yoffset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:buffers.resources.Room.MakerSettings)
 private:
  void set_has_set();
  void clear_has_set();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_show_grid();
  void clear_has_show_grid();
  void set_has_show_objects();
  void clear_has_show_objects();
  void set_has_show_tiles();
  void clear_has_show_tiles();
  void set_has_show_backgrounds();
  void clear_has_show_backgrounds();
  void set_has_show_foregrounds();
  void clear_has_show_foregrounds();
  void set_has_show_views();
  void clear_has_show_views();
  void set_has_delete_underlying_objects();
  void clear_has_delete_underlying_objects();
  void set_has_delete_underlying_tiles();
  void clear_has_delete_underlying_tiles();
  void set_has_page();
  void clear_has_page();
  void set_has_xoffset();
  void clear_has_xoffset();
  void set_has_yoffset();
  void clear_has_yoffset();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool set_;
  bool width_;
  bool height_;
  bool show_grid_;
  bool show_objects_;
  bool show_tiles_;
  bool show_backgrounds_;
  bool show_foregrounds_;
  bool show_views_;
  bool delete_underlying_objects_;
  bool delete_underlying_tiles_;
  ::google::protobuf::uint32 page_;
  ::google::protobuf::int32 xoffset_;
  ::google::protobuf::int32 yoffset_;
  friend struct protobuf_resources_2fRoom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Room_RoomBackground : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.Room.RoomBackground) */ {
 public:
  Room_RoomBackground();
  virtual ~Room_RoomBackground();

  Room_RoomBackground(const Room_RoomBackground& from);

  inline Room_RoomBackground& operator=(const Room_RoomBackground& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Room_RoomBackground(Room_RoomBackground&& from) noexcept
    : Room_RoomBackground() {
    *this = ::std::move(from);
  }

  inline Room_RoomBackground& operator=(Room_RoomBackground&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Room_RoomBackground& default_instance();

  static inline const Room_RoomBackground* internal_default_instance() {
    return reinterpret_cast<const Room_RoomBackground*>(
               &_Room_RoomBackground_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Room_RoomBackground* other);
  friend void swap(Room_RoomBackground& a, Room_RoomBackground& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Room_RoomBackground* New() const PROTOBUF_FINAL { return New(NULL); }

  Room_RoomBackground* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Room_RoomBackground& from);
  void MergeFrom(const Room_RoomBackground& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Room_RoomBackground* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 x = 4;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 4;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional bool visible = 1;
  bool has_visible() const;
  void clear_visible();
  static const int kVisibleFieldNumber = 1;
  bool visible() const;
  void set_visible(bool value);

  // optional bool foreground = 2;
  bool has_foreground() const;
  void clear_foreground();
  static const int kForegroundFieldNumber = 2;
  bool foreground() const;
  void set_foreground(bool value);

  // optional bool htiled = 6;
  bool has_htiled() const;
  void clear_htiled();
  static const int kHtiledFieldNumber = 6;
  bool htiled() const;
  void set_htiled(bool value);

  // optional bool vtiled = 7;
  bool has_vtiled() const;
  void clear_vtiled();
  static const int kVtiledFieldNumber = 7;
  bool vtiled() const;
  void set_vtiled(bool value);

  // optional int32 y = 5;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 5;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // optional bool stretch = 10;
  bool has_stretch() const;
  void clear_stretch();
  static const int kStretchFieldNumber = 10;
  bool stretch() const;
  void set_stretch(bool value);

  // optional double hspeed = 8;
  bool has_hspeed() const;
  void clear_hspeed();
  static const int kHspeedFieldNumber = 8;
  double hspeed() const;
  void set_hspeed(double value);

  // optional double vspeed = 9;
  bool has_vspeed() const;
  void clear_vspeed();
  static const int kVspeedFieldNumber = 9;
  double vspeed() const;
  void set_vspeed(double value);

  // @@protoc_insertion_point(class_scope:buffers.resources.Room.RoomBackground)
 private:
  void set_has_visible();
  void clear_has_visible();
  void set_has_foreground();
  void clear_has_foreground();
  void set_has_name();
  void clear_has_name();
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_htiled();
  void clear_has_htiled();
  void set_has_vtiled();
  void clear_has_vtiled();
  void set_has_hspeed();
  void clear_has_hspeed();
  void set_has_vspeed();
  void clear_has_vspeed();
  void set_has_stretch();
  void clear_has_stretch();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 x_;
  bool visible_;
  bool foreground_;
  bool htiled_;
  bool vtiled_;
  ::google::protobuf::int32 y_;
  bool stretch_;
  double hspeed_;
  double vspeed_;
  friend struct protobuf_resources_2fRoom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Room_View : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.Room.View) */ {
 public:
  Room_View();
  virtual ~Room_View();

  Room_View(const Room_View& from);

  inline Room_View& operator=(const Room_View& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Room_View(Room_View&& from) noexcept
    : Room_View() {
    *this = ::std::move(from);
  }

  inline Room_View& operator=(Room_View&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Room_View& default_instance();

  static inline const Room_View* internal_default_instance() {
    return reinterpret_cast<const Room_View*>(
               &_Room_View_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Room_View* other);
  friend void swap(Room_View& a, Room_View& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Room_View* New() const PROTOBUF_FINAL { return New(NULL); }

  Room_View* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Room_View& from);
  void MergeFrom(const Room_View& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Room_View* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string object_following = 2 [(.buffers.gmx) = "objName"];
  bool has_object_following() const;
  void clear_object_following();
  static const int kObjectFollowingFieldNumber = 2;
  const ::std::string& object_following() const;
  void set_object_following(const ::std::string& value);
  #if LANG_CXX11
  void set_object_following(::std::string&& value);
  #endif
  void set_object_following(const char* value);
  void set_object_following(const char* value, size_t size);
  ::std::string* mutable_object_following();
  ::std::string* release_object_following();
  void set_allocated_object_following(::std::string* object_following);

  // optional bool visible = 1;
  bool has_visible() const;
  void clear_visible();
  static const int kVisibleFieldNumber = 1;
  bool visible() const;
  void set_visible(bool value);

  // optional int32 xview = 3;
  bool has_xview() const;
  void clear_xview();
  static const int kXviewFieldNumber = 3;
  ::google::protobuf::int32 xview() const;
  void set_xview(::google::protobuf::int32 value);

  // optional int32 yview = 4;
  bool has_yview() const;
  void clear_yview();
  static const int kYviewFieldNumber = 4;
  ::google::protobuf::int32 yview() const;
  void set_yview(::google::protobuf::int32 value);

  // optional uint32 wview = 5;
  bool has_wview() const;
  void clear_wview();
  static const int kWviewFieldNumber = 5;
  ::google::protobuf::uint32 wview() const;
  void set_wview(::google::protobuf::uint32 value);

  // optional uint32 hview = 6;
  bool has_hview() const;
  void clear_hview();
  static const int kHviewFieldNumber = 6;
  ::google::protobuf::uint32 hview() const;
  void set_hview(::google::protobuf::uint32 value);

  // optional int32 xport = 7;
  bool has_xport() const;
  void clear_xport();
  static const int kXportFieldNumber = 7;
  ::google::protobuf::int32 xport() const;
  void set_xport(::google::protobuf::int32 value);

  // optional int32 yport = 8;
  bool has_yport() const;
  void clear_yport();
  static const int kYportFieldNumber = 8;
  ::google::protobuf::int32 yport() const;
  void set_yport(::google::protobuf::int32 value);

  // optional uint32 wport = 9;
  bool has_wport() const;
  void clear_wport();
  static const int kWportFieldNumber = 9;
  ::google::protobuf::uint32 wport() const;
  void set_wport(::google::protobuf::uint32 value);

  // optional uint32 hport = 10;
  bool has_hport() const;
  void clear_hport();
  static const int kHportFieldNumber = 10;
  ::google::protobuf::uint32 hport() const;
  void set_hport(::google::protobuf::uint32 value);

  // optional int32 hborder = 11;
  bool has_hborder() const;
  void clear_hborder();
  static const int kHborderFieldNumber = 11;
  ::google::protobuf::int32 hborder() const;
  void set_hborder(::google::protobuf::int32 value);

  // optional double hspeed = 13;
  bool has_hspeed() const;
  void clear_hspeed();
  static const int kHspeedFieldNumber = 13;
  double hspeed() const;
  void set_hspeed(double value);

  // optional double vspeed = 14;
  bool has_vspeed() const;
  void clear_vspeed();
  static const int kVspeedFieldNumber = 14;
  double vspeed() const;
  void set_vspeed(double value);

  // optional int32 vborder = 12;
  bool has_vborder() const;
  void clear_vborder();
  static const int kVborderFieldNumber = 12;
  ::google::protobuf::int32 vborder() const;
  void set_vborder(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:buffers.resources.Room.View)
 private:
  void set_has_visible();
  void clear_has_visible();
  void set_has_object_following();
  void clear_has_object_following();
  void set_has_xview();
  void clear_has_xview();
  void set_has_yview();
  void clear_has_yview();
  void set_has_wview();
  void clear_has_wview();
  void set_has_hview();
  void clear_has_hview();
  void set_has_xport();
  void clear_has_xport();
  void set_has_yport();
  void clear_has_yport();
  void set_has_wport();
  void clear_has_wport();
  void set_has_hport();
  void clear_has_hport();
  void set_has_hborder();
  void clear_has_hborder();
  void set_has_vborder();
  void clear_has_vborder();
  void set_has_hspeed();
  void clear_has_hspeed();
  void set_has_vspeed();
  void clear_has_vspeed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr object_following_;
  bool visible_;
  ::google::protobuf::int32 xview_;
  ::google::protobuf::int32 yview_;
  ::google::protobuf::uint32 wview_;
  ::google::protobuf::uint32 hview_;
  ::google::protobuf::int32 xport_;
  ::google::protobuf::int32 yport_;
  ::google::protobuf::uint32 wport_;
  ::google::protobuf::uint32 hport_;
  ::google::protobuf::int32 hborder_;
  double hspeed_;
  double vspeed_;
  ::google::protobuf::int32 vborder_;
  friend struct protobuf_resources_2fRoom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Room_Instance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.Room.Instance) */ {
 public:
  Room_Instance();
  virtual ~Room_Instance();

  Room_Instance(const Room_Instance& from);

  inline Room_Instance& operator=(const Room_Instance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Room_Instance(Room_Instance&& from) noexcept
    : Room_Instance() {
    *this = ::std::move(from);
  }

  inline Room_Instance& operator=(Room_Instance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Room_Instance& default_instance();

  static inline const Room_Instance* internal_default_instance() {
    return reinterpret_cast<const Room_Instance*>(
               &_Room_Instance_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Room_Instance* other);
  friend void swap(Room_Instance& a, Room_Instance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Room_Instance* New() const PROTOBUF_FINAL { return New(NULL); }

  Room_Instance* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Room_Instance& from);
  void MergeFrom(const Room_Instance& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Room_Instance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string object_type = 1 [(.buffers.gmx) = "objName"];
  bool has_object_type() const;
  void clear_object_type();
  static const int kObjectTypeFieldNumber = 1;
  const ::std::string& object_type() const;
  void set_object_type(const ::std::string& value);
  #if LANG_CXX11
  void set_object_type(::std::string&& value);
  #endif
  void set_object_type(const char* value);
  void set_object_type(const char* value, size_t size);
  ::std::string* mutable_object_type();
  ::std::string* release_object_type();
  void set_allocated_object_type(::std::string* object_type);

  // optional string id = 4 [(.buffers.gmx) = "name"];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 4;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string code = 6;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 6;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional int32 x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // optional double xscale = 7 [(.buffers.gmx) = "scaleX"];
  bool has_xscale() const;
  void clear_xscale();
  static const int kXscaleFieldNumber = 7;
  double xscale() const;
  void set_xscale(double value);

  // optional bool locked = 5;
  bool has_locked() const;
  void clear_locked();
  static const int kLockedFieldNumber = 5;
  bool locked() const;
  void set_locked(bool value);

  // optional int32 color = 9 [(.buffers.gmx) = "colour"];
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 9;
  ::google::protobuf::int32 color() const;
  void set_color(::google::protobuf::int32 value);

  // optional double yscale = 8 [(.buffers.gmx) = "scaleY"];
  bool has_yscale() const;
  void clear_yscale();
  static const int kYscaleFieldNumber = 8;
  double yscale() const;
  void set_yscale(double value);

  // optional double rotation = 10;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 10;
  double rotation() const;
  void set_rotation(double value);

  // @@protoc_insertion_point(class_scope:buffers.resources.Room.Instance)
 private:
  void set_has_object_type();
  void clear_has_object_type();
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_id();
  void clear_has_id();
  void set_has_locked();
  void clear_has_locked();
  void set_has_code();
  void clear_has_code();
  void set_has_xscale();
  void clear_has_xscale();
  void set_has_yscale();
  void clear_has_yscale();
  void set_has_color();
  void clear_has_color();
  void set_has_rotation();
  void clear_has_rotation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr object_type_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  double xscale_;
  bool locked_;
  ::google::protobuf::int32 color_;
  double yscale_;
  double rotation_;
  friend struct protobuf_resources_2fRoom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Room_Tile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.Room.Tile) */ {
 public:
  Room_Tile();
  virtual ~Room_Tile();

  Room_Tile(const Room_Tile& from);

  inline Room_Tile& operator=(const Room_Tile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Room_Tile(Room_Tile&& from) noexcept
    : Room_Tile() {
    *this = ::std::move(from);
  }

  inline Room_Tile& operator=(Room_Tile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Room_Tile& default_instance();

  static inline const Room_Tile* internal_default_instance() {
    return reinterpret_cast<const Room_Tile*>(
               &_Room_Tile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Room_Tile* other);
  friend void swap(Room_Tile& a, Room_Tile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Room_Tile* New() const PROTOBUF_FINAL { return New(NULL); }

  Room_Tile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Room_Tile& from);
  void MergeFrom(const Room_Tile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Room_Tile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string image = 1 [(.buffers.gmx) = "bgName"];
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // optional string name = 9;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 9;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // optional uint32 width = 4 [(.buffers.gmx) = "w"];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 5 [(.buffers.gmx) = "h"];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional int32 xoffset = 6 [(.buffers.gmx) = "xo"];
  bool has_xoffset() const;
  void clear_xoffset();
  static const int kXoffsetFieldNumber = 6;
  ::google::protobuf::int32 xoffset() const;
  void set_xoffset(::google::protobuf::int32 value);

  // optional int32 yoffset = 7 [(.buffers.gmx) = "yo"];
  bool has_yoffset() const;
  void clear_yoffset();
  static const int kYoffsetFieldNumber = 7;
  ::google::protobuf::int32 yoffset() const;
  void set_yoffset(::google::protobuf::int32 value);

  // optional int32 id = 8;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 8;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 depth = 10;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 10;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // optional bool locked = 11;
  bool has_locked() const;
  void clear_locked();
  static const int kLockedFieldNumber = 11;
  bool locked() const;
  void set_locked(bool value);

  // optional int32 color = 12 [(.buffers.gmx) = "colour"];
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 12;
  ::google::protobuf::int32 color() const;
  void set_color(::google::protobuf::int32 value);

  // optional double xscale = 13 [(.buffers.gmx) = "scaleX"];
  bool has_xscale() const;
  void clear_xscale();
  static const int kXscaleFieldNumber = 13;
  double xscale() const;
  void set_xscale(double value);

  // optional double yscale = 14 [(.buffers.gmx) = "scaleY"];
  bool has_yscale() const;
  void clear_yscale();
  static const int kYscaleFieldNumber = 14;
  double yscale() const;
  void set_yscale(double value);

  // @@protoc_insertion_point(class_scope:buffers.resources.Room.Tile)
 private:
  void set_has_image();
  void clear_has_image();
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_xoffset();
  void clear_has_xoffset();
  void set_has_yoffset();
  void clear_has_yoffset();
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_depth();
  void clear_has_depth();
  void set_has_locked();
  void clear_has_locked();
  void set_has_color();
  void clear_has_color();
  void set_has_xscale();
  void clear_has_xscale();
  void set_has_yscale();
  void clear_has_yscale();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::int32 xoffset_;
  ::google::protobuf::int32 yoffset_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 depth_;
  bool locked_;
  ::google::protobuf::int32 color_;
  double xscale_;
  double yscale_;
  friend struct protobuf_resources_2fRoom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Room : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.Room) */ {
 public:
  Room();
  virtual ~Room();

  Room(const Room& from);

  inline Room& operator=(const Room& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Room(Room&& from) noexcept
    : Room() {
    *this = ::std::move(from);
  }

  inline Room& operator=(Room&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Room& default_instance();

  static inline const Room* internal_default_instance() {
    return reinterpret_cast<const Room*>(
               &_Room_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Room* other);
  friend void swap(Room& a, Room& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Room* New() const PROTOBUF_FINAL { return New(NULL); }

  Room* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Room& from);
  void MergeFrom(const Room& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Room* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Room_MakerSettings MakerSettings;
  typedef Room_RoomBackground RoomBackground;
  typedef Room_View View;
  typedef Room_Instance Instance;
  typedef Room_Tile Tile;

  // accessors -------------------------------------------------------

  // repeated .buffers.resources.Room.RoomBackground backgrounds = 15;
  int backgrounds_size() const;
  void clear_backgrounds();
  static const int kBackgroundsFieldNumber = 15;
  const ::buffers::resources::Room_RoomBackground& backgrounds(int index) const;
  ::buffers::resources::Room_RoomBackground* mutable_backgrounds(int index);
  ::buffers::resources::Room_RoomBackground* add_backgrounds();
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_RoomBackground >*
      mutable_backgrounds();
  const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_RoomBackground >&
      backgrounds() const;

  // repeated .buffers.resources.Room.View views = 16;
  int views_size() const;
  void clear_views();
  static const int kViewsFieldNumber = 16;
  const ::buffers::resources::Room_View& views(int index) const;
  ::buffers::resources::Room_View* mutable_views(int index);
  ::buffers::resources::Room_View* add_views();
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_View >*
      mutable_views();
  const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_View >&
      views() const;

  // repeated .buffers.resources.Room.Instance instances = 17;
  int instances_size() const;
  void clear_instances();
  static const int kInstancesFieldNumber = 17;
  const ::buffers::resources::Room_Instance& instances(int index) const;
  ::buffers::resources::Room_Instance* mutable_instances(int index);
  ::buffers::resources::Room_Instance* add_instances();
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_Instance >*
      mutable_instances();
  const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_Instance >&
      instances() const;

  // repeated .buffers.resources.Room.Tile tiles = 18;
  int tiles_size() const;
  void clear_tiles();
  static const int kTilesFieldNumber = 18;
  const ::buffers::resources::Room_Tile& tiles(int index) const;
  ::buffers::resources::Room_Tile* mutable_tiles(int index);
  ::buffers::resources::Room_Tile* add_tiles();
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_Tile >*
      mutable_tiles();
  const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_Tile >&
      tiles() const;

  // optional string caption = 1;
  bool has_caption() const;
  void clear_caption();
  static const int kCaptionFieldNumber = 1;
  const ::std::string& caption() const;
  void set_caption(const ::std::string& value);
  #if LANG_CXX11
  void set_caption(::std::string&& value);
  #endif
  void set_caption(const char* value);
  void set_caption(const char* value, size_t size);
  ::std::string* mutable_caption();
  ::std::string* release_caption();
  void set_allocated_caption(::std::string* caption);

  // optional string code = 10;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 10;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional .buffers.resources.Room.MakerSettings maker_settings = 14 [(.buffers.gmx) = "makerSettings"];
  bool has_maker_settings() const;
  void clear_maker_settings();
  static const int kMakerSettingsFieldNumber = 14;
  const ::buffers::resources::Room_MakerSettings& maker_settings() const;
  ::buffers::resources::Room_MakerSettings* mutable_maker_settings();
  ::buffers::resources::Room_MakerSettings* release_maker_settings();
  void set_allocated_maker_settings(::buffers::resources::Room_MakerSettings* maker_settings);

  // optional uint32 width = 2;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional uint32 vsnap = 4;
  bool has_vsnap() const;
  void clear_vsnap();
  static const int kVsnapFieldNumber = 4;
  ::google::protobuf::uint32 vsnap() const;
  void set_vsnap(::google::protobuf::uint32 value);

  // optional uint32 hsnap = 5;
  bool has_hsnap() const;
  void clear_hsnap();
  static const int kHsnapFieldNumber = 5;
  ::google::protobuf::uint32 hsnap() const;
  void set_hsnap(::google::protobuf::uint32 value);

  // optional int32 color = 8 [(.buffers.gmx) = "colour"];
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 8;
  ::google::protobuf::int32 color() const;
  void set_color(::google::protobuf::int32 value);

  // optional bool isometric = 6;
  bool has_isometric() const;
  void clear_isometric();
  static const int kIsometricFieldNumber = 6;
  bool isometric() const;
  void set_isometric(bool value);

  // optional bool persistent = 7;
  bool has_persistent() const;
  void clear_persistent();
  static const int kPersistentFieldNumber = 7;
  bool persistent() const;
  void set_persistent(bool value);

  // optional bool show_color = 9 [(.buffers.gmx) = "showcolour"];
  bool has_show_color() const;
  void clear_show_color();
  static const int kShowColorFieldNumber = 9;
  bool show_color() const;
  void set_show_color(bool value);

  // optional bool enable_views = 11 [(.buffers.gmx) = "enableViews"];
  bool has_enable_views() const;
  void clear_enable_views();
  static const int kEnableViewsFieldNumber = 11;
  bool enable_views() const;
  void set_enable_views(bool value);

  // optional bool clear_view_background = 12 [(.buffers.gmx) = "clearViewBackground"];
  bool has_clear_view_background() const;
  void clear_clear_view_background();
  static const int kClearViewBackgroundFieldNumber = 12;
  bool clear_view_background() const;
  void set_clear_view_background(bool value);

  // optional bool clear_display_buffer = 13 [(.buffers.gmx) = "clearDisplayBuffer"];
  bool has_clear_display_buffer() const;
  void clear_clear_display_buffer();
  static const int kClearDisplayBufferFieldNumber = 13;
  bool clear_display_buffer() const;
  void set_clear_display_buffer(bool value);

  // optional bool use_physics = 19 [(.buffers.gmx) = "PhysicsWorld"];
  bool has_use_physics() const;
  void clear_use_physics();
  static const int kUsePhysicsFieldNumber = 19;
  bool use_physics() const;
  void set_use_physics(bool value);

  // optional int32 phy_world_top = 20 [(.buffers.gmx) = "PhysicsWorldTop"];
  bool has_phy_world_top() const;
  void clear_phy_world_top();
  static const int kPhyWorldTopFieldNumber = 20;
  ::google::protobuf::int32 phy_world_top() const;
  void set_phy_world_top(::google::protobuf::int32 value);

  // optional int32 phy_world_left = 21 [(.buffers.gmx) = "PhysicsWorldLeft"];
  bool has_phy_world_left() const;
  void clear_phy_world_left();
  static const int kPhyWorldLeftFieldNumber = 21;
  ::google::protobuf::int32 phy_world_left() const;
  void set_phy_world_left(::google::protobuf::int32 value);

  // optional int32 phy_world_right = 22 [(.buffers.gmx) = "PhysicsWorldRight"];
  bool has_phy_world_right() const;
  void clear_phy_world_right();
  static const int kPhyWorldRightFieldNumber = 22;
  ::google::protobuf::int32 phy_world_right() const;
  void set_phy_world_right(::google::protobuf::int32 value);

  // optional double phy_world_xgravity = 24 [(.buffers.gmx) = "PhysicsWorldGravityX"];
  bool has_phy_world_xgravity() const;
  void clear_phy_world_xgravity();
  static const int kPhyWorldXgravityFieldNumber = 24;
  double phy_world_xgravity() const;
  void set_phy_world_xgravity(double value);

  // optional double phy_world_ygravity = 25 [(.buffers.gmx) = "PhysicsWorldGravityY"];
  bool has_phy_world_ygravity() const;
  void clear_phy_world_ygravity();
  static const int kPhyWorldYgravityFieldNumber = 25;
  double phy_world_ygravity() const;
  void set_phy_world_ygravity(double value);

  // optional int32 phy_world_bottom = 23 [(.buffers.gmx) = "PhysicsWorldBottom"];
  bool has_phy_world_bottom() const;
  void clear_phy_world_bottom();
  static const int kPhyWorldBottomFieldNumber = 23;
  ::google::protobuf::int32 phy_world_bottom() const;
  void set_phy_world_bottom(::google::protobuf::int32 value);

  // optional uint32 speed = 27;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 27;
  ::google::protobuf::uint32 speed() const;
  void set_speed(::google::protobuf::uint32 value);

  // optional double phy_world_pixel_meters = 26 [(.buffers.gmx) = "PhysicsWorldPixToMeters"];
  bool has_phy_world_pixel_meters() const;
  void clear_phy_world_pixel_meters();
  static const int kPhyWorldPixelMetersFieldNumber = 26;
  double phy_world_pixel_meters() const;
  void set_phy_world_pixel_meters(double value);

  // @@protoc_insertion_point(class_scope:buffers.resources.Room)
 private:
  void set_has_caption();
  void clear_has_caption();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_vsnap();
  void clear_has_vsnap();
  void set_has_hsnap();
  void clear_has_hsnap();
  void set_has_isometric();
  void clear_has_isometric();
  void set_has_speed();
  void clear_has_speed();
  void set_has_persistent();
  void clear_has_persistent();
  void set_has_color();
  void clear_has_color();
  void set_has_show_color();
  void clear_has_show_color();
  void set_has_code();
  void clear_has_code();
  void set_has_enable_views();
  void clear_has_enable_views();
  void set_has_clear_view_background();
  void clear_has_clear_view_background();
  void set_has_clear_display_buffer();
  void clear_has_clear_display_buffer();
  void set_has_maker_settings();
  void clear_has_maker_settings();
  void set_has_use_physics();
  void clear_has_use_physics();
  void set_has_phy_world_top();
  void clear_has_phy_world_top();
  void set_has_phy_world_left();
  void clear_has_phy_world_left();
  void set_has_phy_world_right();
  void clear_has_phy_world_right();
  void set_has_phy_world_bottom();
  void clear_has_phy_world_bottom();
  void set_has_phy_world_xgravity();
  void clear_has_phy_world_xgravity();
  void set_has_phy_world_ygravity();
  void clear_has_phy_world_ygravity();
  void set_has_phy_world_pixel_meters();
  void clear_has_phy_world_pixel_meters();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_RoomBackground > backgrounds_;
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_View > views_;
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_Instance > instances_;
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_Tile > tiles_;
  ::google::protobuf::internal::ArenaStringPtr caption_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::buffers::resources::Room_MakerSettings* maker_settings_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 vsnap_;
  ::google::protobuf::uint32 hsnap_;
  ::google::protobuf::int32 color_;
  bool isometric_;
  bool persistent_;
  bool show_color_;
  bool enable_views_;
  bool clear_view_background_;
  bool clear_display_buffer_;
  bool use_physics_;
  ::google::protobuf::int32 phy_world_top_;
  ::google::protobuf::int32 phy_world_left_;
  ::google::protobuf::int32 phy_world_right_;
  double phy_world_xgravity_;
  double phy_world_ygravity_;
  ::google::protobuf::int32 phy_world_bottom_;
  ::google::protobuf::uint32 speed_;
  double phy_world_pixel_meters_;
  friend struct protobuf_resources_2fRoom_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Room_MakerSettings

// optional bool set = 1 [(.buffers.gmx) = "isSet"];
inline bool Room_MakerSettings::has_set() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Room_MakerSettings::set_has_set() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Room_MakerSettings::clear_has_set() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Room_MakerSettings::clear_set() {
  set_ = false;
  clear_has_set();
}
inline bool Room_MakerSettings::set() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.set)
  return set_;
}
inline void Room_MakerSettings::set_set(bool value) {
  set_has_set();
  set_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.set)
}

// optional bool width = 2 [(.buffers.gmx) = "w"];
inline bool Room_MakerSettings::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Room_MakerSettings::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Room_MakerSettings::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Room_MakerSettings::clear_width() {
  width_ = false;
  clear_has_width();
}
inline bool Room_MakerSettings::width() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.width)
  return width_;
}
inline void Room_MakerSettings::set_width(bool value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.width)
}

// optional bool height = 3 [(.buffers.gmx) = "h"];
inline bool Room_MakerSettings::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Room_MakerSettings::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Room_MakerSettings::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Room_MakerSettings::clear_height() {
  height_ = false;
  clear_has_height();
}
inline bool Room_MakerSettings::height() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.height)
  return height_;
}
inline void Room_MakerSettings::set_height(bool value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.height)
}

// optional bool show_grid = 4 [(.buffers.gmx) = "showGrid"];
inline bool Room_MakerSettings::has_show_grid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Room_MakerSettings::set_has_show_grid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Room_MakerSettings::clear_has_show_grid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Room_MakerSettings::clear_show_grid() {
  show_grid_ = false;
  clear_has_show_grid();
}
inline bool Room_MakerSettings::show_grid() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.show_grid)
  return show_grid_;
}
inline void Room_MakerSettings::set_show_grid(bool value) {
  set_has_show_grid();
  show_grid_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.show_grid)
}

// optional bool show_objects = 5 [(.buffers.gmx) = "showObjects"];
inline bool Room_MakerSettings::has_show_objects() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Room_MakerSettings::set_has_show_objects() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Room_MakerSettings::clear_has_show_objects() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Room_MakerSettings::clear_show_objects() {
  show_objects_ = false;
  clear_has_show_objects();
}
inline bool Room_MakerSettings::show_objects() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.show_objects)
  return show_objects_;
}
inline void Room_MakerSettings::set_show_objects(bool value) {
  set_has_show_objects();
  show_objects_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.show_objects)
}

// optional bool show_tiles = 6 [(.buffers.gmx) = "showTiles"];
inline bool Room_MakerSettings::has_show_tiles() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Room_MakerSettings::set_has_show_tiles() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Room_MakerSettings::clear_has_show_tiles() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Room_MakerSettings::clear_show_tiles() {
  show_tiles_ = false;
  clear_has_show_tiles();
}
inline bool Room_MakerSettings::show_tiles() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.show_tiles)
  return show_tiles_;
}
inline void Room_MakerSettings::set_show_tiles(bool value) {
  set_has_show_tiles();
  show_tiles_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.show_tiles)
}

// optional bool show_backgrounds = 7 [(.buffers.gmx) = "showBackgrounds"];
inline bool Room_MakerSettings::has_show_backgrounds() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Room_MakerSettings::set_has_show_backgrounds() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Room_MakerSettings::clear_has_show_backgrounds() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Room_MakerSettings::clear_show_backgrounds() {
  show_backgrounds_ = false;
  clear_has_show_backgrounds();
}
inline bool Room_MakerSettings::show_backgrounds() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.show_backgrounds)
  return show_backgrounds_;
}
inline void Room_MakerSettings::set_show_backgrounds(bool value) {
  set_has_show_backgrounds();
  show_backgrounds_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.show_backgrounds)
}

// optional bool show_foregrounds = 8 [(.buffers.gmx) = "showForegrounds"];
inline bool Room_MakerSettings::has_show_foregrounds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Room_MakerSettings::set_has_show_foregrounds() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Room_MakerSettings::clear_has_show_foregrounds() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Room_MakerSettings::clear_show_foregrounds() {
  show_foregrounds_ = false;
  clear_has_show_foregrounds();
}
inline bool Room_MakerSettings::show_foregrounds() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.show_foregrounds)
  return show_foregrounds_;
}
inline void Room_MakerSettings::set_show_foregrounds(bool value) {
  set_has_show_foregrounds();
  show_foregrounds_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.show_foregrounds)
}

// optional bool show_views = 9 [(.buffers.gmx) = "showViews"];
inline bool Room_MakerSettings::has_show_views() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Room_MakerSettings::set_has_show_views() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Room_MakerSettings::clear_has_show_views() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Room_MakerSettings::clear_show_views() {
  show_views_ = false;
  clear_has_show_views();
}
inline bool Room_MakerSettings::show_views() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.show_views)
  return show_views_;
}
inline void Room_MakerSettings::set_show_views(bool value) {
  set_has_show_views();
  show_views_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.show_views)
}

// optional bool delete_underlying_objects = 10 [(.buffers.gmx) = "deleteUnderlyingObj"];
inline bool Room_MakerSettings::has_delete_underlying_objects() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Room_MakerSettings::set_has_delete_underlying_objects() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Room_MakerSettings::clear_has_delete_underlying_objects() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Room_MakerSettings::clear_delete_underlying_objects() {
  delete_underlying_objects_ = false;
  clear_has_delete_underlying_objects();
}
inline bool Room_MakerSettings::delete_underlying_objects() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.delete_underlying_objects)
  return delete_underlying_objects_;
}
inline void Room_MakerSettings::set_delete_underlying_objects(bool value) {
  set_has_delete_underlying_objects();
  delete_underlying_objects_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.delete_underlying_objects)
}

// optional bool delete_underlying_tiles = 11 [(.buffers.gmx) = "deleteUnderlyingTiles"];
inline bool Room_MakerSettings::has_delete_underlying_tiles() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Room_MakerSettings::set_has_delete_underlying_tiles() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Room_MakerSettings::clear_has_delete_underlying_tiles() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Room_MakerSettings::clear_delete_underlying_tiles() {
  delete_underlying_tiles_ = false;
  clear_has_delete_underlying_tiles();
}
inline bool Room_MakerSettings::delete_underlying_tiles() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.delete_underlying_tiles)
  return delete_underlying_tiles_;
}
inline void Room_MakerSettings::set_delete_underlying_tiles(bool value) {
  set_has_delete_underlying_tiles();
  delete_underlying_tiles_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.delete_underlying_tiles)
}

// optional uint32 page = 12;
inline bool Room_MakerSettings::has_page() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Room_MakerSettings::set_has_page() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Room_MakerSettings::clear_has_page() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Room_MakerSettings::clear_page() {
  page_ = 0u;
  clear_has_page();
}
inline ::google::protobuf::uint32 Room_MakerSettings::page() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.page)
  return page_;
}
inline void Room_MakerSettings::set_page(::google::protobuf::uint32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.page)
}

// optional int32 xoffset = 13;
inline bool Room_MakerSettings::has_xoffset() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Room_MakerSettings::set_has_xoffset() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Room_MakerSettings::clear_has_xoffset() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Room_MakerSettings::clear_xoffset() {
  xoffset_ = 0;
  clear_has_xoffset();
}
inline ::google::protobuf::int32 Room_MakerSettings::xoffset() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.xoffset)
  return xoffset_;
}
inline void Room_MakerSettings::set_xoffset(::google::protobuf::int32 value) {
  set_has_xoffset();
  xoffset_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.xoffset)
}

// optional int32 yoffset = 14;
inline bool Room_MakerSettings::has_yoffset() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Room_MakerSettings::set_has_yoffset() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Room_MakerSettings::clear_has_yoffset() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Room_MakerSettings::clear_yoffset() {
  yoffset_ = 0;
  clear_has_yoffset();
}
inline ::google::protobuf::int32 Room_MakerSettings::yoffset() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.MakerSettings.yoffset)
  return yoffset_;
}
inline void Room_MakerSettings::set_yoffset(::google::protobuf::int32 value) {
  set_has_yoffset();
  yoffset_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.MakerSettings.yoffset)
}

// -------------------------------------------------------------------

// Room_RoomBackground

// optional bool visible = 1;
inline bool Room_RoomBackground::has_visible() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Room_RoomBackground::set_has_visible() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Room_RoomBackground::clear_has_visible() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Room_RoomBackground::clear_visible() {
  visible_ = false;
  clear_has_visible();
}
inline bool Room_RoomBackground::visible() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.visible)
  return visible_;
}
inline void Room_RoomBackground::set_visible(bool value) {
  set_has_visible();
  visible_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.visible)
}

// optional bool foreground = 2;
inline bool Room_RoomBackground::has_foreground() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Room_RoomBackground::set_has_foreground() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Room_RoomBackground::clear_has_foreground() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Room_RoomBackground::clear_foreground() {
  foreground_ = false;
  clear_has_foreground();
}
inline bool Room_RoomBackground::foreground() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.foreground)
  return foreground_;
}
inline void Room_RoomBackground::set_foreground(bool value) {
  set_has_foreground();
  foreground_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.foreground)
}

// optional string name = 3;
inline bool Room_RoomBackground::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Room_RoomBackground::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Room_RoomBackground::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Room_RoomBackground::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Room_RoomBackground::name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.name)
  return name_.GetNoArena();
}
inline void Room_RoomBackground::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.name)
}
#if LANG_CXX11
inline void Room_RoomBackground::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.RoomBackground.name)
}
#endif
inline void Room_RoomBackground::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.RoomBackground.name)
}
inline void Room_RoomBackground::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.RoomBackground.name)
}
inline ::std::string* Room_RoomBackground::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.RoomBackground.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Room_RoomBackground::release_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.RoomBackground.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Room_RoomBackground::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.RoomBackground.name)
}

// optional int32 x = 4;
inline bool Room_RoomBackground::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Room_RoomBackground::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Room_RoomBackground::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Room_RoomBackground::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Room_RoomBackground::x() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.x)
  return x_;
}
inline void Room_RoomBackground::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.x)
}

// optional int32 y = 5;
inline bool Room_RoomBackground::has_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Room_RoomBackground::set_has_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Room_RoomBackground::clear_has_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Room_RoomBackground::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Room_RoomBackground::y() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.y)
  return y_;
}
inline void Room_RoomBackground::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.y)
}

// optional bool htiled = 6;
inline bool Room_RoomBackground::has_htiled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Room_RoomBackground::set_has_htiled() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Room_RoomBackground::clear_has_htiled() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Room_RoomBackground::clear_htiled() {
  htiled_ = false;
  clear_has_htiled();
}
inline bool Room_RoomBackground::htiled() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.htiled)
  return htiled_;
}
inline void Room_RoomBackground::set_htiled(bool value) {
  set_has_htiled();
  htiled_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.htiled)
}

// optional bool vtiled = 7;
inline bool Room_RoomBackground::has_vtiled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Room_RoomBackground::set_has_vtiled() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Room_RoomBackground::clear_has_vtiled() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Room_RoomBackground::clear_vtiled() {
  vtiled_ = false;
  clear_has_vtiled();
}
inline bool Room_RoomBackground::vtiled() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.vtiled)
  return vtiled_;
}
inline void Room_RoomBackground::set_vtiled(bool value) {
  set_has_vtiled();
  vtiled_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.vtiled)
}

// optional double hspeed = 8;
inline bool Room_RoomBackground::has_hspeed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Room_RoomBackground::set_has_hspeed() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Room_RoomBackground::clear_has_hspeed() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Room_RoomBackground::clear_hspeed() {
  hspeed_ = 0;
  clear_has_hspeed();
}
inline double Room_RoomBackground::hspeed() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.hspeed)
  return hspeed_;
}
inline void Room_RoomBackground::set_hspeed(double value) {
  set_has_hspeed();
  hspeed_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.hspeed)
}

// optional double vspeed = 9;
inline bool Room_RoomBackground::has_vspeed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Room_RoomBackground::set_has_vspeed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Room_RoomBackground::clear_has_vspeed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Room_RoomBackground::clear_vspeed() {
  vspeed_ = 0;
  clear_has_vspeed();
}
inline double Room_RoomBackground::vspeed() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.vspeed)
  return vspeed_;
}
inline void Room_RoomBackground::set_vspeed(double value) {
  set_has_vspeed();
  vspeed_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.vspeed)
}

// optional bool stretch = 10;
inline bool Room_RoomBackground::has_stretch() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Room_RoomBackground::set_has_stretch() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Room_RoomBackground::clear_has_stretch() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Room_RoomBackground::clear_stretch() {
  stretch_ = false;
  clear_has_stretch();
}
inline bool Room_RoomBackground::stretch() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.RoomBackground.stretch)
  return stretch_;
}
inline void Room_RoomBackground::set_stretch(bool value) {
  set_has_stretch();
  stretch_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.RoomBackground.stretch)
}

// -------------------------------------------------------------------

// Room_View

// optional bool visible = 1;
inline bool Room_View::has_visible() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Room_View::set_has_visible() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Room_View::clear_has_visible() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Room_View::clear_visible() {
  visible_ = false;
  clear_has_visible();
}
inline bool Room_View::visible() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.visible)
  return visible_;
}
inline void Room_View::set_visible(bool value) {
  set_has_visible();
  visible_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.visible)
}

// optional string object_following = 2 [(.buffers.gmx) = "objName"];
inline bool Room_View::has_object_following() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Room_View::set_has_object_following() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Room_View::clear_has_object_following() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Room_View::clear_object_following() {
  object_following_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object_following();
}
inline const ::std::string& Room_View::object_following() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.object_following)
  return object_following_.GetNoArena();
}
inline void Room_View::set_object_following(const ::std::string& value) {
  set_has_object_following();
  object_following_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.object_following)
}
#if LANG_CXX11
inline void Room_View::set_object_following(::std::string&& value) {
  set_has_object_following();
  object_following_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.View.object_following)
}
#endif
inline void Room_View::set_object_following(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_object_following();
  object_following_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.View.object_following)
}
inline void Room_View::set_object_following(const char* value, size_t size) {
  set_has_object_following();
  object_following_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.View.object_following)
}
inline ::std::string* Room_View::mutable_object_following() {
  set_has_object_following();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.View.object_following)
  return object_following_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Room_View::release_object_following() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.View.object_following)
  clear_has_object_following();
  return object_following_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Room_View::set_allocated_object_following(::std::string* object_following) {
  if (object_following != NULL) {
    set_has_object_following();
  } else {
    clear_has_object_following();
  }
  object_following_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_following);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.View.object_following)
}

// optional int32 xview = 3;
inline bool Room_View::has_xview() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Room_View::set_has_xview() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Room_View::clear_has_xview() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Room_View::clear_xview() {
  xview_ = 0;
  clear_has_xview();
}
inline ::google::protobuf::int32 Room_View::xview() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.xview)
  return xview_;
}
inline void Room_View::set_xview(::google::protobuf::int32 value) {
  set_has_xview();
  xview_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.xview)
}

// optional int32 yview = 4;
inline bool Room_View::has_yview() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Room_View::set_has_yview() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Room_View::clear_has_yview() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Room_View::clear_yview() {
  yview_ = 0;
  clear_has_yview();
}
inline ::google::protobuf::int32 Room_View::yview() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.yview)
  return yview_;
}
inline void Room_View::set_yview(::google::protobuf::int32 value) {
  set_has_yview();
  yview_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.yview)
}

// optional uint32 wview = 5;
inline bool Room_View::has_wview() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Room_View::set_has_wview() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Room_View::clear_has_wview() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Room_View::clear_wview() {
  wview_ = 0u;
  clear_has_wview();
}
inline ::google::protobuf::uint32 Room_View::wview() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.wview)
  return wview_;
}
inline void Room_View::set_wview(::google::protobuf::uint32 value) {
  set_has_wview();
  wview_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.wview)
}

// optional uint32 hview = 6;
inline bool Room_View::has_hview() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Room_View::set_has_hview() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Room_View::clear_has_hview() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Room_View::clear_hview() {
  hview_ = 0u;
  clear_has_hview();
}
inline ::google::protobuf::uint32 Room_View::hview() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.hview)
  return hview_;
}
inline void Room_View::set_hview(::google::protobuf::uint32 value) {
  set_has_hview();
  hview_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.hview)
}

// optional int32 xport = 7;
inline bool Room_View::has_xport() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Room_View::set_has_xport() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Room_View::clear_has_xport() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Room_View::clear_xport() {
  xport_ = 0;
  clear_has_xport();
}
inline ::google::protobuf::int32 Room_View::xport() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.xport)
  return xport_;
}
inline void Room_View::set_xport(::google::protobuf::int32 value) {
  set_has_xport();
  xport_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.xport)
}

// optional int32 yport = 8;
inline bool Room_View::has_yport() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Room_View::set_has_yport() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Room_View::clear_has_yport() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Room_View::clear_yport() {
  yport_ = 0;
  clear_has_yport();
}
inline ::google::protobuf::int32 Room_View::yport() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.yport)
  return yport_;
}
inline void Room_View::set_yport(::google::protobuf::int32 value) {
  set_has_yport();
  yport_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.yport)
}

// optional uint32 wport = 9;
inline bool Room_View::has_wport() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Room_View::set_has_wport() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Room_View::clear_has_wport() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Room_View::clear_wport() {
  wport_ = 0u;
  clear_has_wport();
}
inline ::google::protobuf::uint32 Room_View::wport() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.wport)
  return wport_;
}
inline void Room_View::set_wport(::google::protobuf::uint32 value) {
  set_has_wport();
  wport_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.wport)
}

// optional uint32 hport = 10;
inline bool Room_View::has_hport() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Room_View::set_has_hport() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Room_View::clear_has_hport() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Room_View::clear_hport() {
  hport_ = 0u;
  clear_has_hport();
}
inline ::google::protobuf::uint32 Room_View::hport() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.hport)
  return hport_;
}
inline void Room_View::set_hport(::google::protobuf::uint32 value) {
  set_has_hport();
  hport_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.hport)
}

// optional int32 hborder = 11;
inline bool Room_View::has_hborder() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Room_View::set_has_hborder() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Room_View::clear_has_hborder() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Room_View::clear_hborder() {
  hborder_ = 0;
  clear_has_hborder();
}
inline ::google::protobuf::int32 Room_View::hborder() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.hborder)
  return hborder_;
}
inline void Room_View::set_hborder(::google::protobuf::int32 value) {
  set_has_hborder();
  hborder_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.hborder)
}

// optional int32 vborder = 12;
inline bool Room_View::has_vborder() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Room_View::set_has_vborder() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Room_View::clear_has_vborder() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Room_View::clear_vborder() {
  vborder_ = 0;
  clear_has_vborder();
}
inline ::google::protobuf::int32 Room_View::vborder() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.vborder)
  return vborder_;
}
inline void Room_View::set_vborder(::google::protobuf::int32 value) {
  set_has_vborder();
  vborder_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.vborder)
}

// optional double hspeed = 13;
inline bool Room_View::has_hspeed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Room_View::set_has_hspeed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Room_View::clear_has_hspeed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Room_View::clear_hspeed() {
  hspeed_ = 0;
  clear_has_hspeed();
}
inline double Room_View::hspeed() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.hspeed)
  return hspeed_;
}
inline void Room_View::set_hspeed(double value) {
  set_has_hspeed();
  hspeed_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.hspeed)
}

// optional double vspeed = 14;
inline bool Room_View::has_vspeed() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Room_View::set_has_vspeed() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Room_View::clear_has_vspeed() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Room_View::clear_vspeed() {
  vspeed_ = 0;
  clear_has_vspeed();
}
inline double Room_View::vspeed() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.View.vspeed)
  return vspeed_;
}
inline void Room_View::set_vspeed(double value) {
  set_has_vspeed();
  vspeed_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.View.vspeed)
}

// -------------------------------------------------------------------

// Room_Instance

// optional string object_type = 1 [(.buffers.gmx) = "objName"];
inline bool Room_Instance::has_object_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Room_Instance::set_has_object_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Room_Instance::clear_has_object_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Room_Instance::clear_object_type() {
  object_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_object_type();
}
inline const ::std::string& Room_Instance::object_type() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.object_type)
  return object_type_.GetNoArena();
}
inline void Room_Instance::set_object_type(const ::std::string& value) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.object_type)
}
#if LANG_CXX11
inline void Room_Instance::set_object_type(::std::string&& value) {
  set_has_object_type();
  object_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.Instance.object_type)
}
#endif
inline void Room_Instance::set_object_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.Instance.object_type)
}
inline void Room_Instance::set_object_type(const char* value, size_t size) {
  set_has_object_type();
  object_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.Instance.object_type)
}
inline ::std::string* Room_Instance::mutable_object_type() {
  set_has_object_type();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.Instance.object_type)
  return object_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Room_Instance::release_object_type() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.Instance.object_type)
  clear_has_object_type();
  return object_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Room_Instance::set_allocated_object_type(::std::string* object_type) {
  if (object_type != NULL) {
    set_has_object_type();
  } else {
    clear_has_object_type();
  }
  object_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_type);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.Instance.object_type)
}

// optional int32 x = 2;
inline bool Room_Instance::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Room_Instance::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Room_Instance::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Room_Instance::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Room_Instance::x() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.x)
  return x_;
}
inline void Room_Instance::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.x)
}

// optional int32 y = 3;
inline bool Room_Instance::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Room_Instance::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Room_Instance::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Room_Instance::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Room_Instance::y() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.y)
  return y_;
}
inline void Room_Instance::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.y)
}

// optional string id = 4 [(.buffers.gmx) = "name"];
inline bool Room_Instance::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Room_Instance::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Room_Instance::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Room_Instance::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Room_Instance::id() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.id)
  return id_.GetNoArena();
}
inline void Room_Instance::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.id)
}
#if LANG_CXX11
inline void Room_Instance::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.Instance.id)
}
#endif
inline void Room_Instance::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.Instance.id)
}
inline void Room_Instance::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.Instance.id)
}
inline ::std::string* Room_Instance::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.Instance.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Room_Instance::release_id() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.Instance.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Room_Instance::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.Instance.id)
}

// optional bool locked = 5;
inline bool Room_Instance::has_locked() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Room_Instance::set_has_locked() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Room_Instance::clear_has_locked() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Room_Instance::clear_locked() {
  locked_ = false;
  clear_has_locked();
}
inline bool Room_Instance::locked() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.locked)
  return locked_;
}
inline void Room_Instance::set_locked(bool value) {
  set_has_locked();
  locked_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.locked)
}

// optional string code = 6;
inline bool Room_Instance::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Room_Instance::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Room_Instance::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Room_Instance::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& Room_Instance::code() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.code)
  return code_.GetNoArena();
}
inline void Room_Instance::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.code)
}
#if LANG_CXX11
inline void Room_Instance::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.Instance.code)
}
#endif
inline void Room_Instance::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.Instance.code)
}
inline void Room_Instance::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.Instance.code)
}
inline ::std::string* Room_Instance::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.Instance.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Room_Instance::release_code() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.Instance.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Room_Instance::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.Instance.code)
}

// optional double xscale = 7 [(.buffers.gmx) = "scaleX"];
inline bool Room_Instance::has_xscale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Room_Instance::set_has_xscale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Room_Instance::clear_has_xscale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Room_Instance::clear_xscale() {
  xscale_ = 0;
  clear_has_xscale();
}
inline double Room_Instance::xscale() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.xscale)
  return xscale_;
}
inline void Room_Instance::set_xscale(double value) {
  set_has_xscale();
  xscale_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.xscale)
}

// optional double yscale = 8 [(.buffers.gmx) = "scaleY"];
inline bool Room_Instance::has_yscale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Room_Instance::set_has_yscale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Room_Instance::clear_has_yscale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Room_Instance::clear_yscale() {
  yscale_ = 0;
  clear_has_yscale();
}
inline double Room_Instance::yscale() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.yscale)
  return yscale_;
}
inline void Room_Instance::set_yscale(double value) {
  set_has_yscale();
  yscale_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.yscale)
}

// optional int32 color = 9 [(.buffers.gmx) = "colour"];
inline bool Room_Instance::has_color() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Room_Instance::set_has_color() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Room_Instance::clear_has_color() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Room_Instance::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 Room_Instance::color() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.color)
  return color_;
}
inline void Room_Instance::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.color)
}

// optional double rotation = 10;
inline bool Room_Instance::has_rotation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Room_Instance::set_has_rotation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Room_Instance::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Room_Instance::clear_rotation() {
  rotation_ = 0;
  clear_has_rotation();
}
inline double Room_Instance::rotation() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Instance.rotation)
  return rotation_;
}
inline void Room_Instance::set_rotation(double value) {
  set_has_rotation();
  rotation_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Instance.rotation)
}

// -------------------------------------------------------------------

// Room_Tile

// optional string image = 1 [(.buffers.gmx) = "bgName"];
inline bool Room_Tile::has_image() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Room_Tile::set_has_image() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Room_Tile::clear_has_image() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Room_Tile::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image();
}
inline const ::std::string& Room_Tile::image() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.image)
  return image_.GetNoArena();
}
inline void Room_Tile::set_image(const ::std::string& value) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.image)
}
#if LANG_CXX11
inline void Room_Tile::set_image(::std::string&& value) {
  set_has_image();
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.Tile.image)
}
#endif
inline void Room_Tile::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.Tile.image)
}
inline void Room_Tile::set_image(const char* value, size_t size) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.Tile.image)
}
inline ::std::string* Room_Tile::mutable_image() {
  set_has_image();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.Tile.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Room_Tile::release_image() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.Tile.image)
  clear_has_image();
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Room_Tile::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    set_has_image();
  } else {
    clear_has_image();
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.Tile.image)
}

// optional int32 x = 2;
inline bool Room_Tile::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Room_Tile::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Room_Tile::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Room_Tile::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Room_Tile::x() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.x)
  return x_;
}
inline void Room_Tile::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.x)
}

// optional int32 y = 3;
inline bool Room_Tile::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Room_Tile::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Room_Tile::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Room_Tile::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Room_Tile::y() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.y)
  return y_;
}
inline void Room_Tile::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.y)
}

// optional uint32 width = 4 [(.buffers.gmx) = "w"];
inline bool Room_Tile::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Room_Tile::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Room_Tile::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Room_Tile::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 Room_Tile::width() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.width)
  return width_;
}
inline void Room_Tile::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.width)
}

// optional uint32 height = 5 [(.buffers.gmx) = "h"];
inline bool Room_Tile::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Room_Tile::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Room_Tile::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Room_Tile::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 Room_Tile::height() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.height)
  return height_;
}
inline void Room_Tile::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.height)
}

// optional int32 xoffset = 6 [(.buffers.gmx) = "xo"];
inline bool Room_Tile::has_xoffset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Room_Tile::set_has_xoffset() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Room_Tile::clear_has_xoffset() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Room_Tile::clear_xoffset() {
  xoffset_ = 0;
  clear_has_xoffset();
}
inline ::google::protobuf::int32 Room_Tile::xoffset() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.xoffset)
  return xoffset_;
}
inline void Room_Tile::set_xoffset(::google::protobuf::int32 value) {
  set_has_xoffset();
  xoffset_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.xoffset)
}

// optional int32 yoffset = 7 [(.buffers.gmx) = "yo"];
inline bool Room_Tile::has_yoffset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Room_Tile::set_has_yoffset() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Room_Tile::clear_has_yoffset() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Room_Tile::clear_yoffset() {
  yoffset_ = 0;
  clear_has_yoffset();
}
inline ::google::protobuf::int32 Room_Tile::yoffset() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.yoffset)
  return yoffset_;
}
inline void Room_Tile::set_yoffset(::google::protobuf::int32 value) {
  set_has_yoffset();
  yoffset_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.yoffset)
}

// optional int32 id = 8;
inline bool Room_Tile::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Room_Tile::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Room_Tile::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Room_Tile::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Room_Tile::id() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.id)
  return id_;
}
inline void Room_Tile::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.id)
}

// optional string name = 9;
inline bool Room_Tile::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Room_Tile::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Room_Tile::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Room_Tile::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Room_Tile::name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.name)
  return name_.GetNoArena();
}
inline void Room_Tile::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.name)
}
#if LANG_CXX11
inline void Room_Tile::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.Tile.name)
}
#endif
inline void Room_Tile::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.Tile.name)
}
inline void Room_Tile::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.Tile.name)
}
inline ::std::string* Room_Tile::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.Tile.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Room_Tile::release_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.Tile.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Room_Tile::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.Tile.name)
}

// optional int32 depth = 10;
inline bool Room_Tile::has_depth() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Room_Tile::set_has_depth() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Room_Tile::clear_has_depth() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Room_Tile::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 Room_Tile::depth() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.depth)
  return depth_;
}
inline void Room_Tile::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.depth)
}

// optional bool locked = 11;
inline bool Room_Tile::has_locked() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Room_Tile::set_has_locked() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Room_Tile::clear_has_locked() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Room_Tile::clear_locked() {
  locked_ = false;
  clear_has_locked();
}
inline bool Room_Tile::locked() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.locked)
  return locked_;
}
inline void Room_Tile::set_locked(bool value) {
  set_has_locked();
  locked_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.locked)
}

// optional int32 color = 12 [(.buffers.gmx) = "colour"];
inline bool Room_Tile::has_color() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Room_Tile::set_has_color() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Room_Tile::clear_has_color() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Room_Tile::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 Room_Tile::color() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.color)
  return color_;
}
inline void Room_Tile::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.color)
}

// optional double xscale = 13 [(.buffers.gmx) = "scaleX"];
inline bool Room_Tile::has_xscale() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Room_Tile::set_has_xscale() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Room_Tile::clear_has_xscale() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Room_Tile::clear_xscale() {
  xscale_ = 0;
  clear_has_xscale();
}
inline double Room_Tile::xscale() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.xscale)
  return xscale_;
}
inline void Room_Tile::set_xscale(double value) {
  set_has_xscale();
  xscale_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.xscale)
}

// optional double yscale = 14 [(.buffers.gmx) = "scaleY"];
inline bool Room_Tile::has_yscale() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Room_Tile::set_has_yscale() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Room_Tile::clear_has_yscale() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Room_Tile::clear_yscale() {
  yscale_ = 0;
  clear_has_yscale();
}
inline double Room_Tile::yscale() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.Tile.yscale)
  return yscale_;
}
inline void Room_Tile::set_yscale(double value) {
  set_has_yscale();
  yscale_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.Tile.yscale)
}

// -------------------------------------------------------------------

// Room

// optional string caption = 1;
inline bool Room::has_caption() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Room::set_has_caption() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Room::clear_has_caption() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Room::clear_caption() {
  caption_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caption();
}
inline const ::std::string& Room::caption() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.caption)
  return caption_.GetNoArena();
}
inline void Room::set_caption(const ::std::string& value) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.caption)
}
#if LANG_CXX11
inline void Room::set_caption(::std::string&& value) {
  set_has_caption();
  caption_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.caption)
}
#endif
inline void Room::set_caption(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.caption)
}
inline void Room::set_caption(const char* value, size_t size) {
  set_has_caption();
  caption_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.caption)
}
inline ::std::string* Room::mutable_caption() {
  set_has_caption();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.caption)
  return caption_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Room::release_caption() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.caption)
  clear_has_caption();
  return caption_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Room::set_allocated_caption(::std::string* caption) {
  if (caption != NULL) {
    set_has_caption();
  } else {
    clear_has_caption();
  }
  caption_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caption);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.caption)
}

// optional uint32 width = 2;
inline bool Room::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Room::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Room::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Room::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 Room::width() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.width)
  return width_;
}
inline void Room::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.width)
}

// optional uint32 height = 3;
inline bool Room::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Room::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Room::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Room::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 Room::height() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.height)
  return height_;
}
inline void Room::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.height)
}

// optional uint32 vsnap = 4;
inline bool Room::has_vsnap() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Room::set_has_vsnap() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Room::clear_has_vsnap() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Room::clear_vsnap() {
  vsnap_ = 0u;
  clear_has_vsnap();
}
inline ::google::protobuf::uint32 Room::vsnap() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.vsnap)
  return vsnap_;
}
inline void Room::set_vsnap(::google::protobuf::uint32 value) {
  set_has_vsnap();
  vsnap_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.vsnap)
}

// optional uint32 hsnap = 5;
inline bool Room::has_hsnap() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Room::set_has_hsnap() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Room::clear_has_hsnap() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Room::clear_hsnap() {
  hsnap_ = 0u;
  clear_has_hsnap();
}
inline ::google::protobuf::uint32 Room::hsnap() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.hsnap)
  return hsnap_;
}
inline void Room::set_hsnap(::google::protobuf::uint32 value) {
  set_has_hsnap();
  hsnap_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.hsnap)
}

// optional bool isometric = 6;
inline bool Room::has_isometric() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Room::set_has_isometric() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Room::clear_has_isometric() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Room::clear_isometric() {
  isometric_ = false;
  clear_has_isometric();
}
inline bool Room::isometric() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.isometric)
  return isometric_;
}
inline void Room::set_isometric(bool value) {
  set_has_isometric();
  isometric_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.isometric)
}

// optional uint32 speed = 27;
inline bool Room::has_speed() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Room::set_has_speed() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Room::clear_has_speed() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Room::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 Room::speed() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.speed)
  return speed_;
}
inline void Room::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.speed)
}

// optional bool persistent = 7;
inline bool Room::has_persistent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Room::set_has_persistent() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Room::clear_has_persistent() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Room::clear_persistent() {
  persistent_ = false;
  clear_has_persistent();
}
inline bool Room::persistent() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.persistent)
  return persistent_;
}
inline void Room::set_persistent(bool value) {
  set_has_persistent();
  persistent_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.persistent)
}

// optional int32 color = 8 [(.buffers.gmx) = "colour"];
inline bool Room::has_color() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Room::set_has_color() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Room::clear_has_color() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Room::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 Room::color() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.color)
  return color_;
}
inline void Room::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.color)
}

// optional bool show_color = 9 [(.buffers.gmx) = "showcolour"];
inline bool Room::has_show_color() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Room::set_has_show_color() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Room::clear_has_show_color() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Room::clear_show_color() {
  show_color_ = false;
  clear_has_show_color();
}
inline bool Room::show_color() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.show_color)
  return show_color_;
}
inline void Room::set_show_color(bool value) {
  set_has_show_color();
  show_color_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.show_color)
}

// optional string code = 10;
inline bool Room::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Room::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Room::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Room::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& Room::code() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.code)
  return code_.GetNoArena();
}
inline void Room::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Room.code)
}
#if LANG_CXX11
inline void Room::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Room.code)
}
#endif
inline void Room::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Room.code)
}
inline void Room::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Room.code)
}
inline ::std::string* Room::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Room::release_code() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Room::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.code)
}

// optional bool enable_views = 11 [(.buffers.gmx) = "enableViews"];
inline bool Room::has_enable_views() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Room::set_has_enable_views() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Room::clear_has_enable_views() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Room::clear_enable_views() {
  enable_views_ = false;
  clear_has_enable_views();
}
inline bool Room::enable_views() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.enable_views)
  return enable_views_;
}
inline void Room::set_enable_views(bool value) {
  set_has_enable_views();
  enable_views_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.enable_views)
}

// optional bool clear_view_background = 12 [(.buffers.gmx) = "clearViewBackground"];
inline bool Room::has_clear_view_background() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Room::set_has_clear_view_background() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Room::clear_has_clear_view_background() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Room::clear_clear_view_background() {
  clear_view_background_ = false;
  clear_has_clear_view_background();
}
inline bool Room::clear_view_background() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.clear_view_background)
  return clear_view_background_;
}
inline void Room::set_clear_view_background(bool value) {
  set_has_clear_view_background();
  clear_view_background_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.clear_view_background)
}

// optional bool clear_display_buffer = 13 [(.buffers.gmx) = "clearDisplayBuffer"];
inline bool Room::has_clear_display_buffer() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Room::set_has_clear_display_buffer() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Room::clear_has_clear_display_buffer() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Room::clear_clear_display_buffer() {
  clear_display_buffer_ = false;
  clear_has_clear_display_buffer();
}
inline bool Room::clear_display_buffer() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.clear_display_buffer)
  return clear_display_buffer_;
}
inline void Room::set_clear_display_buffer(bool value) {
  set_has_clear_display_buffer();
  clear_display_buffer_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.clear_display_buffer)
}

// optional .buffers.resources.Room.MakerSettings maker_settings = 14 [(.buffers.gmx) = "makerSettings"];
inline bool Room::has_maker_settings() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Room::set_has_maker_settings() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Room::clear_has_maker_settings() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Room::clear_maker_settings() {
  if (maker_settings_ != NULL) maker_settings_->::buffers::resources::Room_MakerSettings::Clear();
  clear_has_maker_settings();
}
inline const ::buffers::resources::Room_MakerSettings& Room::maker_settings() const {
  const ::buffers::resources::Room_MakerSettings* p = maker_settings_;
  // @@protoc_insertion_point(field_get:buffers.resources.Room.maker_settings)
  return p != NULL ? *p : *reinterpret_cast<const ::buffers::resources::Room_MakerSettings*>(
      &::buffers::resources::_Room_MakerSettings_default_instance_);
}
inline ::buffers::resources::Room_MakerSettings* Room::mutable_maker_settings() {
  set_has_maker_settings();
  if (maker_settings_ == NULL) {
    maker_settings_ = new ::buffers::resources::Room_MakerSettings;
  }
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.maker_settings)
  return maker_settings_;
}
inline ::buffers::resources::Room_MakerSettings* Room::release_maker_settings() {
  // @@protoc_insertion_point(field_release:buffers.resources.Room.maker_settings)
  clear_has_maker_settings();
  ::buffers::resources::Room_MakerSettings* temp = maker_settings_;
  maker_settings_ = NULL;
  return temp;
}
inline void Room::set_allocated_maker_settings(::buffers::resources::Room_MakerSettings* maker_settings) {
  delete maker_settings_;
  maker_settings_ = maker_settings;
  if (maker_settings) {
    set_has_maker_settings();
  } else {
    clear_has_maker_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Room.maker_settings)
}

// repeated .buffers.resources.Room.RoomBackground backgrounds = 15;
inline int Room::backgrounds_size() const {
  return backgrounds_.size();
}
inline void Room::clear_backgrounds() {
  backgrounds_.Clear();
}
inline const ::buffers::resources::Room_RoomBackground& Room::backgrounds(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.backgrounds)
  return backgrounds_.Get(index);
}
inline ::buffers::resources::Room_RoomBackground* Room::mutable_backgrounds(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.backgrounds)
  return backgrounds_.Mutable(index);
}
inline ::buffers::resources::Room_RoomBackground* Room::add_backgrounds() {
  // @@protoc_insertion_point(field_add:buffers.resources.Room.backgrounds)
  return backgrounds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_RoomBackground >*
Room::mutable_backgrounds() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Room.backgrounds)
  return &backgrounds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_RoomBackground >&
Room::backgrounds() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Room.backgrounds)
  return backgrounds_;
}

// repeated .buffers.resources.Room.View views = 16;
inline int Room::views_size() const {
  return views_.size();
}
inline void Room::clear_views() {
  views_.Clear();
}
inline const ::buffers::resources::Room_View& Room::views(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.views)
  return views_.Get(index);
}
inline ::buffers::resources::Room_View* Room::mutable_views(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.views)
  return views_.Mutable(index);
}
inline ::buffers::resources::Room_View* Room::add_views() {
  // @@protoc_insertion_point(field_add:buffers.resources.Room.views)
  return views_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_View >*
Room::mutable_views() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Room.views)
  return &views_;
}
inline const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_View >&
Room::views() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Room.views)
  return views_;
}

// repeated .buffers.resources.Room.Instance instances = 17;
inline int Room::instances_size() const {
  return instances_.size();
}
inline void Room::clear_instances() {
  instances_.Clear();
}
inline const ::buffers::resources::Room_Instance& Room::instances(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.instances)
  return instances_.Get(index);
}
inline ::buffers::resources::Room_Instance* Room::mutable_instances(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.instances)
  return instances_.Mutable(index);
}
inline ::buffers::resources::Room_Instance* Room::add_instances() {
  // @@protoc_insertion_point(field_add:buffers.resources.Room.instances)
  return instances_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_Instance >*
Room::mutable_instances() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Room.instances)
  return &instances_;
}
inline const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_Instance >&
Room::instances() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Room.instances)
  return instances_;
}

// repeated .buffers.resources.Room.Tile tiles = 18;
inline int Room::tiles_size() const {
  return tiles_.size();
}
inline void Room::clear_tiles() {
  tiles_.Clear();
}
inline const ::buffers::resources::Room_Tile& Room::tiles(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.tiles)
  return tiles_.Get(index);
}
inline ::buffers::resources::Room_Tile* Room::mutable_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Room.tiles)
  return tiles_.Mutable(index);
}
inline ::buffers::resources::Room_Tile* Room::add_tiles() {
  // @@protoc_insertion_point(field_add:buffers.resources.Room.tiles)
  return tiles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_Tile >*
Room::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Room.tiles)
  return &tiles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Room_Tile >&
Room::tiles() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Room.tiles)
  return tiles_;
}

// optional bool use_physics = 19 [(.buffers.gmx) = "PhysicsWorld"];
inline bool Room::has_use_physics() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Room::set_has_use_physics() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Room::clear_has_use_physics() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Room::clear_use_physics() {
  use_physics_ = false;
  clear_has_use_physics();
}
inline bool Room::use_physics() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.use_physics)
  return use_physics_;
}
inline void Room::set_use_physics(bool value) {
  set_has_use_physics();
  use_physics_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.use_physics)
}

// optional int32 phy_world_top = 20 [(.buffers.gmx) = "PhysicsWorldTop"];
inline bool Room::has_phy_world_top() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Room::set_has_phy_world_top() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Room::clear_has_phy_world_top() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Room::clear_phy_world_top() {
  phy_world_top_ = 0;
  clear_has_phy_world_top();
}
inline ::google::protobuf::int32 Room::phy_world_top() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.phy_world_top)
  return phy_world_top_;
}
inline void Room::set_phy_world_top(::google::protobuf::int32 value) {
  set_has_phy_world_top();
  phy_world_top_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.phy_world_top)
}

// optional int32 phy_world_left = 21 [(.buffers.gmx) = "PhysicsWorldLeft"];
inline bool Room::has_phy_world_left() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Room::set_has_phy_world_left() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Room::clear_has_phy_world_left() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Room::clear_phy_world_left() {
  phy_world_left_ = 0;
  clear_has_phy_world_left();
}
inline ::google::protobuf::int32 Room::phy_world_left() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.phy_world_left)
  return phy_world_left_;
}
inline void Room::set_phy_world_left(::google::protobuf::int32 value) {
  set_has_phy_world_left();
  phy_world_left_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.phy_world_left)
}

// optional int32 phy_world_right = 22 [(.buffers.gmx) = "PhysicsWorldRight"];
inline bool Room::has_phy_world_right() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Room::set_has_phy_world_right() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Room::clear_has_phy_world_right() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Room::clear_phy_world_right() {
  phy_world_right_ = 0;
  clear_has_phy_world_right();
}
inline ::google::protobuf::int32 Room::phy_world_right() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.phy_world_right)
  return phy_world_right_;
}
inline void Room::set_phy_world_right(::google::protobuf::int32 value) {
  set_has_phy_world_right();
  phy_world_right_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.phy_world_right)
}

// optional int32 phy_world_bottom = 23 [(.buffers.gmx) = "PhysicsWorldBottom"];
inline bool Room::has_phy_world_bottom() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Room::set_has_phy_world_bottom() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Room::clear_has_phy_world_bottom() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Room::clear_phy_world_bottom() {
  phy_world_bottom_ = 0;
  clear_has_phy_world_bottom();
}
inline ::google::protobuf::int32 Room::phy_world_bottom() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.phy_world_bottom)
  return phy_world_bottom_;
}
inline void Room::set_phy_world_bottom(::google::protobuf::int32 value) {
  set_has_phy_world_bottom();
  phy_world_bottom_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.phy_world_bottom)
}

// optional double phy_world_xgravity = 24 [(.buffers.gmx) = "PhysicsWorldGravityX"];
inline bool Room::has_phy_world_xgravity() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Room::set_has_phy_world_xgravity() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Room::clear_has_phy_world_xgravity() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Room::clear_phy_world_xgravity() {
  phy_world_xgravity_ = 0;
  clear_has_phy_world_xgravity();
}
inline double Room::phy_world_xgravity() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.phy_world_xgravity)
  return phy_world_xgravity_;
}
inline void Room::set_phy_world_xgravity(double value) {
  set_has_phy_world_xgravity();
  phy_world_xgravity_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.phy_world_xgravity)
}

// optional double phy_world_ygravity = 25 [(.buffers.gmx) = "PhysicsWorldGravityY"];
inline bool Room::has_phy_world_ygravity() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Room::set_has_phy_world_ygravity() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Room::clear_has_phy_world_ygravity() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Room::clear_phy_world_ygravity() {
  phy_world_ygravity_ = 0;
  clear_has_phy_world_ygravity();
}
inline double Room::phy_world_ygravity() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.phy_world_ygravity)
  return phy_world_ygravity_;
}
inline void Room::set_phy_world_ygravity(double value) {
  set_has_phy_world_ygravity();
  phy_world_ygravity_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.phy_world_ygravity)
}

// optional double phy_world_pixel_meters = 26 [(.buffers.gmx) = "PhysicsWorldPixToMeters"];
inline bool Room::has_phy_world_pixel_meters() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Room::set_has_phy_world_pixel_meters() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Room::clear_has_phy_world_pixel_meters() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Room::clear_phy_world_pixel_meters() {
  phy_world_pixel_meters_ = 0;
  clear_has_phy_world_pixel_meters();
}
inline double Room::phy_world_pixel_meters() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Room.phy_world_pixel_meters)
  return phy_world_pixel_meters_;
}
inline void Room::set_phy_world_pixel_meters(double value) {
  set_has_phy_world_pixel_meters();
  phy_world_pixel_meters_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Room.phy_world_pixel_meters)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace resources
}  // namespace buffers

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_resources_2fRoom_2eproto__INCLUDED
