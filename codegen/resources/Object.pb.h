// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resources/Object.proto

#ifndef PROTOBUF_resources_2fObject_2eproto__INCLUDED
#define PROTOBUF_resources_2fObject_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)
namespace buffers {
namespace resources {
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Object_Event;
class Object_EventDefaultTypeInternal;
extern Object_EventDefaultTypeInternal _Object_Event_default_instance_;
class Object_MainEvent;
class Object_MainEventDefaultTypeInternal;
extern Object_MainEventDefaultTypeInternal _Object_MainEvent_default_instance_;
}  // namespace resources
}  // namespace buffers

namespace buffers {
namespace resources {

namespace protobuf_resources_2fObject_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_resources_2fObject_2eproto

// ===================================================================

class Object_Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.Object.Event) */ {
 public:
  Object_Event();
  virtual ~Object_Event();

  Object_Event(const Object_Event& from);

  inline Object_Event& operator=(const Object_Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Object_Event(Object_Event&& from) noexcept
    : Object_Event() {
    *this = ::std::move(from);
  }

  inline Object_Event& operator=(Object_Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Object_Event& default_instance();

  static inline const Object_Event* internal_default_instance() {
    return reinterpret_cast<const Object_Event*>(
               &_Object_Event_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Object_Event* other);
  friend void swap(Object_Event& a, Object_Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Object_Event* New() const PROTOBUF_FINAL { return New(NULL); }

  Object_Event* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Object_Event& from);
  void MergeFrom(const Object_Event& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Object_Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:buffers.resources.Object.Event)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_code();
  void clear_has_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::int32 id_;
  friend struct protobuf_resources_2fObject_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Object_MainEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.Object.MainEvent) */ {
 public:
  Object_MainEvent();
  virtual ~Object_MainEvent();

  Object_MainEvent(const Object_MainEvent& from);

  inline Object_MainEvent& operator=(const Object_MainEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Object_MainEvent(Object_MainEvent&& from) noexcept
    : Object_MainEvent() {
    *this = ::std::move(from);
  }

  inline Object_MainEvent& operator=(Object_MainEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Object_MainEvent& default_instance();

  static inline const Object_MainEvent* internal_default_instance() {
    return reinterpret_cast<const Object_MainEvent*>(
               &_Object_MainEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Object_MainEvent* other);
  friend void swap(Object_MainEvent& a, Object_MainEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Object_MainEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  Object_MainEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Object_MainEvent& from);
  void MergeFrom(const Object_MainEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Object_MainEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .buffers.resources.Object.Event events = 2;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 2;
  const ::buffers::resources::Object_Event& events(int index) const;
  ::buffers::resources::Object_Event* mutable_events(int index);
  ::buffers::resources::Object_Event* add_events();
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Object_Event >*
      mutable_events();
  const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Object_Event >&
      events() const;

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:buffers.resources.Object.MainEvent)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Object_Event > events_;
  ::google::protobuf::int32 id_;
  friend struct protobuf_resources_2fObject_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(Object&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();

  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Object* other);
  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const PROTOBUF_FINAL { return New(NULL); }

  Object* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Object* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Object_Event Event;
  typedef Object_MainEvent MainEvent;

  // accessors -------------------------------------------------------

  // repeated .buffers.resources.Object.MainEvent main_events = 10;
  int main_events_size() const;
  void clear_main_events();
  static const int kMainEventsFieldNumber = 10;
  const ::buffers::resources::Object_MainEvent& main_events(int index) const;
  ::buffers::resources::Object_MainEvent* mutable_main_events(int index);
  ::buffers::resources::Object_MainEvent* add_main_events();
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Object_MainEvent >*
      mutable_main_events();
  const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Object_MainEvent >&
      main_events() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string parent_name = 3 [(.buffers.gmx) = "parentName"];
  bool has_parent_name() const;
  void clear_parent_name();
  static const int kParentNameFieldNumber = 3;
  const ::std::string& parent_name() const;
  void set_parent_name(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_name(::std::string&& value);
  #endif
  void set_parent_name(const char* value);
  void set_parent_name(const char* value, size_t size);
  ::std::string* mutable_parent_name();
  ::std::string* release_parent_name();
  void set_allocated_parent_name(::std::string* parent_name);

  // optional string sprite_name = 4 [(.buffers.gmx) = "spriteName"];
  bool has_sprite_name() const;
  void clear_sprite_name();
  static const int kSpriteNameFieldNumber = 4;
  const ::std::string& sprite_name() const;
  void set_sprite_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sprite_name(::std::string&& value);
  #endif
  void set_sprite_name(const char* value);
  void set_sprite_name(const char* value, size_t size);
  ::std::string* mutable_sprite_name();
  ::std::string* release_sprite_name();
  void set_allocated_sprite_name(::std::string* sprite_name);

  // optional string mask_name = 5 [(.buffers.gmx) = "maskName"];
  bool has_mask_name() const;
  void clear_mask_name();
  static const int kMaskNameFieldNumber = 5;
  const ::std::string& mask_name() const;
  void set_mask_name(const ::std::string& value);
  #if LANG_CXX11
  void set_mask_name(::std::string&& value);
  #endif
  void set_mask_name(const char* value);
  void set_mask_name(const char* value, size_t size);
  ::std::string* mutable_mask_name();
  ::std::string* release_mask_name();
  void set_allocated_mask_name(::std::string* mask_name);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 depth = 6;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 6;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // optional bool solid = 7;
  bool has_solid() const;
  void clear_solid();
  static const int kSolidFieldNumber = 7;
  bool solid() const;
  void set_solid(bool value);

  // optional bool visible = 8;
  bool has_visible() const;
  void clear_visible();
  static const int kVisibleFieldNumber = 8;
  bool visible() const;
  void set_visible(bool value);

  // optional bool persistent = 9;
  bool has_persistent() const;
  void clear_persistent();
  static const int kPersistentFieldNumber = 9;
  bool persistent() const;
  void set_persistent(bool value);

  // @@protoc_insertion_point(class_scope:buffers.resources.Object)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_id();
  void clear_has_id();
  void set_has_parent_name();
  void clear_has_parent_name();
  void set_has_sprite_name();
  void clear_has_sprite_name();
  void set_has_mask_name();
  void clear_has_mask_name();
  void set_has_depth();
  void clear_has_depth();
  void set_has_solid();
  void clear_has_solid();
  void set_has_visible();
  void clear_has_visible();
  void set_has_persistent();
  void clear_has_persistent();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::buffers::resources::Object_MainEvent > main_events_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr parent_name_;
  ::google::protobuf::internal::ArenaStringPtr sprite_name_;
  ::google::protobuf::internal::ArenaStringPtr mask_name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 depth_;
  bool solid_;
  bool visible_;
  bool persistent_;
  friend struct protobuf_resources_2fObject_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Object_Event

// optional int32 id = 1;
inline bool Object_Event::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Object_Event::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Object_Event::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Object_Event::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Object_Event::id() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.Event.id)
  return id_;
}
inline void Object_Event::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.Event.id)
}

// optional string code = 2;
inline bool Object_Event::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Object_Event::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Object_Event::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Object_Event::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& Object_Event::code() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.Event.code)
  return code_.GetNoArena();
}
inline void Object_Event::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Object.Event.code)
}
#if LANG_CXX11
inline void Object_Event::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Object.Event.code)
}
#endif
inline void Object_Event::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Object.Event.code)
}
inline void Object_Event::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Object.Event.code)
}
inline ::std::string* Object_Event::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Object.Event.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object_Event::release_code() {
  // @@protoc_insertion_point(field_release:buffers.resources.Object.Event.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object_Event::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Object.Event.code)
}

// -------------------------------------------------------------------

// Object_MainEvent

// optional int32 id = 1;
inline bool Object_MainEvent::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Object_MainEvent::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Object_MainEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Object_MainEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Object_MainEvent::id() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.MainEvent.id)
  return id_;
}
inline void Object_MainEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.MainEvent.id)
}

// repeated .buffers.resources.Object.Event events = 2;
inline int Object_MainEvent::events_size() const {
  return events_.size();
}
inline void Object_MainEvent::clear_events() {
  events_.Clear();
}
inline const ::buffers::resources::Object_Event& Object_MainEvent::events(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.MainEvent.events)
  return events_.Get(index);
}
inline ::buffers::resources::Object_Event* Object_MainEvent::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Object.MainEvent.events)
  return events_.Mutable(index);
}
inline ::buffers::resources::Object_Event* Object_MainEvent::add_events() {
  // @@protoc_insertion_point(field_add:buffers.resources.Object.MainEvent.events)
  return events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::buffers::resources::Object_Event >*
Object_MainEvent::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Object.MainEvent.events)
  return &events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Object_Event >&
Object_MainEvent::events() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Object.MainEvent.events)
  return events_;
}

// -------------------------------------------------------------------

// Object

// optional string name = 1;
inline bool Object::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Object::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Object::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Object::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Object::name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.name)
  return name_.GetNoArena();
}
inline void Object::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Object.name)
}
#if LANG_CXX11
inline void Object::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Object.name)
}
#endif
inline void Object::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Object.name)
}
inline void Object::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Object.name)
}
inline ::std::string* Object::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Object.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Object.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Object.name)
}

// optional int32 id = 2;
inline bool Object::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Object::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Object::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Object::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Object::id() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.id)
  return id_;
}
inline void Object::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.id)
}

// optional string parent_name = 3 [(.buffers.gmx) = "parentName"];
inline bool Object::has_parent_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Object::set_has_parent_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Object::clear_has_parent_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Object::clear_parent_name() {
  parent_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parent_name();
}
inline const ::std::string& Object::parent_name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.parent_name)
  return parent_name_.GetNoArena();
}
inline void Object::set_parent_name(const ::std::string& value) {
  set_has_parent_name();
  parent_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Object.parent_name)
}
#if LANG_CXX11
inline void Object::set_parent_name(::std::string&& value) {
  set_has_parent_name();
  parent_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Object.parent_name)
}
#endif
inline void Object::set_parent_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parent_name();
  parent_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Object.parent_name)
}
inline void Object::set_parent_name(const char* value, size_t size) {
  set_has_parent_name();
  parent_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Object.parent_name)
}
inline ::std::string* Object::mutable_parent_name() {
  set_has_parent_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Object.parent_name)
  return parent_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_parent_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Object.parent_name)
  clear_has_parent_name();
  return parent_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_parent_name(::std::string* parent_name) {
  if (parent_name != NULL) {
    set_has_parent_name();
  } else {
    clear_has_parent_name();
  }
  parent_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Object.parent_name)
}

// optional string sprite_name = 4 [(.buffers.gmx) = "spriteName"];
inline bool Object::has_sprite_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Object::set_has_sprite_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Object::clear_has_sprite_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Object::clear_sprite_name() {
  sprite_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sprite_name();
}
inline const ::std::string& Object::sprite_name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.sprite_name)
  return sprite_name_.GetNoArena();
}
inline void Object::set_sprite_name(const ::std::string& value) {
  set_has_sprite_name();
  sprite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Object.sprite_name)
}
#if LANG_CXX11
inline void Object::set_sprite_name(::std::string&& value) {
  set_has_sprite_name();
  sprite_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Object.sprite_name)
}
#endif
inline void Object::set_sprite_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sprite_name();
  sprite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Object.sprite_name)
}
inline void Object::set_sprite_name(const char* value, size_t size) {
  set_has_sprite_name();
  sprite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Object.sprite_name)
}
inline ::std::string* Object::mutable_sprite_name() {
  set_has_sprite_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Object.sprite_name)
  return sprite_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_sprite_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Object.sprite_name)
  clear_has_sprite_name();
  return sprite_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_sprite_name(::std::string* sprite_name) {
  if (sprite_name != NULL) {
    set_has_sprite_name();
  } else {
    clear_has_sprite_name();
  }
  sprite_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sprite_name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Object.sprite_name)
}

// optional string mask_name = 5 [(.buffers.gmx) = "maskName"];
inline bool Object::has_mask_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Object::set_has_mask_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Object::clear_has_mask_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Object::clear_mask_name() {
  mask_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mask_name();
}
inline const ::std::string& Object::mask_name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.mask_name)
  return mask_name_.GetNoArena();
}
inline void Object::set_mask_name(const ::std::string& value) {
  set_has_mask_name();
  mask_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Object.mask_name)
}
#if LANG_CXX11
inline void Object::set_mask_name(::std::string&& value) {
  set_has_mask_name();
  mask_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Object.mask_name)
}
#endif
inline void Object::set_mask_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mask_name();
  mask_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Object.mask_name)
}
inline void Object::set_mask_name(const char* value, size_t size) {
  set_has_mask_name();
  mask_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Object.mask_name)
}
inline ::std::string* Object::mutable_mask_name() {
  set_has_mask_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Object.mask_name)
  return mask_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_mask_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Object.mask_name)
  clear_has_mask_name();
  return mask_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_mask_name(::std::string* mask_name) {
  if (mask_name != NULL) {
    set_has_mask_name();
  } else {
    clear_has_mask_name();
  }
  mask_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mask_name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Object.mask_name)
}

// optional int32 depth = 6;
inline bool Object::has_depth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Object::set_has_depth() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Object::clear_has_depth() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Object::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::google::protobuf::int32 Object::depth() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.depth)
  return depth_;
}
inline void Object::set_depth(::google::protobuf::int32 value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.depth)
}

// optional bool solid = 7;
inline bool Object::has_solid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Object::set_has_solid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Object::clear_has_solid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Object::clear_solid() {
  solid_ = false;
  clear_has_solid();
}
inline bool Object::solid() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.solid)
  return solid_;
}
inline void Object::set_solid(bool value) {
  set_has_solid();
  solid_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.solid)
}

// optional bool visible = 8;
inline bool Object::has_visible() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Object::set_has_visible() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Object::clear_has_visible() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Object::clear_visible() {
  visible_ = false;
  clear_has_visible();
}
inline bool Object::visible() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.visible)
  return visible_;
}
inline void Object::set_visible(bool value) {
  set_has_visible();
  visible_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.visible)
}

// optional bool persistent = 9;
inline bool Object::has_persistent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Object::set_has_persistent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Object::clear_has_persistent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Object::clear_persistent() {
  persistent_ = false;
  clear_has_persistent();
}
inline bool Object::persistent() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.persistent)
  return persistent_;
}
inline void Object::set_persistent(bool value) {
  set_has_persistent();
  persistent_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Object.persistent)
}

// repeated .buffers.resources.Object.MainEvent main_events = 10;
inline int Object::main_events_size() const {
  return main_events_.size();
}
inline void Object::clear_main_events() {
  main_events_.Clear();
}
inline const ::buffers::resources::Object_MainEvent& Object::main_events(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Object.main_events)
  return main_events_.Get(index);
}
inline ::buffers::resources::Object_MainEvent* Object::mutable_main_events(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Object.main_events)
  return main_events_.Mutable(index);
}
inline ::buffers::resources::Object_MainEvent* Object::add_main_events() {
  // @@protoc_insertion_point(field_add:buffers.resources.Object.main_events)
  return main_events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::buffers::resources::Object_MainEvent >*
Object::mutable_main_events() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Object.main_events)
  return &main_events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::buffers::resources::Object_MainEvent >&
Object::main_events() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Object.main_events)
  return main_events_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace resources
}  // namespace buffers

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_resources_2fObject_2eproto__INCLUDED
