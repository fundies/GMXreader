// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resources/Shader.proto

#ifndef PROTOBUF_resources_2fShader_2eproto__INCLUDED
#define PROTOBUF_resources_2fShader_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_resources_2fShader_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsShaderImpl();
void InitDefaultsShader();
inline void InitDefaults() {
  InitDefaultsShader();
}
}  // namespace protobuf_resources_2fShader_2eproto
namespace buffers {
namespace resources {
class Shader;
class ShaderDefaultTypeInternal;
extern ShaderDefaultTypeInternal _Shader_default_instance_;
}  // namespace resources
}  // namespace buffers
namespace buffers {
namespace resources {

enum Shader_Type {
  Shader_Type_GLSL = 0,
  Shader_Type_GLSLES = 1,
  Shader_Type_HLSL9 = 2,
  Shader_Type_HLSL11 = 3
};
bool Shader_Type_IsValid(int value);
const Shader_Type Shader_Type_Type_MIN = Shader_Type_GLSL;
const Shader_Type Shader_Type_Type_MAX = Shader_Type_HLSL11;
const int Shader_Type_Type_ARRAYSIZE = Shader_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Shader_Type_descriptor();
inline const ::std::string& Shader_Type_Name(Shader_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Shader_Type_descriptor(), value);
}
inline bool Shader_Type_Parse(
    const ::std::string& name, Shader_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Shader_Type>(
    Shader_Type_descriptor(), name, value);
}
// ===================================================================

class Shader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.Shader) */ {
 public:
  Shader();
  virtual ~Shader();

  Shader(const Shader& from);

  inline Shader& operator=(const Shader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Shader(Shader&& from) noexcept
    : Shader() {
    *this = ::std::move(from);
  }

  inline Shader& operator=(Shader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Shader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shader* internal_default_instance() {
    return reinterpret_cast<const Shader*>(
               &_Shader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Shader* other);
  friend void swap(Shader& a, Shader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Shader* New() const PROTOBUF_FINAL { return New(NULL); }

  Shader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Shader& from);
  void MergeFrom(const Shader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Shader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Shader_Type Type;
  static const Type GLSL =
    Shader_Type_GLSL;
  static const Type GLSLES =
    Shader_Type_GLSLES;
  static const Type HLSL9 =
    Shader_Type_HLSL9;
  static const Type HLSL11 =
    Shader_Type_HLSL11;
  static inline bool Type_IsValid(int value) {
    return Shader_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Shader_Type_Type_MIN;
  static const Type Type_MAX =
    Shader_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Shader_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Shader_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Shader_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Shader_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string vertex_code = 5;
  bool has_vertex_code() const;
  void clear_vertex_code();
  static const int kVertexCodeFieldNumber = 5;
  const ::std::string& vertex_code() const;
  void set_vertex_code(const ::std::string& value);
  #if LANG_CXX11
  void set_vertex_code(::std::string&& value);
  #endif
  void set_vertex_code(const char* value);
  void set_vertex_code(const char* value, size_t size);
  ::std::string* mutable_vertex_code();
  ::std::string* release_vertex_code();
  void set_allocated_vertex_code(::std::string* vertex_code);

  // optional string fragment_code = 6;
  bool has_fragment_code() const;
  void clear_fragment_code();
  static const int kFragmentCodeFieldNumber = 6;
  const ::std::string& fragment_code() const;
  void set_fragment_code(const ::std::string& value);
  #if LANG_CXX11
  void set_fragment_code(::std::string&& value);
  #endif
  void set_fragment_code(const char* value);
  void set_fragment_code(const char* value, size_t size);
  ::std::string* mutable_fragment_code();
  ::std::string* release_fragment_code();
  void set_allocated_fragment_code(::std::string* fragment_code);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .buffers.resources.Shader.Type type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::buffers::resources::Shader_Type type() const;
  void set_type(::buffers::resources::Shader_Type value);

  // optional bool precompile = 4;
  bool has_precompile() const;
  void clear_precompile();
  static const int kPrecompileFieldNumber = 4;
  bool precompile() const;
  void set_precompile(bool value);

  // @@protoc_insertion_point(class_scope:buffers.resources.Shader)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_precompile();
  void clear_has_precompile();
  void set_has_vertex_code();
  void clear_has_vertex_code();
  void set_has_fragment_code();
  void clear_has_fragment_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr vertex_code_;
  ::google::protobuf::internal::ArenaStringPtr fragment_code_;
  ::google::protobuf::int32 id_;
  int type_;
  bool precompile_;
  friend struct ::protobuf_resources_2fShader_2eproto::TableStruct;
  friend void ::protobuf_resources_2fShader_2eproto::InitDefaultsShaderImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Shader

// optional string name = 1;
inline bool Shader::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Shader::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Shader::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Shader::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Shader::name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Shader.name)
  return name_.GetNoArena();
}
inline void Shader::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Shader.name)
}
#if LANG_CXX11
inline void Shader::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Shader.name)
}
#endif
inline void Shader::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Shader.name)
}
inline void Shader::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Shader.name)
}
inline ::std::string* Shader::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Shader.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Shader::release_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Shader.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Shader::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Shader.name)
}

// optional int32 id = 2;
inline bool Shader::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Shader::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Shader::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Shader::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Shader::id() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Shader.id)
  return id_;
}
inline void Shader::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Shader.id)
}

// optional .buffers.resources.Shader.Type type = 3;
inline bool Shader::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Shader::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Shader::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Shader::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::buffers::resources::Shader_Type Shader::type() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Shader.type)
  return static_cast< ::buffers::resources::Shader_Type >(type_);
}
inline void Shader::set_type(::buffers::resources::Shader_Type value) {
  assert(::buffers::resources::Shader_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Shader.type)
}

// optional bool precompile = 4;
inline bool Shader::has_precompile() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Shader::set_has_precompile() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Shader::clear_has_precompile() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Shader::clear_precompile() {
  precompile_ = false;
  clear_has_precompile();
}
inline bool Shader::precompile() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Shader.precompile)
  return precompile_;
}
inline void Shader::set_precompile(bool value) {
  set_has_precompile();
  precompile_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Shader.precompile)
}

// optional string vertex_code = 5;
inline bool Shader::has_vertex_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Shader::set_has_vertex_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Shader::clear_has_vertex_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Shader::clear_vertex_code() {
  vertex_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vertex_code();
}
inline const ::std::string& Shader::vertex_code() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Shader.vertex_code)
  return vertex_code_.GetNoArena();
}
inline void Shader::set_vertex_code(const ::std::string& value) {
  set_has_vertex_code();
  vertex_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Shader.vertex_code)
}
#if LANG_CXX11
inline void Shader::set_vertex_code(::std::string&& value) {
  set_has_vertex_code();
  vertex_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Shader.vertex_code)
}
#endif
inline void Shader::set_vertex_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vertex_code();
  vertex_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Shader.vertex_code)
}
inline void Shader::set_vertex_code(const char* value, size_t size) {
  set_has_vertex_code();
  vertex_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Shader.vertex_code)
}
inline ::std::string* Shader::mutable_vertex_code() {
  set_has_vertex_code();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Shader.vertex_code)
  return vertex_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Shader::release_vertex_code() {
  // @@protoc_insertion_point(field_release:buffers.resources.Shader.vertex_code)
  clear_has_vertex_code();
  return vertex_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Shader::set_allocated_vertex_code(::std::string* vertex_code) {
  if (vertex_code != NULL) {
    set_has_vertex_code();
  } else {
    clear_has_vertex_code();
  }
  vertex_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vertex_code);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Shader.vertex_code)
}

// optional string fragment_code = 6;
inline bool Shader::has_fragment_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Shader::set_has_fragment_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Shader::clear_has_fragment_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Shader::clear_fragment_code() {
  fragment_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fragment_code();
}
inline const ::std::string& Shader::fragment_code() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Shader.fragment_code)
  return fragment_code_.GetNoArena();
}
inline void Shader::set_fragment_code(const ::std::string& value) {
  set_has_fragment_code();
  fragment_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Shader.fragment_code)
}
#if LANG_CXX11
inline void Shader::set_fragment_code(::std::string&& value) {
  set_has_fragment_code();
  fragment_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Shader.fragment_code)
}
#endif
inline void Shader::set_fragment_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fragment_code();
  fragment_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Shader.fragment_code)
}
inline void Shader::set_fragment_code(const char* value, size_t size) {
  set_has_fragment_code();
  fragment_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Shader.fragment_code)
}
inline ::std::string* Shader::mutable_fragment_code() {
  set_has_fragment_code();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Shader.fragment_code)
  return fragment_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Shader::release_fragment_code() {
  // @@protoc_insertion_point(field_release:buffers.resources.Shader.fragment_code)
  clear_has_fragment_code();
  return fragment_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Shader::set_allocated_fragment_code(::std::string* fragment_code) {
  if (fragment_code != NULL) {
    set_has_fragment_code();
  } else {
    clear_has_fragment_code();
  }
  fragment_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fragment_code);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Shader.fragment_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace resources
}  // namespace buffers

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::buffers::resources::Shader_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::buffers::resources::Shader_Type>() {
  return ::buffers::resources::Shader_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_resources_2fShader_2eproto__INCLUDED
