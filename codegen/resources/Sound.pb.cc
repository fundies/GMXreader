// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resources/Sound.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "resources/Sound.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace buffers {
namespace resources {
class SoundDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Sound>
     _instance;
} _Sound_default_instance_;

namespace protobuf_resources_2fSound_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sound, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sound, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sound, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sound, preload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sound, pan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sound, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sound, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sound, file_extension_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sound, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sound, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sound, data_),
  0,
  4,
  5,
  6,
  7,
  1,
  2,
  8,
  9,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(Sound)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sound_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "resources/Sound.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::buffers::protobuf_options_2eproto::InitDefaults();
  _Sound_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Sound_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025resources/Sound.proto\022\021buffers.resourc"
      "es\032\roptions.proto\"\250\003\n\005Sound\022\014\n\004name\030\001 \001("
      "\t\022\n\n\002id\030\002 \001(\005\022\017\n\007preload\030\003 \001(\010\022\013\n\003pan\030\004 "
      "\001(\001\022!\n\006volume\030\005 \001(\001B\021\202\265\030\rvolume/volume\022\037"
      "\n\tfile_name\030\006 \001(\tB\014\202\265\030\010origname\022%\n\016file_"
      "extension\030\007 \001(\tB\r\202\265\030\textension\022+\n\004kind\030\010"
      " \001(\0162\035.buffers.resources.Sound.Kind\022;\n\004t"
      "ype\030\t \001(\0162\035.buffers.resources.Sound.Type"
      "B\016\202\265\030\ntypes/type\022\014\n\004data\030\n \001(\t\"V\n\004Kind\022\n"
      "\n\006NORMAL\020\000\022\024\n\020BACKGROUND_MUSIC\020\001\022\025\n\021THRE"
      "E_DIMENSIONAL\020\002\022\025\n\021MULTIMEDIA_PLAYER\020\003\","
      "\n\004Type\022\010\n\004MONO\020\000\022\n\n\006STEREO\020\001\022\016\n\nPOSITION"
      "AL\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 484);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "resources/Sound.proto", &protobuf_RegisterTypes);
  ::buffers::protobuf_options_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_resources_2fSound_2eproto

const ::google::protobuf::EnumDescriptor* Sound_Kind_descriptor() {
  protobuf_resources_2fSound_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fSound_2eproto::file_level_enum_descriptors[0];
}
bool Sound_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sound_Kind Sound::NORMAL;
const Sound_Kind Sound::BACKGROUND_MUSIC;
const Sound_Kind Sound::THREE_DIMENSIONAL;
const Sound_Kind Sound::MULTIMEDIA_PLAYER;
const Sound_Kind Sound::Kind_MIN;
const Sound_Kind Sound::Kind_MAX;
const int Sound::Kind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sound_Type_descriptor() {
  protobuf_resources_2fSound_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fSound_2eproto::file_level_enum_descriptors[1];
}
bool Sound_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sound_Type Sound::MONO;
const Sound_Type Sound::STEREO;
const Sound_Type Sound::POSITIONAL;
const Sound_Type Sound::Type_MIN;
const Sound_Type Sound::Type_MAX;
const int Sound::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sound::kNameFieldNumber;
const int Sound::kIdFieldNumber;
const int Sound::kPreloadFieldNumber;
const int Sound::kPanFieldNumber;
const int Sound::kVolumeFieldNumber;
const int Sound::kFileNameFieldNumber;
const int Sound::kFileExtensionFieldNumber;
const int Sound::kKindFieldNumber;
const int Sound::kTypeFieldNumber;
const int Sound::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sound::Sound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_resources_2fSound_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:buffers.resources.Sound)
}
Sound::Sound(const Sound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  file_extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_extension()) {
    file_extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_extension_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:buffers.resources.Sound)
}

void Sound::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_extension_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

Sound::~Sound() {
  // @@protoc_insertion_point(destructor:buffers.resources.Sound)
  SharedDtor();
}

void Sound::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_extension_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Sound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sound::descriptor() {
  protobuf_resources_2fSound_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fSound_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sound& Sound::default_instance() {
  protobuf_resources_2fSound_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sound* Sound::New(::google::protobuf::Arena* arena) const {
  Sound* n = new Sound;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sound::Clear() {
// @@protoc_insertion_point(message_clear_start:buffers.resources.Sound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!file_extension_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_extension_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&volume_) -
        reinterpret_cast<char*>(&id_)) + sizeof(volume_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&kind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&kind_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:buffers.resources.Sound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Sound.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool preload = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_preload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &preload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pan = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_pan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double volume = 5 [(.buffers.gmx) = "volume/volume"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 6 [(.buffers.gmx) = "origname"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Sound.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_extension = 7 [(.buffers.gmx) = "extension"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_extension()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_extension().data(), static_cast<int>(this->file_extension().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Sound.file_extension");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Sound.Kind kind = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::buffers::resources::Sound_Kind_IsValid(value)) {
            set_kind(static_cast< ::buffers::resources::Sound_Kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .buffers.resources.Sound.Type type = 9 [(.buffers.gmx) = "types/type"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::buffers::resources::Sound_Type_IsValid(value)) {
            set_type(static_cast< ::buffers::resources::Sound_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffers.resources.Sound.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:buffers.resources.Sound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:buffers.resources.Sound)
  return false;
#undef DO_
}

void Sound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:buffers.resources.Sound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sound.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional bool preload = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->preload(), output);
  }

  // optional double pan = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pan(), output);
  }

  // optional double volume = 5 [(.buffers.gmx) = "volume/volume"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->volume(), output);
  }

  // optional string file_name = 6 [(.buffers.gmx) = "origname"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sound.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->file_name(), output);
  }

  // optional string file_extension = 7 [(.buffers.gmx) = "extension"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_extension().data(), static_cast<int>(this->file_extension().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sound.file_extension");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->file_extension(), output);
  }

  // optional .buffers.resources.Sound.Kind kind = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->kind(), output);
  }

  // optional .buffers.resources.Sound.Type type = 9 [(.buffers.gmx) = "types/type"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional string data = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sound.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:buffers.resources.Sound)
}

::google::protobuf::uint8* Sound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:buffers.resources.Sound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sound.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional bool preload = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->preload(), target);
  }

  // optional double pan = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pan(), target);
  }

  // optional double volume = 5 [(.buffers.gmx) = "volume/volume"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->volume(), target);
  }

  // optional string file_name = 6 [(.buffers.gmx) = "origname"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sound.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->file_name(), target);
  }

  // optional string file_extension = 7 [(.buffers.gmx) = "extension"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_extension().data(), static_cast<int>(this->file_extension().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sound.file_extension");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->file_extension(), target);
  }

  // optional .buffers.resources.Sound.Kind kind = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->kind(), target);
  }

  // optional .buffers.resources.Sound.Type type = 9 [(.buffers.gmx) = "types/type"];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional string data = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffers.resources.Sound.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:buffers.resources.Sound)
  return target;
}

size_t Sound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:buffers.resources.Sound)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string file_name = 6 [(.buffers.gmx) = "origname"];
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string file_extension = 7 [(.buffers.gmx) = "extension"];
    if (has_file_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_extension());
    }

    // optional string data = 10;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool preload = 3;
    if (has_preload()) {
      total_size += 1 + 1;
    }

    // optional double pan = 4;
    if (has_pan()) {
      total_size += 1 + 8;
    }

    // optional double volume = 5 [(.buffers.gmx) = "volume/volume"];
    if (has_volume()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .buffers.resources.Sound.Kind kind = 8;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }

    // optional .buffers.resources.Sound.Type type = 9 [(.buffers.gmx) = "types/type"];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:buffers.resources.Sound)
  GOOGLE_DCHECK_NE(&from, this);
  const Sound* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:buffers.resources.Sound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:buffers.resources.Sound)
    MergeFrom(*source);
  }
}

void Sound::MergeFrom(const Sound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:buffers.resources.Sound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_file_extension();
      file_extension_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_extension_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      preload_ = from.preload_;
    }
    if (cached_has_bits & 0x00000040u) {
      pan_ = from.pan_;
    }
    if (cached_has_bits & 0x00000080u) {
      volume_ = from.volume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      kind_ = from.kind_;
    }
    if (cached_has_bits & 0x00000200u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:buffers.resources.Sound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sound::CopyFrom(const Sound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:buffers.resources.Sound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sound::IsInitialized() const {
  return true;
}

void Sound::Swap(Sound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sound::InternalSwap(Sound* other) {
  using std::swap;
  name_.Swap(&other->name_);
  file_name_.Swap(&other->file_name_);
  file_extension_.Swap(&other->file_extension_);
  data_.Swap(&other->data_);
  swap(id_, other->id_);
  swap(preload_, other->preload_);
  swap(pan_, other->pan_);
  swap(volume_, other->volume_);
  swap(kind_, other->kind_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sound::GetMetadata() const {
  protobuf_resources_2fSound_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_resources_2fSound_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sound

// optional string name = 1;
bool Sound::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Sound::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Sound::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Sound::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Sound::name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sound.name)
  return name_.GetNoArena();
}
void Sound::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Sound.name)
}
#if LANG_CXX11
void Sound::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Sound.name)
}
#endif
void Sound::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Sound.name)
}
void Sound::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Sound.name)
}
::std::string* Sound::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Sound.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sound::release_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Sound.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sound::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Sound.name)
}

// optional int32 id = 2;
bool Sound::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Sound::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Sound::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Sound::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 Sound::id() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sound.id)
  return id_;
}
void Sound::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sound.id)
}

// optional bool preload = 3;
bool Sound::has_preload() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Sound::set_has_preload() {
  _has_bits_[0] |= 0x00000020u;
}
void Sound::clear_has_preload() {
  _has_bits_[0] &= ~0x00000020u;
}
void Sound::clear_preload() {
  preload_ = false;
  clear_has_preload();
}
bool Sound::preload() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sound.preload)
  return preload_;
}
void Sound::set_preload(bool value) {
  set_has_preload();
  preload_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sound.preload)
}

// optional double pan = 4;
bool Sound::has_pan() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Sound::set_has_pan() {
  _has_bits_[0] |= 0x00000040u;
}
void Sound::clear_has_pan() {
  _has_bits_[0] &= ~0x00000040u;
}
void Sound::clear_pan() {
  pan_ = 0;
  clear_has_pan();
}
double Sound::pan() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sound.pan)
  return pan_;
}
void Sound::set_pan(double value) {
  set_has_pan();
  pan_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sound.pan)
}

// optional double volume = 5 [(.buffers.gmx) = "volume/volume"];
bool Sound::has_volume() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Sound::set_has_volume() {
  _has_bits_[0] |= 0x00000080u;
}
void Sound::clear_has_volume() {
  _has_bits_[0] &= ~0x00000080u;
}
void Sound::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
double Sound::volume() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sound.volume)
  return volume_;
}
void Sound::set_volume(double value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sound.volume)
}

// optional string file_name = 6 [(.buffers.gmx) = "origname"];
bool Sound::has_file_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Sound::set_has_file_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Sound::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Sound::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}
const ::std::string& Sound::file_name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sound.file_name)
  return file_name_.GetNoArena();
}
void Sound::set_file_name(const ::std::string& value) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Sound.file_name)
}
#if LANG_CXX11
void Sound::set_file_name(::std::string&& value) {
  set_has_file_name();
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Sound.file_name)
}
#endif
void Sound::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Sound.file_name)
}
void Sound::set_file_name(const char* value, size_t size) {
  set_has_file_name();
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Sound.file_name)
}
::std::string* Sound::mutable_file_name() {
  set_has_file_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Sound.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sound::release_file_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Sound.file_name)
  clear_has_file_name();
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sound::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    set_has_file_name();
  } else {
    clear_has_file_name();
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Sound.file_name)
}

// optional string file_extension = 7 [(.buffers.gmx) = "extension"];
bool Sound::has_file_extension() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Sound::set_has_file_extension() {
  _has_bits_[0] |= 0x00000004u;
}
void Sound::clear_has_file_extension() {
  _has_bits_[0] &= ~0x00000004u;
}
void Sound::clear_file_extension() {
  file_extension_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_extension();
}
const ::std::string& Sound::file_extension() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sound.file_extension)
  return file_extension_.GetNoArena();
}
void Sound::set_file_extension(const ::std::string& value) {
  set_has_file_extension();
  file_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Sound.file_extension)
}
#if LANG_CXX11
void Sound::set_file_extension(::std::string&& value) {
  set_has_file_extension();
  file_extension_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Sound.file_extension)
}
#endif
void Sound::set_file_extension(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_extension();
  file_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Sound.file_extension)
}
void Sound::set_file_extension(const char* value, size_t size) {
  set_has_file_extension();
  file_extension_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Sound.file_extension)
}
::std::string* Sound::mutable_file_extension() {
  set_has_file_extension();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Sound.file_extension)
  return file_extension_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sound::release_file_extension() {
  // @@protoc_insertion_point(field_release:buffers.resources.Sound.file_extension)
  clear_has_file_extension();
  return file_extension_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sound::set_allocated_file_extension(::std::string* file_extension) {
  if (file_extension != NULL) {
    set_has_file_extension();
  } else {
    clear_has_file_extension();
  }
  file_extension_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_extension);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Sound.file_extension)
}

// optional .buffers.resources.Sound.Kind kind = 8;
bool Sound::has_kind() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Sound::set_has_kind() {
  _has_bits_[0] |= 0x00000100u;
}
void Sound::clear_has_kind() {
  _has_bits_[0] &= ~0x00000100u;
}
void Sound::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
::buffers::resources::Sound_Kind Sound::kind() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sound.kind)
  return static_cast< ::buffers::resources::Sound_Kind >(kind_);
}
void Sound::set_kind(::buffers::resources::Sound_Kind value) {
  assert(::buffers::resources::Sound_Kind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sound.kind)
}

// optional .buffers.resources.Sound.Type type = 9 [(.buffers.gmx) = "types/type"];
bool Sound::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Sound::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
void Sound::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
void Sound::clear_type() {
  type_ = 0;
  clear_has_type();
}
::buffers::resources::Sound_Type Sound::type() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sound.type)
  return static_cast< ::buffers::resources::Sound_Type >(type_);
}
void Sound::set_type(::buffers::resources::Sound_Type value) {
  assert(::buffers::resources::Sound_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sound.type)
}

// optional string data = 10;
bool Sound::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Sound::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
void Sound::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void Sound::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Sound::data() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sound.data)
  return data_.GetNoArena();
}
void Sound::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Sound.data)
}
#if LANG_CXX11
void Sound::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Sound.data)
}
#endif
void Sound::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Sound.data)
}
void Sound::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Sound.data)
}
::std::string* Sound::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Sound.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Sound::release_data() {
  // @@protoc_insertion_point(field_release:buffers.resources.Sound.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Sound::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Sound.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace resources
}  // namespace buffers

// @@protoc_insertion_point(global_scope)
