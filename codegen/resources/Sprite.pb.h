// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resources/Sprite.proto

#ifndef PROTOBUF_resources_2fSprite_2eproto__INCLUDED
#define PROTOBUF_resources_2fSprite_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "options.pb.h"
// @@protoc_insertion_point(includes)
namespace buffers {
namespace resources {
class Sprite;
class SpriteDefaultTypeInternal;
extern SpriteDefaultTypeInternal _Sprite_default_instance_;
}  // namespace resources
}  // namespace buffers

namespace buffers {
namespace resources {

namespace protobuf_resources_2fSprite_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_resources_2fSprite_2eproto

enum Sprite_Shape {
  Sprite_Shape_PRECISE = 0,
  Sprite_Shape_RECTANGLE = 1,
  Sprite_Shape_DISK = 2,
  Sprite_Shape_DIAMOND = 3
};
bool Sprite_Shape_IsValid(int value);
const Sprite_Shape Sprite_Shape_Shape_MIN = Sprite_Shape_PRECISE;
const Sprite_Shape Sprite_Shape_Shape_MAX = Sprite_Shape_DIAMOND;
const int Sprite_Shape_Shape_ARRAYSIZE = Sprite_Shape_Shape_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sprite_Shape_descriptor();
inline const ::std::string& Sprite_Shape_Name(Sprite_Shape value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sprite_Shape_descriptor(), value);
}
inline bool Sprite_Shape_Parse(
    const ::std::string& name, Sprite_Shape* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sprite_Shape>(
    Sprite_Shape_descriptor(), name, value);
}
enum Sprite_BoundingBox {
  Sprite_BoundingBox_AUTOMATIC = 0,
  Sprite_BoundingBox_FULL_IMAGE = 1,
  Sprite_BoundingBox_MANUAL = 2
};
bool Sprite_BoundingBox_IsValid(int value);
const Sprite_BoundingBox Sprite_BoundingBox_BoundingBox_MIN = Sprite_BoundingBox_AUTOMATIC;
const Sprite_BoundingBox Sprite_BoundingBox_BoundingBox_MAX = Sprite_BoundingBox_MANUAL;
const int Sprite_BoundingBox_BoundingBox_ARRAYSIZE = Sprite_BoundingBox_BoundingBox_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sprite_BoundingBox_descriptor();
inline const ::std::string& Sprite_BoundingBox_Name(Sprite_BoundingBox value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sprite_BoundingBox_descriptor(), value);
}
inline bool Sprite_BoundingBox_Parse(
    const ::std::string& name, Sprite_BoundingBox* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sprite_BoundingBox>(
    Sprite_BoundingBox_descriptor(), name, value);
}
// ===================================================================

class Sprite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:buffers.resources.Sprite) */ {
 public:
  Sprite();
  virtual ~Sprite();

  Sprite(const Sprite& from);

  inline Sprite& operator=(const Sprite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Sprite(Sprite&& from) noexcept
    : Sprite() {
    *this = ::std::move(from);
  }

  inline Sprite& operator=(Sprite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sprite& default_instance();

  static inline const Sprite* internal_default_instance() {
    return reinterpret_cast<const Sprite*>(
               &_Sprite_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Sprite* other);
  friend void swap(Sprite& a, Sprite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sprite* New() const PROTOBUF_FINAL { return New(NULL); }

  Sprite* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Sprite& from);
  void MergeFrom(const Sprite& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Sprite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Sprite_Shape Shape;
  static const Shape PRECISE =
    Sprite_Shape_PRECISE;
  static const Shape RECTANGLE =
    Sprite_Shape_RECTANGLE;
  static const Shape DISK =
    Sprite_Shape_DISK;
  static const Shape DIAMOND =
    Sprite_Shape_DIAMOND;
  static inline bool Shape_IsValid(int value) {
    return Sprite_Shape_IsValid(value);
  }
  static const Shape Shape_MIN =
    Sprite_Shape_Shape_MIN;
  static const Shape Shape_MAX =
    Sprite_Shape_Shape_MAX;
  static const int Shape_ARRAYSIZE =
    Sprite_Shape_Shape_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Shape_descriptor() {
    return Sprite_Shape_descriptor();
  }
  static inline const ::std::string& Shape_Name(Shape value) {
    return Sprite_Shape_Name(value);
  }
  static inline bool Shape_Parse(const ::std::string& name,
      Shape* value) {
    return Sprite_Shape_Parse(name, value);
  }

  typedef Sprite_BoundingBox BoundingBox;
  static const BoundingBox AUTOMATIC =
    Sprite_BoundingBox_AUTOMATIC;
  static const BoundingBox FULL_IMAGE =
    Sprite_BoundingBox_FULL_IMAGE;
  static const BoundingBox MANUAL =
    Sprite_BoundingBox_MANUAL;
  static inline bool BoundingBox_IsValid(int value) {
    return Sprite_BoundingBox_IsValid(value);
  }
  static const BoundingBox BoundingBox_MIN =
    Sprite_BoundingBox_BoundingBox_MIN;
  static const BoundingBox BoundingBox_MAX =
    Sprite_BoundingBox_BoundingBox_MAX;
  static const int BoundingBox_ARRAYSIZE =
    Sprite_BoundingBox_BoundingBox_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BoundingBox_descriptor() {
    return Sprite_BoundingBox_descriptor();
  }
  static inline const ::std::string& BoundingBox_Name(BoundingBox value) {
    return Sprite_BoundingBox_Name(value);
  }
  static inline bool BoundingBox_Parse(const ::std::string& name,
      BoundingBox* value) {
    return Sprite_BoundingBox_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string subimages = 3 [(.buffers.gmx) = "frames/frame"];
  int subimages_size() const;
  void clear_subimages();
  static const int kSubimagesFieldNumber = 3;
  const ::std::string& subimages(int index) const;
  ::std::string* mutable_subimages(int index);
  void set_subimages(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_subimages(int index, ::std::string&& value);
  #endif
  void set_subimages(int index, const char* value);
  void set_subimages(int index, const char* value, size_t size);
  ::std::string* add_subimages();
  void add_subimages(const ::std::string& value);
  #if LANG_CXX11
  void add_subimages(::std::string&& value);
  #endif
  void add_subimages(const char* value);
  void add_subimages(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& subimages() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_subimages();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional bool preload = 4 [(.buffers.gmx) = "GMX_DEPRECATED"];
  bool has_preload() const;
  void clear_preload();
  static const int kPreloadFieldNumber = 4;
  bool preload() const;
  void set_preload(bool value);

  // optional bool transparent = 5 [(.buffers.gmx) = "GMX_DEPRECATED"];
  bool has_transparent() const;
  void clear_transparent();
  static const int kTransparentFieldNumber = 5;
  bool transparent() const;
  void set_transparent(bool value);

  // optional bool smooth_edges = 6 [(.buffers.gmx) = "GMX_DEPRECATED"];
  bool has_smooth_edges() const;
  void clear_smooth_edges();
  static const int kSmoothEdgesFieldNumber = 6;
  bool smooth_edges() const;
  void set_smooth_edges(bool value);

  // optional bool separate_mask = 8 [(.buffers.gmx) = "sepmasks"];
  bool has_separate_mask() const;
  void clear_separate_mask();
  static const int kSeparateMaskFieldNumber = 8;
  bool separate_mask() const;
  void set_separate_mask(bool value);

  // optional int32 alpha_tolerance = 7 [(.buffers.gmx) = "coltolerance"];
  bool has_alpha_tolerance() const;
  void clear_alpha_tolerance();
  static const int kAlphaToleranceFieldNumber = 7;
  ::google::protobuf::int32 alpha_tolerance() const;
  void set_alpha_tolerance(::google::protobuf::int32 value);

  // optional int32 origin_x = 9 [(.buffers.gmx) = "xorig"];
  bool has_origin_x() const;
  void clear_origin_x();
  static const int kOriginXFieldNumber = 9;
  ::google::protobuf::int32 origin_x() const;
  void set_origin_x(::google::protobuf::int32 value);

  // optional int32 origin_y = 10 [(.buffers.gmx) = "yorigin"];
  bool has_origin_y() const;
  void clear_origin_y();
  static const int kOriginYFieldNumber = 10;
  ::google::protobuf::int32 origin_y() const;
  void set_origin_y(::google::protobuf::int32 value);

  // optional .buffers.resources.Sprite.Shape shape = 11 [(.buffers.gmx) = "colkind"];
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 11;
  ::buffers::resources::Sprite_Shape shape() const;
  void set_shape(::buffers::resources::Sprite_Shape value);

  // optional .buffers.resources.Sprite.BoundingBox bbox_mode = 12 [(.buffers.gmx) = "bboxmode"];
  bool has_bbox_mode() const;
  void clear_bbox_mode();
  static const int kBboxModeFieldNumber = 12;
  ::buffers::resources::Sprite_BoundingBox bbox_mode() const;
  void set_bbox_mode(::buffers::resources::Sprite_BoundingBox value);

  // optional int32 bbox_left = 13;
  bool has_bbox_left() const;
  void clear_bbox_left();
  static const int kBboxLeftFieldNumber = 13;
  ::google::protobuf::int32 bbox_left() const;
  void set_bbox_left(::google::protobuf::int32 value);

  // optional int32 bbox_right = 14;
  bool has_bbox_right() const;
  void clear_bbox_right();
  static const int kBboxRightFieldNumber = 14;
  ::google::protobuf::int32 bbox_right() const;
  void set_bbox_right(::google::protobuf::int32 value);

  // optional int32 bbox_top = 15;
  bool has_bbox_top() const;
  void clear_bbox_top();
  static const int kBboxTopFieldNumber = 15;
  ::google::protobuf::int32 bbox_top() const;
  void set_bbox_top(::google::protobuf::int32 value);

  // optional int32 bbox_bottom = 16;
  bool has_bbox_bottom() const;
  void clear_bbox_bottom();
  static const int kBboxBottomFieldNumber = 16;
  ::google::protobuf::int32 bbox_bottom() const;
  void set_bbox_bottom(::google::protobuf::int32 value);

  // optional int32 type = 17;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 17;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 h_tile = 18 [(.buffers.gmx) = "HTile"];
  bool has_h_tile() const;
  void clear_h_tile();
  static const int kHTileFieldNumber = 18;
  ::google::protobuf::int32 h_tile() const;
  void set_h_tile(::google::protobuf::int32 value);

  // optional int32 v_tile = 19 [(.buffers.gmx) = "VTile"];
  bool has_v_tile() const;
  void clear_v_tile();
  static const int kVTileFieldNumber = 19;
  ::google::protobuf::int32 v_tile() const;
  void set_v_tile(::google::protobuf::int32 value);

  // optional int32 texture_group = 20 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];
  bool has_texture_group() const;
  void clear_texture_group();
  static const int kTextureGroupFieldNumber = 20;
  ::google::protobuf::int32 texture_group() const;
  void set_texture_group(::google::protobuf::int32 value);

  // optional bool for3D = 21 [(.buffers.gmx) = "For3D"];
  bool has_for3d() const;
  void clear_for3d();
  static const int kFor3DFieldNumber = 21;
  bool for3d() const;
  void set_for3d(bool value);

  // optional uint32 width = 22;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 22;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 23;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 23;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:buffers.resources.Sprite)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_id();
  void clear_has_id();
  void set_has_preload();
  void clear_has_preload();
  void set_has_transparent();
  void clear_has_transparent();
  void set_has_smooth_edges();
  void clear_has_smooth_edges();
  void set_has_alpha_tolerance();
  void clear_has_alpha_tolerance();
  void set_has_separate_mask();
  void clear_has_separate_mask();
  void set_has_origin_x();
  void clear_has_origin_x();
  void set_has_origin_y();
  void clear_has_origin_y();
  void set_has_shape();
  void clear_has_shape();
  void set_has_bbox_mode();
  void clear_has_bbox_mode();
  void set_has_bbox_left();
  void clear_has_bbox_left();
  void set_has_bbox_right();
  void clear_has_bbox_right();
  void set_has_bbox_top();
  void clear_has_bbox_top();
  void set_has_bbox_bottom();
  void clear_has_bbox_bottom();
  void set_has_type();
  void clear_has_type();
  void set_has_h_tile();
  void clear_has_h_tile();
  void set_has_v_tile();
  void clear_has_v_tile();
  void set_has_texture_group();
  void clear_has_texture_group();
  void set_has_for3d();
  void clear_has_for3d();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> subimages_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  bool preload_;
  bool transparent_;
  bool smooth_edges_;
  bool separate_mask_;
  ::google::protobuf::int32 alpha_tolerance_;
  ::google::protobuf::int32 origin_x_;
  ::google::protobuf::int32 origin_y_;
  int shape_;
  int bbox_mode_;
  ::google::protobuf::int32 bbox_left_;
  ::google::protobuf::int32 bbox_right_;
  ::google::protobuf::int32 bbox_top_;
  ::google::protobuf::int32 bbox_bottom_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 h_tile_;
  ::google::protobuf::int32 v_tile_;
  ::google::protobuf::int32 texture_group_;
  bool for3d_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  friend struct protobuf_resources_2fSprite_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sprite

// optional string name = 1;
inline bool Sprite::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sprite::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sprite::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sprite::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Sprite::name() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.name)
  return name_.GetNoArena();
}
inline void Sprite::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.name)
}
#if LANG_CXX11
inline void Sprite::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:buffers.resources.Sprite.name)
}
#endif
inline void Sprite::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:buffers.resources.Sprite.name)
}
inline void Sprite::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Sprite.name)
}
inline ::std::string* Sprite::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:buffers.resources.Sprite.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sprite::release_name() {
  // @@protoc_insertion_point(field_release:buffers.resources.Sprite.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sprite::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:buffers.resources.Sprite.name)
}

// optional int32 id = 2 [(.buffers.gmx) = "GMX_DEPRECATED"];
inline bool Sprite::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sprite::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sprite::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sprite::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Sprite::id() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.id)
  return id_;
}
inline void Sprite::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.id)
}

// optional bool preload = 4 [(.buffers.gmx) = "GMX_DEPRECATED"];
inline bool Sprite::has_preload() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sprite::set_has_preload() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sprite::clear_has_preload() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sprite::clear_preload() {
  preload_ = false;
  clear_has_preload();
}
inline bool Sprite::preload() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.preload)
  return preload_;
}
inline void Sprite::set_preload(bool value) {
  set_has_preload();
  preload_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.preload)
}

// optional bool transparent = 5 [(.buffers.gmx) = "GMX_DEPRECATED"];
inline bool Sprite::has_transparent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sprite::set_has_transparent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Sprite::clear_has_transparent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Sprite::clear_transparent() {
  transparent_ = false;
  clear_has_transparent();
}
inline bool Sprite::transparent() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.transparent)
  return transparent_;
}
inline void Sprite::set_transparent(bool value) {
  set_has_transparent();
  transparent_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.transparent)
}

// optional bool smooth_edges = 6 [(.buffers.gmx) = "GMX_DEPRECATED"];
inline bool Sprite::has_smooth_edges() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Sprite::set_has_smooth_edges() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Sprite::clear_has_smooth_edges() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Sprite::clear_smooth_edges() {
  smooth_edges_ = false;
  clear_has_smooth_edges();
}
inline bool Sprite::smooth_edges() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.smooth_edges)
  return smooth_edges_;
}
inline void Sprite::set_smooth_edges(bool value) {
  set_has_smooth_edges();
  smooth_edges_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.smooth_edges)
}

// optional int32 alpha_tolerance = 7 [(.buffers.gmx) = "coltolerance"];
inline bool Sprite::has_alpha_tolerance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Sprite::set_has_alpha_tolerance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Sprite::clear_has_alpha_tolerance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Sprite::clear_alpha_tolerance() {
  alpha_tolerance_ = 0;
  clear_has_alpha_tolerance();
}
inline ::google::protobuf::int32 Sprite::alpha_tolerance() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.alpha_tolerance)
  return alpha_tolerance_;
}
inline void Sprite::set_alpha_tolerance(::google::protobuf::int32 value) {
  set_has_alpha_tolerance();
  alpha_tolerance_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.alpha_tolerance)
}

// optional bool separate_mask = 8 [(.buffers.gmx) = "sepmasks"];
inline bool Sprite::has_separate_mask() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Sprite::set_has_separate_mask() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Sprite::clear_has_separate_mask() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Sprite::clear_separate_mask() {
  separate_mask_ = false;
  clear_has_separate_mask();
}
inline bool Sprite::separate_mask() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.separate_mask)
  return separate_mask_;
}
inline void Sprite::set_separate_mask(bool value) {
  set_has_separate_mask();
  separate_mask_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.separate_mask)
}

// optional int32 origin_x = 9 [(.buffers.gmx) = "xorig"];
inline bool Sprite::has_origin_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Sprite::set_has_origin_x() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Sprite::clear_has_origin_x() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Sprite::clear_origin_x() {
  origin_x_ = 0;
  clear_has_origin_x();
}
inline ::google::protobuf::int32 Sprite::origin_x() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.origin_x)
  return origin_x_;
}
inline void Sprite::set_origin_x(::google::protobuf::int32 value) {
  set_has_origin_x();
  origin_x_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.origin_x)
}

// optional int32 origin_y = 10 [(.buffers.gmx) = "yorigin"];
inline bool Sprite::has_origin_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Sprite::set_has_origin_y() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Sprite::clear_has_origin_y() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Sprite::clear_origin_y() {
  origin_y_ = 0;
  clear_has_origin_y();
}
inline ::google::protobuf::int32 Sprite::origin_y() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.origin_y)
  return origin_y_;
}
inline void Sprite::set_origin_y(::google::protobuf::int32 value) {
  set_has_origin_y();
  origin_y_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.origin_y)
}

// optional .buffers.resources.Sprite.Shape shape = 11 [(.buffers.gmx) = "colkind"];
inline bool Sprite::has_shape() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Sprite::set_has_shape() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Sprite::clear_has_shape() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Sprite::clear_shape() {
  shape_ = 0;
  clear_has_shape();
}
inline ::buffers::resources::Sprite_Shape Sprite::shape() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.shape)
  return static_cast< ::buffers::resources::Sprite_Shape >(shape_);
}
inline void Sprite::set_shape(::buffers::resources::Sprite_Shape value) {
  assert(::buffers::resources::Sprite_Shape_IsValid(value));
  set_has_shape();
  shape_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.shape)
}

// optional .buffers.resources.Sprite.BoundingBox bbox_mode = 12 [(.buffers.gmx) = "bboxmode"];
inline bool Sprite::has_bbox_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Sprite::set_has_bbox_mode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Sprite::clear_has_bbox_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Sprite::clear_bbox_mode() {
  bbox_mode_ = 0;
  clear_has_bbox_mode();
}
inline ::buffers::resources::Sprite_BoundingBox Sprite::bbox_mode() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.bbox_mode)
  return static_cast< ::buffers::resources::Sprite_BoundingBox >(bbox_mode_);
}
inline void Sprite::set_bbox_mode(::buffers::resources::Sprite_BoundingBox value) {
  assert(::buffers::resources::Sprite_BoundingBox_IsValid(value));
  set_has_bbox_mode();
  bbox_mode_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.bbox_mode)
}

// optional int32 bbox_left = 13;
inline bool Sprite::has_bbox_left() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Sprite::set_has_bbox_left() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Sprite::clear_has_bbox_left() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Sprite::clear_bbox_left() {
  bbox_left_ = 0;
  clear_has_bbox_left();
}
inline ::google::protobuf::int32 Sprite::bbox_left() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.bbox_left)
  return bbox_left_;
}
inline void Sprite::set_bbox_left(::google::protobuf::int32 value) {
  set_has_bbox_left();
  bbox_left_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.bbox_left)
}

// optional int32 bbox_right = 14;
inline bool Sprite::has_bbox_right() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Sprite::set_has_bbox_right() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Sprite::clear_has_bbox_right() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Sprite::clear_bbox_right() {
  bbox_right_ = 0;
  clear_has_bbox_right();
}
inline ::google::protobuf::int32 Sprite::bbox_right() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.bbox_right)
  return bbox_right_;
}
inline void Sprite::set_bbox_right(::google::protobuf::int32 value) {
  set_has_bbox_right();
  bbox_right_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.bbox_right)
}

// optional int32 bbox_top = 15;
inline bool Sprite::has_bbox_top() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Sprite::set_has_bbox_top() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Sprite::clear_has_bbox_top() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Sprite::clear_bbox_top() {
  bbox_top_ = 0;
  clear_has_bbox_top();
}
inline ::google::protobuf::int32 Sprite::bbox_top() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.bbox_top)
  return bbox_top_;
}
inline void Sprite::set_bbox_top(::google::protobuf::int32 value) {
  set_has_bbox_top();
  bbox_top_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.bbox_top)
}

// optional int32 bbox_bottom = 16;
inline bool Sprite::has_bbox_bottom() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Sprite::set_has_bbox_bottom() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Sprite::clear_has_bbox_bottom() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Sprite::clear_bbox_bottom() {
  bbox_bottom_ = 0;
  clear_has_bbox_bottom();
}
inline ::google::protobuf::int32 Sprite::bbox_bottom() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.bbox_bottom)
  return bbox_bottom_;
}
inline void Sprite::set_bbox_bottom(::google::protobuf::int32 value) {
  set_has_bbox_bottom();
  bbox_bottom_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.bbox_bottom)
}

// optional int32 type = 17;
inline bool Sprite::has_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Sprite::set_has_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Sprite::clear_has_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Sprite::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Sprite::type() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.type)
  return type_;
}
inline void Sprite::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.type)
}

// optional int32 h_tile = 18 [(.buffers.gmx) = "HTile"];
inline bool Sprite::has_h_tile() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Sprite::set_has_h_tile() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Sprite::clear_has_h_tile() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Sprite::clear_h_tile() {
  h_tile_ = 0;
  clear_has_h_tile();
}
inline ::google::protobuf::int32 Sprite::h_tile() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.h_tile)
  return h_tile_;
}
inline void Sprite::set_h_tile(::google::protobuf::int32 value) {
  set_has_h_tile();
  h_tile_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.h_tile)
}

// optional int32 v_tile = 19 [(.buffers.gmx) = "VTile"];
inline bool Sprite::has_v_tile() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Sprite::set_has_v_tile() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Sprite::clear_has_v_tile() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Sprite::clear_v_tile() {
  v_tile_ = 0;
  clear_has_v_tile();
}
inline ::google::protobuf::int32 Sprite::v_tile() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.v_tile)
  return v_tile_;
}
inline void Sprite::set_v_tile(::google::protobuf::int32 value) {
  set_has_v_tile();
  v_tile_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.v_tile)
}

// optional int32 texture_group = 20 [(.buffers.gmx) = "TextureGroups/TextureGroup0"];
inline bool Sprite::has_texture_group() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Sprite::set_has_texture_group() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Sprite::clear_has_texture_group() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Sprite::clear_texture_group() {
  texture_group_ = 0;
  clear_has_texture_group();
}
inline ::google::protobuf::int32 Sprite::texture_group() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.texture_group)
  return texture_group_;
}
inline void Sprite::set_texture_group(::google::protobuf::int32 value) {
  set_has_texture_group();
  texture_group_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.texture_group)
}

// optional bool for3D = 21 [(.buffers.gmx) = "For3D"];
inline bool Sprite::has_for3d() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Sprite::set_has_for3d() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Sprite::clear_has_for3d() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Sprite::clear_for3d() {
  for3d_ = false;
  clear_has_for3d();
}
inline bool Sprite::for3d() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.for3D)
  return for3d_;
}
inline void Sprite::set_for3d(bool value) {
  set_has_for3d();
  for3d_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.for3D)
}

// optional uint32 width = 22;
inline bool Sprite::has_width() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Sprite::set_has_width() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Sprite::clear_has_width() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Sprite::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 Sprite::width() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.width)
  return width_;
}
inline void Sprite::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.width)
}

// optional uint32 height = 23;
inline bool Sprite::has_height() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Sprite::set_has_height() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Sprite::clear_has_height() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Sprite::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 Sprite::height() const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.height)
  return height_;
}
inline void Sprite::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.height)
}

// repeated string subimages = 3 [(.buffers.gmx) = "frames/frame"];
inline int Sprite::subimages_size() const {
  return subimages_.size();
}
inline void Sprite::clear_subimages() {
  subimages_.Clear();
}
inline const ::std::string& Sprite::subimages(int index) const {
  // @@protoc_insertion_point(field_get:buffers.resources.Sprite.subimages)
  return subimages_.Get(index);
}
inline ::std::string* Sprite::mutable_subimages(int index) {
  // @@protoc_insertion_point(field_mutable:buffers.resources.Sprite.subimages)
  return subimages_.Mutable(index);
}
inline void Sprite::set_subimages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.subimages)
  subimages_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Sprite::set_subimages(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:buffers.resources.Sprite.subimages)
  subimages_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Sprite::set_subimages(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subimages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:buffers.resources.Sprite.subimages)
}
inline void Sprite::set_subimages(int index, const char* value, size_t size) {
  subimages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:buffers.resources.Sprite.subimages)
}
inline ::std::string* Sprite::add_subimages() {
  // @@protoc_insertion_point(field_add_mutable:buffers.resources.Sprite.subimages)
  return subimages_.Add();
}
inline void Sprite::add_subimages(const ::std::string& value) {
  subimages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:buffers.resources.Sprite.subimages)
}
#if LANG_CXX11
inline void Sprite::add_subimages(::std::string&& value) {
  subimages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:buffers.resources.Sprite.subimages)
}
#endif
inline void Sprite::add_subimages(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subimages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:buffers.resources.Sprite.subimages)
}
inline void Sprite::add_subimages(const char* value, size_t size) {
  subimages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:buffers.resources.Sprite.subimages)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Sprite::subimages() const {
  // @@protoc_insertion_point(field_list:buffers.resources.Sprite.subimages)
  return subimages_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Sprite::mutable_subimages() {
  // @@protoc_insertion_point(field_mutable_list:buffers.resources.Sprite.subimages)
  return &subimages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace resources
}  // namespace buffers

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::buffers::resources::Sprite_Shape> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::buffers::resources::Sprite_Shape>() {
  return ::buffers::resources::Sprite_Shape_descriptor();
}
template <> struct is_proto_enum< ::buffers::resources::Sprite_BoundingBox> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::buffers::resources::Sprite_BoundingBox>() {
  return ::buffers::resources::Sprite_BoundingBox_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_resources_2fSprite_2eproto__INCLUDED
